%!PS
%%Title: The build2 Package Manager
%%Creator: html2ps version 1.0 beta7
%%EndComments
save
2000 dict begin
/d {bind def} bind def
/D {def} d
/t true D
/f false D
/FL [/Times-Roman
/Times-Italic
/Times-Bold
/Times-BoldItalic
/Courier
/Courier-Oblique
/Courier-Bold
/Courier-BoldOblique
/Helvetica
/Helvetica-Oblique
/Helvetica-Bold
/Helvetica-BoldOblique] D
/WF t D
/WI 0 D
/F 1 D
/IW 471 F div D
/IL 621 F div D
/PS 791 D
/EF [0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 2 2] D
/EZ [12 9 19 17 15 13 12 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 8 8] D
/Ey [0 0 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] D
/EG [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1] D
/Tm [1 1 0.8 0.8 0.8 0.8 0.8 0.8 0 0 0 0 0 0 0.5 1 1 1 1 0 0 1.3 0 0] D
/Bm [1 1 0.5 0.5 0.5 0.5 0.5 0.5 0 0 0 0 0 0 0.5 1 1 1 1 0 0 1 0 0] D
/Lm [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 2 0 0 2 0 0 0] D
/Rm [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0] D
/EU [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 0] D
/NO f D
/YY [[{()}{ h }][{ h }{()}][{()}{()}]] D
/ZZ [[{ (Revision ) ME 0 get join(, June 2024)join }{ Pn }][{ Pn }{ (Revision ) ME 0 get join(, June 2024)join }][{ Ti }{ Ti }]] D
/Ts EZ 0 get D
/TU f D
/Xp t D
/AU f D
/SN 0 D
/Cf t D
/Tp t D
/Fe f D
/TI 2 Ts mul D
/Fm 14 D
/xL 71 D
/xR 71 D
/yL 706 D
/yR 706 D
/Wl 471 F div D
/Wr 471 F div D
/hL 621 F div D
/hR 621 F div D
/FE {newpath Fm neg Fm M CP BB IW Fm add Fm L IW Fm add IL Fm add neg L CP BB
 Fm neg IL Fm add neg L closepath} D
/LA {PM 0 eq{/IW Wl D /IL hL D}{/IW Wr D /IL hR D}ie /W IW D /LL W D /LS W D
 TU PM 0 eq and{IW 56 F div add SA{Sf div}if 0 translate}
 {PM 0 eq{xL yL}{xR yR}ie translate F SA{Sf mul}if dup scale
 CS CF FS Cf{CA CL get VC}if /Bb f D}ie 0 0 M
 TF not Tc or {Cf{gsave SA{1 Sf div dup scale}if Cb VC FE fill grestore}if}if}D
/Pi 0 Ts mul D
/SG [0.8 1 1] D
/Ab 15 D
/J 0 D
/Tc t D
/NH 6 D
/Nf f D
/Pa f D
/LH 1.2 D
/XR f D
/Xr {/pN E D ( [p ) WB pN WB (] )WB} D
/Db [16#FF 16#FF 16#FF] D
/Dt [16#00 16#00 16#00] D
/eA f D
/Fi f D
/bT f D
/Lc t D
/Dl [16#00 16#00 16#00] D
/LX f D
/Br 0.25 D
/IA ([IMAGE]) D
/DS {/PF f D()WB NL NP()pop RC ZF} D
/Gb f D
/Mb t D
/Hc [16#00 16#00 16#00] D
/Bl 3 D
/MI -15.6 D
/DX (DRAFT) D
/Di 0 D
/Tt 113.385826771654 D
/Th { (
) 2 Al()BR (
  ) 0 1 -1 H()4 FZ (The ) SM (build2) ES ( ) ME 1 get join ES()EH (
  ) 0 1 -1 H ( ) EH (
  ) 0 1 -1 H ( ) EH (
  ) 0 1 -1 H ( ) EH (
  ) 0 1 -1 H ( ) EH (
  ) 0 1 -1 H ( ) EH (
  ) 0 1 -1 H ( ) EH (
  ) 0 1 -1 H ( ) EH (
  ) 0 1 -1 H ( ) EH (
  ) 0 1 -1 H ( ) EH (
) Ea()BR (
  ) 0 P (Copyright © ) ME 2 get join(.)join BR (  Permission is granted to copy, distribute and/or modify this document under
  the terms of the MIT License.) EP (

  ) 0 P (Revision ) SM() ME 0 get join ES (, June 2024) BR (  This revision of the document describes the ) SM (build2) ES ( ) ME 3 get join(
  )join SM() ME 0 get join(.x)join ES ( series.) EP()} D
/tH {()0 1 -1 H (Table of Contents) EH()} D
/FD 2 D
/Dy 2 D
/cD [16#F0 16#F0 16#F0] D
/FW 0.6 D
/FU [16#00 16#00 16#00] D
/ET {/RM f D /A0 3 D /PN SN D /OU t D /Ou t D /W IW D /LL W D D1
 Ms not TP and{Ip}if /TF f D} D

%-- End of variable part --
/MySymbol 10 dict dup begin
 /FontType 3 D /FontMatrix [.001 0 0 .001 0 0 ] D /FontBBox [25 -10 600 600] D
 /Encoding 256 array D 0 1 255{Encoding exch /.notdef put}for
 Encoding (e) 0 get /euro put
 /Metrics 2 dict D Metrics begin
  /.notdef 0 D
  /euro 651 D
 end
 /BBox 2 dict D BBox begin
  /.notdef [0 0 0 0] D
  /euro [25 -10 600 600] D
 end
 /CharacterDefs 2 dict D CharacterDefs begin
  /.notdef {} D
  /euro{newpath 114 600 moveto 631 600 lineto 464 200 lineto 573 200 lineto
   573 0 lineto -94 0 lineto 31 300 lineto -10 300 lineto closepath clip
   50 setlinewidth newpath 656 300 moveto 381 300 275 0 360 arc stroke
   -19 350 moveto 600 0 rlineto -19 250 moveto 600 0 rlineto stroke}d
 end
 /BuildChar{0 begin
  /char E D /fontdict E D /charname fontdict /Encoding get char get D
  fontdict begin
   Metrics charname get 0 BBox charname get aload pop setcachedevice
   CharacterDefs charname get exec
  end
 end}D
 /BuildChar load 0 3 dict put /UniqueID 1 D
end
definefont pop

/Cd {aload length 2 idiv dup dict begin {D} repeat currentdict end} D
/EX {EC cvx exec} D
/DU {} d
/BB {pop pop}d
/ie {ifelse} d
/E {exch} d
/M {moveto} d
/R {rmoveto} d
/L {lineto} d
/RL {rlineto} d
/CP {currentpoint} d
/SW {stringwidth} d
/GI {getinterval} d
/PI {putinterval} d
/Sg {setgray} d
/LW {setlinewidth} d
/S {dup () ne OU and{0 Co R AT 3 eq LB and HF not and A1 0 ne A2 0 ne or and
 {A2 0 32 A1 0 6 -1 roll awidthshow}{show}ie 0 Co neg R}{pop}ie
 OU PH 3 eq or{/Ms t D}if} D
/U {OU{gsave CP currentfont /FontInfo get /UnderlinePosition get
 0 E currentfont /FontMatrix get dtransform E pop add newpath M dup SW pop
 CJ 0 RL stroke grestore}if} D
/B {OU Br 0 gt and{CP Ts neg Ts .33 mul R gsave 0 Sg
 CP newpath Ts Br mul 0 360 arc closepath UI 2 mod 0 eq{stroke}{fill}ie
 grestore M CP E Ts Br 1 add mul sub E BB /Ms t D}if}D
/NP {Ms TP not or PA and OU and{TP{OR}if f1{mF k2 /mF E D /YC 0 D}if
 TP TU not PM 0 eq or and{showpage}if DU Ip TE not{LA}if 0.6 LW
 /CI 0 D /TP t D /Hs f D /hl 6 D /Hv 6 D /HI hi D /Ms f D}if Bs XO BO M} D
/Np {LE sub CP E pop gt PL 0 eq and{NP}if}D
/Ip {/PN PN 1 add D /Pn RM{1}{4}ie PN Ns D /PM PN SN sub 2 mod D} D
/GP {E dup 3 -1 roll get PN 1 add 2 mod get dup type /integertype eq
 {get 0 get}{E pop}ie}d
/Fc {dup 2 GP exec SW pop /S1 E D dup 1 GP exec SW pop /S2 E D 0 GP exec SW
 pop /S3 E D S1 0 gt{S2 2 mul S1 add S3 2 mul S1 add 2 copy lt{E}if pop}{0}ie
 S2 S3 add 2 copy lt{E}if pop IW .9 mul div dup 1 gt{1 E div}{pop 1}ie}D
/OR {Df{Sd}if tp not{gsave SA{1 Sf div dup scale}if Fe{Cf{FU VC}if FW LW
 1 setlinejoin FE stroke}if /YO {60 F div dup 40 gt{pop 40}if}D /cs CS D
 /cf CF D /CF 0 D /pf PF D /PF f D /Fn FN D /At AT D /AT 0 D /FN EF Hf 1 add
 get D Fz Fs FS ZZ Fc Fz mul Fs FS EU Hf 1 add get dup type /arraytype eq
 Cf and{VC}{pop 0 Sg}ie IW IL neg YO sub M ZZ 1 GP exec dup SW pop neg 0 R Sh
 0 IL neg YO sub M ZZ 0 GP exec Sh ZZ 2 GP exec dup SW pop IW E sub 2 div
 IL neg YO sub M Sh Fz Fs FS NO{/AW IW Pn SW pop sub D AW 2 div IL neg YO sub
 S1 0 gt S2 AW .45 mul gt or S3 AW .45 mul gt or{Fz 2 mul sub}if M Pn Sh}if
 EU Hf get dup type /arraytype eq Cf and{VC}{pop 0 Sg}ie YY Fc /FN EF Hf get D
 Hz mul HS FS IW YO M YY 1 GP exec dup SW pop neg 0 R Sh 0 YO M YY 0 GP exec Sh
 YY 2 GP exec dup SW pop IW E sub 2 div YO M Sh /FN Fn D /AT At D t Pb XO SZ
 SL get neg R /PF pf D grestore /CF 0 D cs cf FS}if}D
/Sh {dup () ne{CP Hz 4 div sub BB show CP CS add BB}{pop}ie}D
/Pb {/OU E D /Ou OU D /PB t D 0 0 M Ba{/Sa save D /BP t D /Fl t D RC /PL 0 D
 /PH 0 D /W IW D /LE IL .7 mul D /EO 0 D SI ZF /YA 0 D /BO 0 D /C1 () D
 BA 0 Ts neg R Bb{Xl Yl Xh Yh}if Bb CP Sa restore M
 {/Yh E D /Xh E D /Yl E D /Xl E D}if /Fl t D}if
 BL /OU t D /HM f D /Ou t D /PB f D} D
/Bs {/BP Ba not D}D
/reencodeISO {
 dup dup findfont dup length dict begin{1 index /FID ne{D}{pop pop}ie}forall
 /Encoding ISOLatin1Encoding D currentdict end definefont} D
/ISOLatin1Encoding [
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N
/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright
/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m
/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/space/exclamdown/cent/sterling/currency/yen/brokenbar
/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot
/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior
/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine
/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute
/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex
/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis
/yacute/thorn/ydieresis
] D
[128/backslash 129/parenleft 130/parenright 141/circumflex 142/tilde
143/perthousand 144/dagger 145/daggerdbl 146/Ydieresis 147/scaron 148/Scaron
149/oe 150/OE 151/guilsinglleft 152/guilsinglright 153/quotesinglbase
154/quotedblbase 155/quotedblleft 156/quotedblright 157/endash 158/emdash
159/trademark]
aload length 2 idiv 1 1 3 -1 roll{pop ISOLatin1Encoding 3 1 roll put}for
/colorimage where{pop}{
 /colorimage {
  pop pop /Pr E D {/Cv Pr D /Gr Cv length 3 idiv string D 0 1 Gr length 1 sub
   {Gr E dup /i E 3 mul D Cv i get 0.299 mul Cv i 1 add get 0.587 mul add
    Cv i 2 add get 0.114 mul add cvi put}for Gr} image} D
}ie
/pdfmark where{pop}{userdict /pdfmark /cleartomark load put}ie
WF{FL{reencodeISO D}forall}{4 1 FL length 1 sub{FL E get reencodeISO D}for}ie
/Symbol dup dup findfont dup length dict begin
 {1 index /FID ne{D}{pop pop}ie}forall /Encoding [Encoding aload pop]
 dup 128 /therefore put D currentdict end definefont D

/SF {/CS E D SZ SL CS put FO SL FN put /YI CS LH neg mul D dup ST cvs ( ) join
 CS ST cvs join C1 E join ( NF ) join /C1 E D CS NF /Wf WF FN 0 gt or D
 /BW Wf{( ) SW pop}{0}ie D}D
/NF {/cS E D /cF E D cF 0 ge{FL cF get}{cF -1 eq{/Symbol}{/MySymbol}ie}ie
 findfont cS scalefont setfont} D
/FS {CF or /CF E D FR SL CF put CF CF 0 ge{FN 4 mul add}if E SF} D
/PC {SH /BP f D fin not GL not and{NL}if /HM t D /LL LS D} D
/BS {/TX E D Wf{/fin f D /CW 0 D /LK 0 D /SC 0 D
 /RT TX D {RT ( ) search{/NW E D pop /RT E D /WH NW SW pop D CW WH add LL gt
 {TX SC LK SC sub 1 sub NN GI GL{SH cF cS OC
 2 copy cS ne E cF ne or{NF}{pop pop}ie}{PC /CW WH BW add D}ie
 /SC LK D}
 {GL{JC}if
 /CW CW WH add BW add D /HM t D}ie /GL f D /Ph f D
 /LK LK NW length 1 add add D}{pop exit}ie}loop
 /fin t D TX SC LK SC sub GI SH RT () ne{GL not{CC}if}if
 /LC TX length D /WH RT SW pop D CW WH add Hy{HC SW pop add}if LL gt
 {RT GL{SH cF cS OC 2 copy cS ne E cF ne or{NF}{pop pop}ie
 Hy{/Ph t D}if /LL LS D}{NL /LL LS D SH}ie}
 {RT PC Hy{CC}if /Ph Ph Hy or D}ie RT () ne{/GL t D /HM t D}if}
 {TX SW pop LL le{TX SH}{/NW () D 0 2 TX length 1 sub
 {/CW E D TX 0 CW GI dup SW pop LL gt{pop NW SH /HM t D NL/LL W XO sub MR sub D
 /CW CW 2 sub NN D /TX TX CW TX length CW sub GI D TX BS exit}
 {/NW E D}ie}for}ie}ie /HM t D}D
/CC {C0 length 0 gt{JC}if /C0 [C1 L1 YA YB Mf NS NB TB AF Bw] D
 /C1 () D /L0 L1 D /YA 0 D /YB 0 D /Mf 0 D /NS 0 D /NB 0 D}D
/JC {C0 aload length 0 gt{pop pop pop NB add /NB E D NS add /NS E D
 dup Mf gt{/Mf E D}{pop}ie dup YB gt{/YB E D}{pop}ie
 dup YA gt{/YA E D}{pop}ie pop C1 join /C1 E D /C0 [] D}if}D
/OC {C0 length 0 gt{C1 L1 L0 sub YA YB Mf NS NB TB AF Bw GL C0 aload pop
 /Bw E D /AF E D /TB E D /NB E D /NS E D /Mf E D /YB E D /YA E D /C0 [] D
 /L1 E D /C1 E D Ph{HC SH}if NL /GL E D /Bw E D /AF E D /TB E D /NB E D /NS E D
 /Mf E D /YB E D /YA E D /L1 E D /LL W L1 sub XO sub MR sub WH sub D /CW 0 D
 C1 E join /C1 E D}if}D
/BT {/LB t D dup length string copy RS dup dup () ne E ( ) ne and
 {/CI 0 D /LS LL D /LL W L1 sub XO sub MR sub D BS}
 {dup ( ) eq{/GL f D}if dup () eq L1 0 eq or{pop}{SH /BP f D /Ph f D}ie}ie
 /LB f D} D
/BL {CP E pop XO E M} D
/NL {JC /GL f D /SK W XO sub MR sub L1 sub TB{Bw add}if D
 /YA LF{Mf HM Fl not and PF or{LH mul}if}{0 /LF t D}ie YA 2 copy lt{E}if pop D
 C1 () ne{/FB YB Mf SA{Sf mul}if 4 div 2 copy lt{E}if pop D}if Fl{/Ya YA D}if
 CP E pop YA sub YB sub LE neg lt Fl not and PB not and{NP}if NT TL BL
 OU PF not and PB or{/RE L1 TB{Bw sub}if
 W XO sub MR sub div YA YB add LE BO add div 2 copy lt{E}if pop D
 RE 1 gt{BL 1 RE div dup scale}if}if
 AT 2 le{SK AT mul 2 div YA neg R}if
 AT 3 eq{0 YA neg R TB{/NB NB 1 sub D /NS NS 1 sub D}if /NB NB 1 sub NN D
 /A3 NS 6 mul NB add D NS NB add 0 eq
  {/A1 0 D /A2 0 D}
  {NS 0 eq{/A1 SK NB div dup J gt{pop 0}if D /A2 0 D}{J A3 mul SK lt
   {/A1 J D /A2 SK J NB mul sub NS div dup Ab gt{/A1 0 D pop 0}if D}
   {/A1 SK A3 div D /A2 A1 6 mul D}ie}ie}ie /A1 A1 NN D /A2 A2 NN D}if
 AT 4 eq{0 YA neg R PH 2 le{PD 0 lt{/PD L1 D}if PD M1 gt{/M1 PD D}if
 L1 PD sub M2 gt{/M2 L1 PD sub D}if}{DV ID 1 sub get 0 ge{Lo 0 R}if}ie}if
 F0 cF ne Cs cS ne or{F0 Cs NF}if
 /ms Ms D /Ms f D CP FB sub
 C1 cvx exec XO EO sub L1 add TB{BW sub}if dup LM gt{/LM E D}{pop}ie
 PH 0 eq PH 4 eq or Ms and{HF not{/PO t D /AH t D}if
 BB CP YA add E AT 3 eq LB and{A1 sub}if TB{BW sub}if E BB}
 {pop pop}ie Ms HM PH 3 eq and or{/BP f D /Fl f D}if
 /Lo 0 D /L1 0 D /F0 cF D /Cs cS D BP not{0 YB NN neg R}if
 OU f1 and mF not and{k2 /f1 f D}if
 OU PF not and PB or{RE 1 gt{RE dup scale}if}if /Ms ms Ms or D
 /C1 AF{(Cp )}{()}ie D /YA 0 D /YB 0 D BL
 AT 4 eq LB not and PH 3 ge and
 {ID DV length lt{DV ID get dup 0 ge{DO E sub /Lo E D /L1 Lo D}{pop}ie
 /ID ID 1 add D}if}if /T t D CD{/LN LN 1 add D PD}if
 /PD -1 D /NS 0 D /NB 0 D /TB f D /Ph f D /Mf 0 D /HM f D} D
/RS {/TM E D /CN 0 D TM{10 eq{TM CN ( ) PI}if /CN CN 1 add D}forall
 /CN 0 D /BK HM EN and{0}{1}ie D TM
 {dup 32 ne{TM CN 3 2 roll put /CN CN 1 add D /BK 0 D}
 {pop BK 0 eq{TM CN 32 put /CN CN 1 add D}if /BK 1 D}ie}forall
 TM 0 CN GI dup dup () ne E ( ) ne and
 {dup CN 1 sub get 32 eq{/EN f D}{/EN t D}ie}if} D
/join {2 copy length E length add string dup 4 2 roll 2 index 0 3 index
 PI E length E PI}d
/WR {(\n) search{dup () ne BP not or
 {Li 4 le CP E pop YI Li mul add LE add 0 lt and PL 0 eq and{NP}if
 SH NL pop /Li Li 1 sub D WR}{pop pop WR}ie}{SH}ie /CI 0 D /BP f D} D
/SH {dup dup () ne E ( ) ne and PF or CS Mf gt and{/Mf CS D}if
 T not Wf and{( ) E join /T t D}if dup BP{/MF CS D}if
 AT 3 eq{2 copy length dup 0 gt{/NB E NB add D
 {( ) search{/NS NS 1 add D pop pop}{pop exit}ie}loop}{pop pop}ie}if
 CD PD 0 lt and{dup DC search{SW pop /PD E L1 add D pop pop}{pop}ie}if
 0 Np dup SW pop L1 add /L1 E D dup () ne
 {C1 (\() join E join (\)) join AU AF and UF or Wf and{( U ) join}if
 sF{( s ) join}if ( S ) join
 /C1 E D dup length 1 sub get 32 eq /TB E D /Bw BW D}{pop pop}ie} D
/BG {AI LG BC add add 0 eq} D
/ON {OU{Ty AR AI NN get dup 1 add Ln Ns Ty 2 mod 0 eq{(.  )}{(\)  )}ie join
 dup SW pop neg 0 R CP E 0 lt{0 E M}{pop}ie CP BB show /Ms t D}if} D
/Ln {AR AI 3 -1 roll put}D
/SP {dup CI lt BP not and{dup CI sub 0 E R /CI E D}{pop}ie} D
/BN {PF{WR /HM f D}{BT NL}ie} D
/NN {dup 0 lt{pop 0}if} D
/h {(h) HI ST cvs join cvx exec dup 1 get E Nf{0 get E join}{pop}ie} D
/H {/fn FN D /Hi E 1 add D 1 sub /HL E D /H2 HL 2 add D /GS EZ H2 get D
 E Tm H2 get GS mul BE dup 0 gt{1 sub}{pop EG H2 get dup 0 lt{pop AT}if}ie NA
 WW Np /SL SL 1 add D /FN EF H2 get D GS Ey H2 get FS
 EU H2 get Sc Hs not HL Hl lt and Hs HL hl lt and or Hi 0 eq or
 {/HI Hi D /Hs t D /hl HL D /Hv HL D}if HL Hl lt{/hi Hi D}if
 Nf HI 0 gt and{(h) Hi ST cvs join cvx exec 0 get WB}if
 /HF t D /AH f D /PO f D} D
/EH {Bm H2 get GS mul BE OA /SL SL 1 sub NN D /CF 0 D /FN fn D
 SZ SL get FR SL get FS /HF f D /GS Ts D ()Ec} D
/P {E PF{WR}{PO{EP}{BN}ie Ts 4 mul Np AE not{Tm 0 get Ts mul neg SP}if
 dup 0 ge AH and{Pi Pd}if}ie 1 sub dup 0 lt{pop AV AL get}if /AT E D /PO t D} D
/EP {PF{WR}{BN Ts 4 mul Np}ie AE not{Bm 0 get Ts mul neg SP}if
 /AT AV AL get D /PO f D} D
/BE {E PO{EP}{BN}ie Ts 4 mul Np neg SP} D
/HR {/Aw W EO sub D /RW E dup 0 gt{Aw mul}{neg}ie dup Aw gt{pop Aw}if D /RZ E D
 E BN Ts neg SP 1 sub 2 div Aw RW sub mul EO add CP E pop M PF{0 Ps neg R}if
 0 Np OU{gsave RZ LW Cf{Hc VC}{0 Sg}ie CP BB RW 0 RL CP BB stroke grestore}if
 /CI 0 D /BP f D PF not{Ts neg SP}if /Ms t D} D
/AD {I NL EG 14 get dup 0 lt{pop AT}if NA /AE t D Tm 14 get Ts mul neg SP
 Cf{EU 14 get dup -1 eq{pop CA CL get}if Sc}if} D
/DA {BN ()ES OA /AE f D ()Ec Bm 14 get Ts mul neg SP} D
/PR {/MW E D /Li E D Tm 1 get Ps mul BE 0 NA /FN Fp D /PF t D SI /SL SL 1 add D
 /CF 0 D Ps CS mul Ts div MW WC mul CS mul Ts div dup LL gt PL 0 eq and
 {LL div div}{pop}ie Ey 1 get FS CP E pop LE add YI neg div cvi dup Li lt
 AH and{4 lt YI Li mul 5 mul LE add 0 gt or PL 0 eq and{NP}if}{pop}ie
 EU 1 get Sc /GS Ps D}D
/RP {WR NL () /PF f D SI /FN 0 D ES Bm 1 get Ps mul neg SP OA /GS Ts D} D
/SI {/XO Lm 15 get BC NN mul Lm 16 get AI UI sub NN mul add
 Lm 17 get UI NN mul add Lm 20 get LG NN mul add Ts mul
 PF{Lm 1 get Ps mul add}if EO add D
 /MR Rm 15 get BC NN mul Rm 16 get AI UI sub NN mul add
 Rm 17 get UI NN mul add Rm 20 get LG NN mul add Ts mul
 PF{Rm 1 get Ps mul add}if D /LL W XO sub MR sub D} D
/DT {/cC E D BN /LG LG 1 sub D SI /LG LG 1 add D WW 2 div Np BL} D
/DD {WB Cc 0 eq cC 0 eq and L1 0 eq or Lm 20 get Ts mul L1 sub TB{BW add}if
 Ts 2 div lt or NL /LF E D SI BL /cC 0 D} D
/DL {Dc LG Cc put /Cc E D BG{Tm 18 get Ts mul BE}{BN}ie /LG LG 1 add D BL} D
/LD {BN LG 0 gt{/LG LG 1 sub D}if /Cc Dc LG get D SI
 BG{()Bm 18 get Ts mul BE}if BL} D
/UL {BG{Tm 17 get Ts mul BE}{BN}ie NR AI NN 0 put /UI UI 1 add D
 /AI AI 1 add D SI BL} D
/LU {BN /UI UI 1 sub D /AI AI 1 sub D SI BG{()Bm 17 get Ts mul BE}if BL} D
/OL {E BG{Tm 16 get Ts mul BE}{BN}ie TR AI NN Ty put /Ty E D NR AI NN 1 put
 /AI AI 1 add D SI BL 1 Ln} D
/LO {BN /AI AI 1 sub D /Ty TR AI get D SI BG{()Bm 16 get Ts mul BE}if BL} D
/LI {E BN -1 SP /BP f D /CI 0 D 0 Np NR AI 1 sub NN get 1 eq
 {dup dup 0 gt E 4 le and{/Ty E D}{pop}ie
 /L1 L1 Ty AR AI NN get Ns SW pop XO sub dup 0 lt{pop 0}if add D ( ON )}
 {pop ( B )}ie C1 E join /C1 E D CS Mf gt{/Mf CS D}if BL} D
/BQ {Tm 15 get Ts mul BE /BC BC 1 add D SI BL} D
/QB {Bm 15 get Ts mul BE /BC BC 1 sub D SI BL} D
/Al {E EP 1 sub dup 0 lt{pop AV AL get}if NA} D
/Ea {EP OA} D
/WB {PF{WR}{BT}ie} D
/F1 {WB /FN 0 D CS 0 FS} D
/F2 {WB /FN WI D CS 0 FS} D
/HY {/Hy t D WB /Hy f D} D
/YH {WB} D
/A {/LT E D LT 1 eq{/RN E D}if /Lh E D WB /C1 C1 ( Cp ) join D
 Lc AF not and{Cl Sc}if /AF t D} D
/EA {Lc AF and{Ec}{WB}ie TL Pa AF and Lh 0 ne and
 {( \() Lh join (\)) join /AF f D WB}if /AF f D} D
/TL {C1 ( Tl ) apa /C1 E D} d
/apa {AF OU and Lh 0 ne LT 1 eq or and{LT 1 eq{RN ( /) E ST cvs join}
 {(\() Lh join (\)) join}ie E join join}{pop}ie} d
/Cp {/Xc CP /Yc E D D} D
/SS {Cf{dup 0 ge{EU E get dup -1 eq{pop CA CL get}if}{pop CA CL get}ie Sc}
 {pop}ie SZ SL get /SL SL 1 add D} D
/I {WB 8 SS 1 FS} D
/EM {WB 8 SS /CF CF 1 xor D 0 FS} D
/BD {WB 9 SS 2 FS} D
/TT {WB 10 SS /FN Fp D 0 FS} D
/KB {WB 11 SS /FN Fp D 2 FS} D
/CT {WB 12 SS 1 FS} D
/SM {WB 13 SS /FN Fp D 0 FS} D
/Q {/QL QL 1 add D QO QL 2 mod get La get join WB} D
/EQ {QC QL 2 mod get La get join WB /QL QL 1 sub D} D
/RO {WB -1 SS /CF 0 D 0 FS} D
/SY {WB -1 SS -1 FS} D
/MY {WB -1 SS -2 FS} D
/ES {WB /SL SL 1 sub NN D /CF 0 D /FN FO SL get D SZ SL get FR SL get FS ()Ec}D
/FZ {3 sub 1.2 E exp GS mul E WB TL /C1 C1 ( Cp ) join D /SL SL 1 add D 0 FS} D
/Ef {WB TL ()ES /C1 C1 ( Cp ) join D} D
/BZ {dup /Bf E D FZ}D
/Sc {dup -1 ne Cf and{/CL CL 1 add D dup 0 eq{pop [0 0 0]}if
 dup CA E CL E put VS ( VC ) join C1 E join /C1 E D}{pop}ie} D
/Ec {WB Cf{/CL CL 1 sub NN D CA CL get VS ( VC ) join C1 E join /C1 E D}if} D
/VS {dup type /arraytype eq{([) E {ST cvs join ( ) join}forall (]) join}if} D
/VC {{255 div}forall setrgbcolor} D
/Sl {dup type /integertype ne{Ds}if /La E D WB}d
/UN {WB /UF t D} D
/NU {WB /UF f D} D
/SE {WB /sF t D} D
/XE {WB /sF f D} D
/sM {/C1 C1 ( k1 ) join D}d
/eM {/C1 C1 ( k2 ) join D}d
/k1 {/YC CP E pop Ts add D /mF t D /f1 t D}d
/k2 {gsave 3 LW -9 CP E pop Ts 0.2 mul sub M -9 YC L stroke grestore /mF f D}d
/Ac {/AC E D WB}d
/Ca {eA{( \()join AC join(\) )join}if WB}d
/s {OU{gsave 0 CS .25 mul R dup SW pop CJ 0 RL stroke grestore}if}D
/CJ {AT 3 eq LB and{E dup dup length 1 sub A1 mul E
 {( ) search{pop pop E A2 add E}{pop exit}ie}loop 3 -1 roll add
 W CP pop sub 2 copy gt{E}if pop}if}D
/So {/Co E D} D
/SO {C1 Yo ST cvs join ( So ) join /C1 E D (j) SW pop 2 div Pd} D
/Se {E WB CS E div Pd}D
/Pd {dup type /stringtype eq{SW pop}if dup /L1 E L1 add D
 ST cvs ( 0 R ) join C1 E join /C1 E D} D
/Sp {0.35 CO} D
/Sb {-0.2 CO} D
/CO {OV Io Yo put /Yo E CS mul Yo add D /Io Io 1 add D -1.5 Io mul 3 add FZ SO
 CS Yo add dup YA gt{/YA E D}{pop}ie
 Yo neg dup YB gt{/YB E D}{pop}ie} D
/Es {ES /Io Io 1 sub NN D /Yo OV Io get D SO} D
/SB {/N2 0 D 0 1 NI{/N E D{IX N2 get 0 lt{/N2 N2 1 add D}{exit}ie}loop
 /K WS N get FC N get mul D /NY AY N2 get D /BV NY array D
 0 1 NY 1 sub{/TM K string D currentfile TM readhexstring pop pop BV E TM put}
 for BM N BV put /N2 N2 1 add D}for} D
/IC [{/MA E D /MB 0 D}{2 div /MA E D /MB MA D}{/MB E CS sub D /MA CS D}
 {pop /MA YS AB mul D /MB 1 AB sub YS mul D}{pop /MA 0 D /MB 0 D}] D
/IP {BV N get /N N 1 add D} D
/II {/K E D IX K get 0 lt{/EC E D}if /TY E D
 TY 4 eq{/Y E D /X E D}if TY 3 eq{/AB E D}if
 /XW AX K get D /YW AY K get D /IS SG IT K get get D /XS XW IS mul D
 /YS YW IS mul D YS IC TY get exec /MA MA Fl not{3 add}if D} D
/IM {II /ty TY D /xs XS D /ys YS D /ya YA D /yb YB D /ma MA D /mb MB D /k K D
 /ec EC D /BP f D /CI 0 D WB TL L1 xs add dup XO add MR add W gt
 {pop /ma ma Fl{3 add}if D NL /YA ma D /YB mb D /YS ys D /L1 xs D}
 {/L1 E D ma YA gt{/YA ma D}if mb YB gt{/YB mb D}if}ie /TB f D
 OU{CP E pop YS sub LE neg lt Fl not and PB not and{NP /YA ma D /YB mb D}if
 /BP f D ty ST cvs ( ) join IX k get 0 lt{(\() join ec join (\) ) join}if
 k ST cvs join ty 3 eq{AB ST cvs ( ) join E join}if
 ty 4 eq{X ST cvs ( ) join Y ST cvs join ( ) join E join}if C1 E join
 ( DI ) join FP 2 eq FP 1 eq AF and or{( FM ) join}if
 ( Il Cp ) apa /C1 E D /EN f D}if /HM t D /T f D} D
/DI {II /Xc CP /Yc E D D /YN YW neg D /HM t D /CI 0 D /K2 IX K get D gsave
 TY 4 eq{OX X IS mul add OY FY add YS sub Y IS mul sub}
 {/FY YS D CP MB sub 2 copy /OY E D /OX E D}ie
 translate K2 0 ge{/DP AZ K2 get D /BV BM K2 get D XS YS scale /N 0 D XW YW DP
 [XW 0 0 YN 0 YW] {IP} FC K2 get 1 eq{image}{f 3 colorimage}ie}
 {EX}ie grestore XS 0 R /Ms t D} D
/FM {gsave 0 Sg CP MB sub translate XS neg 0 M 0 YS RL XS 0 RL 0 YS neg RL
 XS neg 0 RL stroke grestore} D
/NA {/AT E D /AL AL 1 add D AV AL AT put} D
/OA {AL 0 gt{/AL AL 1 sub D /AT AV AL get D}if} D
/D1 {/BR {CP E pop E BN Mb{CP E pop eq{0 YI R}if}{pop}ie} D
 /Sn {OU{C1 E ST cvs join ( Ld ) join /C1 E D}{pop}ie} D} D
/D1 {/BR {BN} D /Sn {OU {C1 E ST cvs join ( Ld ) join /C1 E D} {pop} ie} D} D
/TC {/TF t D /ML 0 D HN{SW pop dup ML gt{/ML E D}{pop}ie}forall NP /RM RM not D
 RC /OU Tc D Ep /PN 0 D Ms not TP and{Ip}if /W IW ML sub Ts sub D
 /A0 0 D TH{/BR {( ) join BT} D /Sn {pop} D /Au () D}if} D
/TN {0 eq{E EA PF HF or not XR and{HN E get Xr}{pop}ie}
 {OU{Tn 0 ge{() BN}if /Tn E D}{pop}ie WB}ie} D
/NT {OU LB not and Tn 0 ge and{PL 0 eq{Ms not{CS CF FS}if CP dup
 /y E YA sub D W 9 sub CS -1.8 mul XO L1 add 2 add{y M (.) show}for
 HN Tn get dup SW pop IW E sub y M show CP BB M}if /Tn -1 D}if} D
/Ld {/DN E D HN DN Pn put [/View [/XYZ -4 Fl{PS}{CP YA add US E pop}ie null]
 /Dest DN ST cvs cvn /DEST pdfmark} D
/C {ND 1 eq{1 sub}if TI mul /XO E D NL Nf not{pop()}if 0 3 -1 roll 1 A} D
/OP {BP not{NP}if PN 2 mod 0 eq{/Ms t D NP}if}D
/Ep {Xp PN 2 mod 0 eq and OU and{/Pn (-) D showpage /PM 1 D LA}if}D
/Dg [73 86 88 76 67 68 77] D
/Rd [0 [1 1 0][2 1 0][3 1 0][2 1 1][1 1 1][2 2 1][3 3 1][4 4 1][2 1 2]] D
/Ns {/m E D /c E 32 mul D /j m 1000 idiv D /p j 12 add string D
 c 96 le m 0 gt and{c 32 le {/i 0 D /d 77 D /l 100 D /m m j 1000 mul sub D
  j -1 1 {pop p i d c add put /i i 1 add D}for
  4 -2 0 {/j E D /n m l idiv D /m m n l mul sub D /d Dg j get D
   n 0 gt {/x Rd n get D x 0 get -1 1 {pop p i d c add put /i i 1 add D}for
   p i x 1 get sub Dg x 2 get j add get c add put}if /l l 10 idiv D
  }for p 0 i GI}
  {/i ST length 1 sub D m {1 sub dup 0 ge{dup 26 mod c add 1 add
   ST i 3 -1 roll put 26 idiv dup 0 eq{pop exit}if}if /i i 1 sub D}loop
   ST i ST length i sub GI}ie}
 {m p cvs}ie} D
/US {matrix currentmatrix matrix defaultmatrix matrix invertmatrix
 matrix concatmatrix transform} D
/GB {Gb{US}if}D
/Tl {/Rn E D Xc CP pop ne{
 [/Rect [Xc 1 sub Yc cS 0.25 mul sub GB CP E 1 add E cS 0.85 mul add GB]
  /Subtype /Link /Border [0 0 Cf Lc and LX and AU or{0}{1}ie] Rn type
  /nametype eq {/Dest Rn}{/Action [/Subtype /URI /URI Rn] Cd}ie
  /ANN pdfmark}if} D
/Il {/Rn E D [/Rect [Xc Yc GB Xc XS add Yc YS add GB] /Subtype /Link
 /Border [0 0 0] Rn type /nametype eq{/Dest Rn}
 {/Action [/Subtype /URI /URI Rn] Cd}ie /ANN pdfmark} D
/XP {[{/Z Bz 2 div D Z 0 R Z Z RL Z neg Z RL Z neg Z neg RL Z Z neg RL
 Fi cH 1 eq and{fill}if} {Bz 0 RL 0 Bz RL Bz neg 0 RL 0 Bz neg RL
 Fi cH 1 eq and{fill}if} {0 -5 R Bz 0 RL 0 21 RL Bz neg 0 RL 0 -21 RL}]} D
/MS {/Sm E D WB}D
/O {BN()0 Sm BX} D
/BX {/Bt E D Bt 2 lt{/Ch E D CS 0.8 mul}{11 mul}ie W XO sub MR sub
 2 copy gt{E}if pop /HZ E D Bt 2 eq{Fi not{pop()}if ( )E join /Ft E D TT
 /PF t D /MW 1 D /Li 1 D /Fw Ft SW pop D Fw HZ gt{/HZ Fw 8 add D}if
 HZ ST cvs( )join}{WB Ch ST cvs( )join}ie L1 HZ add XO add MR add W gt{NL}if
 Bt 2 eq{Ft ES Fw neg HM{CS sub}if Pd}if Bt ST cvs join( Bx )join
 Bt 2 eq HM and{CS Pd}if C1 E join /C1 E D /L1 L1 HZ add D /T f D
 ( ) Pd /PF f D Bt 2 lt{YA CS .8 mul lt{/YA CS .8 mul D}if}
 {YB 5 lt{/YB 5 D}if YA 21 lt{/YA 21 D}if}ie /CI 0 D} D
/Bx {dup 2 eq{E /Bz E D}{E /cH E D /Bz CS .8 mul D}ie
 OU {gsave 0 Sg XP E get exec stroke grestore}{pop}ie Bz 0 R /Ms t D}D
/SD {FD 4 mul Dy add DZ NF newpath 0 0 M DX t charpath pathbbox
 3 -1 roll sub /DY E D E dup /X1 E D sub WM mul WX DY mul add WM DG mul E div
 /DF E D /DR WX DF mul DY mul WM div 2 div D} d
/Sd {gsave 0 IL Di mul neg translate IL IW atan Di 0 eq{neg}if rotate
 FD 4 mul Dy add DZ NF DR X1 sub DY 2 div neg M cD VC DX show grestore} d
/Pt {/tp t D Tp{NP /Pn (TP) D 0 Tt neg R Th BN NP Ep ET RC ZF}if /tp f D} D
/RC {/AI 0 D /LG 0 D /BC 0 D /UI 0 D /PF f D /Cc 0 D /cC 0 D /Dc 10 array D
 /NR [0 1 9{pop 0}for] D /La Ds D /AR 10 array D /TR 10 array D /AV 30 array D
 SI /AL -1 D /AT A0 D AT NA /OV 9 array D /Yo 0 D /Co 0 D /Io 0 D /Hy f D
 /Ph f D /CL -1 D Ct Sc}D
/ZF {/FR [0 1 30{pop 0}for] D /SZ [0 1 30{pop 0}for] D /FO [0 1 30{pop 0}for] D
 /SL 0 D /CF 0 D /FN 0 D 0 Ts SF}D
/QO [[(\232)(\234)(\233)(\253)(\273)(\253\240)][(\231)(')(`)(\253)(\273)(\253\240)]] D
/QC [[(\233)(\234)(\234)(\273)(\253)(\240\273)][(`)(')(')(\273)(\253)(\240\273)]] D
/Hf EF length 2 sub D
/Hz EZ Hf get D
/HS Ey Hf get D
/Fz EZ Hf 1 add get D
/Fs Ey Hf 1 add get D
/LE IL D
/Ps EZ 1 get D
/Fp EF 1 get D
/XO 0 D
/YI 0 D
/CI 0 D
/FP 0 D
/WW Ts 7 mul D
/Mf 0 D
/YA 0 D
/YB 0 D
/Cs Ts D
/GS Ts D
/F0 0 D
/NS 0 D
/NB 0 D
/N 0 D
/C0 [] D
/C1 () D
/Lo 0 D
/L1 0 D
/LM 0 D
/PH 0 D
/EC 0 D
/Lh 0 D
/LT 0 D
/CH 1 string D
/ST 16 string D
/CA 9 array D
/HC (\255) D
/HM f D
/PF f D
/EN f D
/TB f D
/UF f D
/sF f D
/AE f D
/AF f D
/BP t D
/CD f D
/PA t D
/GL f D
/T t D
/HF f D
/AH f D
/SA f D
/PB f D
/f1 f D
/mF f D
/OX 0 D
/OY 0 D
/FY 0 D
/EO 0 D
/FB 0 D
/PL 0 D
/Bw 0 D
/PD -1 D
/TP f D
/tp f D
/TH t D
/Ty 4 D
/Tn -1 D
/Fl t D
/LB t D
/PM 1 D
/Ms f D
/Ba f D
/Bb f D
/Hl 3 D
/hl 6 D
/Hv 6 D
/Hs f D
/HI 0 D
/hi 0 D
/PO t D
/TE f D
/LF t D
/BO 0 D
/Sm 1 D
/Bf 3 D
/A1 0 D
/A2 0 D
/Ds 2 D
/QL -1 D
/Cb Db D
/Ct Dt D
/Cl Dl D
[/Creator (html2ps version 1.0 beta7) /Author () /Keywords () /Subject (package manager)
 /Title (The build2 Package Manager) /DOCINFO pdfmark
/ND 1 D
/HN [(1) (1) (1) (1) (2) (5) (7) (8) (12) (12) (13) (13) (13) (18) (19) (19)
(20) (21) (21) (21) (21) (23) (24) (24) (25) (25) (25) (26) (26) (26) (26)
(26) (26) (27) (27) (34) (36) (37) (39) (40) (41) (42) (45) (46) (47) (47)
(48) (48) (48) (49) (49) (49) (49) (50) (50) (50) (50) (51) (52) (52) (52)
(52) (52) (53) (54) (54) (54) (54) (54) (55) (55) (56) (58) (59) (61) (1)
(1) (2) (5) (7) (8) (12) (12) (13) (13) (13) (18) (19) (19) (20) (21) (21)
(21) (21) (23) (24) (24) (25) (25) (25) (26) (26) (26) (26) (26) (26) (27)
(27) (34) (36) (37) (39) (40) (41) (42) (45) (46) (47) (47) (48) (48) (48)
(49) (49) (49) (49) (50) (50) (50) (50) (51) (52) (52) (52) (52) (52) (53)
(54) (54) (54) (54) (54) (55) (55) (56) (58) (59) (61)] D
/h0 [()(Table of Contents)] D
/h1 [(1\240\240)(Preface)] D
/h2 [(2\240\240)(1 Package Name)] D
/h3 [(3\240\240)(2 Package Version)] D
/h4 [(4\240\240)(3 Package Version Constraint)] D
/h5 [(5\240\240)(4 Package Build System Skeleton)] D
/h6 [(6\240\240)(5 Dependency Configuration Negotiation)] D
/h7 [(6.1\240\240)(5.1 Prefer X but Accept X or Y)] D
/h8 [(6.2\240\240)(5.2 Use If Enabled)] D
/h9 [(6.3\240\240)(5.3 Disable If Enabled by Default)] D
/h10 [(7\240\240)(6 Manifests)] D
/h11 [(7.1\240\240)(6.1 Manifest Format)] D
/h12 [(7.2\240\240)(6.2 Package Manifest)] D
/h13 [(7.2.1\240\240)(6.2.1 name)] D
/h14 [(7.2.2\240\240)(6.2.2 version)] D
/h15 [(7.2.3\240\240)(6.2.3 type, language)] D
/h16 [(7.2.4\240\240)(6.2.4 project)] D
/h17 [(7.2.5\240\240)(6.2.5 priority)] D
/h18 [(7.2.6\240\240)(6.2.6 summary)] D
/h19 [(7.2.7\240\240)(6.2.7 license)] D
/h20 [(7.2.8\240\240)(6.2.8 topics)] D
/h21 [(7.2.9\240\240)(6.2.9 keywords)] D
/h22 [(7.2.10\240\240)(6.2.10 description, package-description)] D
/h23 [(7.2.11\240\240)(6.2.11 changes)] D
/h24 [(7.2.12\240\240)(6.2.12 url)] D
/h25 [(7.2.13\240\240)(6.2.13 doc-url)] D
/h26 [(7.2.14\240\240)(6.2.14 src-url)] D
/h27 [(7.2.15\240\240)(6.2.15 package-url)] D
/h28 [(7.2.16\240\240)(6.2.16 email)] D
/h29 [(7.2.17\240\240)(6.2.17 package-email)] D
/h30 [(7.2.18\240\240)(6.2.18 build-email)] D
/h31 [(7.2.19\240\240)(6.2.19 build-warning-email)] D
/h32 [(7.2.20\240\240)(6.2.20 build-error-email)] D
/h33 [(7.2.21\240\240)(6.2.21 depends)] D
/h34 [(7.2.22\240\240)(6.2.22 requires)] D
/h35 [(7.2.23\240\240)(6.2.23 tests, examples, benchmarks)] D
/h36 [(7.2.24\240\240)(6.2.24 builds)] D
/h37 [(7.2.25\240\240)(6.2.25 build-{include, exclude})] D
/h38 [(7.2.26\240\240)(6.2.26 build-auxiliary)] D
/h39 [(7.2.27\240\240)(6.2.27 build-bot)] D
/h40 [(7.2.28\240\240)(6.2.28 *-build-config)] D
/h41 [(7.2.29\240\240)(6.2.29 build-file)] D
/h42 [(7.2.30\240\240)(6.2.30 *-{name, version, to-downstream-version})] D
/h43 [(7.3\240\240)(6.3 Package List Manifest for pkg Repositories)] D
/h44 [(7.3.1\240\240)(6.3.1 sha256sum \(list manifest\))] D
/h45 [(7.3.2\240\240)(6.3.2 location \(package manifest\))] D
/h46 [(7.3.3\240\240)(6.3.3 sha256sum \(package manifest\))] D
/h47 [(7.4\240\240)(6.4 Package List Manifest for dir Repositories)] D
/h48 [(7.4.1\240\240)(6.4.1 location)] D
/h49 [(7.4.2\240\240)(6.4.2 fragment)] D
/h50 [(7.5\240\240)(6.5 Repository Manifest)] D
/h51 [(7.5.1\240\240)(6.5.1 location)] D
/h52 [(7.5.2\240\240)(6.5.2 type)] D
/h53 [(7.5.3\240\240)(6.5.3 role)] D
/h54 [(7.5.4\240\240)(6.5.4 trust)] D
/h55 [(7.5.5\240\240)(6.5.5 url)] D
/h56 [(7.5.6\240\240)(6.5.6 email)] D
/h57 [(7.5.7\240\240)(6.5.7 summary)] D
/h58 [(7.5.8\240\240)(6.5.8 description)] D
/h59 [(7.5.9\240\240)(6.5.9 certificate)] D
/h60 [(7.5.10\240\240)(6.5.10 fragment)] D
/h61 [(7.6\240\240)(6.6 Repository List Manifest)] D
/h62 [(7.6.1\240\240)(6.6.1 min-bpkg-version)] D
/h63 [(7.6.2\240\240)(6.6.2 compression)] D
/h64 [(7.7\240\240)(6.7 Signature Manifest for pkg Repositories)] D
/h65 [(7.7.1\240\240)(6.7.1 sha256sum)] D
/h66 [(7.7.2\240\240)(6.7.2 signature)] D
/h67 [(8\240\240)(7 Binary Distribution Package Mapping)] D
/h68 [(8.1\240\240)(7.1 Debian Package Mapping)] D
/h69 [(8.1.1\240\240)(7.1.1 Debian Package Mapping for Consumption)] D
/h70 [(8.1.2\240\240)(7.1.2 Debian Package Mapping for Production)] D
/h71 [(8.2\240\240)(7.2 Fedora Package Mapping)] D
/h72 [(8.2.1\240\240)(7.2.1 Fedora Package Mapping for Consumption)] D
/h73 [(8.2.2\240\240)(7.2.2 Fedora Package Mapping for Production)] D
/Hr [75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96
97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115
116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133
134 135 136 137 138 139 140 141 142 143 144 145 146 147]D
/HV [1 1 1 1 1 1 2 2 2 1 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
3 3 3 3 3 3 3 3 3 2 3 3 3 2 3 3 2 3 3 3 3 3 3 3 3 3 3 2 3 3 2 3 3 1 2 3
3 2 3 3]D
/Cn [0 0 0 0 0 3 0 0 0 7 0 30 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 3 0 0 0 2 0 0 10 0 0 0 0 0 0 0 0 0 0 2 0 0 2 0 0 2 2 0
0 2 0 0]D
Hr length 0 gt{[/PageMode /UseOutlines /DOCVIEW pdfmark}if
/Hn 1 D
0 1 Hr length 1 sub{
 /Bn E D [Cn Bn get dup 0 gt{/Count E HV Bn get Bl ge{neg}if}{pop}ie
 /Dest Hr Bn get dup abs ST cvs cvn E 0 ge{(h)Hn ST cvs join cvx exec
 dup 1 get E Nf{0 get E join}{pop}ie /Hn Hn 1 add D}{()}ie
 /Title E dup length 255 gt{0 255 getinterval}if /OUT pdfmark}for
ZF /FN Fp D Ps 0 FS /WC Wf{( )}{<A1A1>}ie SW pop D
ET RC ZF
/Df f D
/R1 (http://semver.org/) D
/R2 (https://spdx.org/licenses/) D
/R3 (https://unlicense.org/) D
/R4 (https://github.github.com/gfm) D
/R5 (https://spec.commonmark.org/current) D
/R6 (https://ci.cppget.org/?build-configs) D
/Ba f D /BO 0 D Bs
/UR (-) D
/Ti (The build2 Package Manager) D
/Au () D
/Df f D
/ME [(0.17)(Package Manager)(2014-2024 the build2 authors)(package manager)] D
Pt
/BO 0 D TC /Ba f D Bs /AU f D /UR () D RC ZF
 tH WB
ND 1 gt{Ts 3 mul Np 0()0 C()BD(The build2 Package Manager)ES()0 1 TN()EA()BN}if
1 NH le{75(1\240\240)1 C(Preface)WB 2 Sn()75 1 TN()EA()BN}if
1 NH le{76(2\240\240)1 C(1)WB 3 Sn( Package Name)76 1 TN()EA()BN}if
1 NH le{77(3\240\240)1 C(2)WB 4 Sn( Package Version)77 1 TN()EA()BN}if
1 NH le{78(4\240\240)1 C(3)WB 5 Sn( Package Version Constraint)78 1 TN()EA()BN}if
1 NH le{79(5\240\240)1 C(4)WB 6 Sn( Package Build System Skele)HY(ton)YH()79 1 TN()EA()BN}if
1 NH le{80(6\240\240)1 C(5)WB 7 Sn( Depen)HY(dency)YH( Config)HY(u)HY(ra)HY(tion)YH( Nego)HY(ti)HY(a)HY(tion)YH()80 1 TN()EA()BN}if
2 NH le{81(6.1\240\240)2 C(5.1)WB 8 Sn( Prefer X but Accept X or Y)81 1 TN()EA()BN}if
2 NH le{82(6.2\240\240)2 C(5.2)WB 9 Sn( Use If Enabled)82 1 TN()EA()BN}if
2 NH le{83(6.3\240\240)2 C(5.3)WB 10 Sn( Disable If Enabled by Default)83 1 TN()EA()BN}if
1 NH le{84(7\240\240)1 C(6)WB 11 Sn( Mani)HY(fests)YH()84 1 TN()EA()BN}if
2 NH le{85(7.1\240\240)2 C(6.1)WB 12 Sn( Mani)HY(fest)YH( Format)85 1 TN()EA()BN}if
2 NH le{86(7.2\240\240)2 C(6.2)WB 13 Sn( Package Mani)HY(fest)YH()86 1 TN()EA()BN}if
3 NH le{87(7.2.1\240\240)3 C(6.2.1)WB 14 Sn( )SM(name)ES()87 1 TN()EA()BN}if
3 NH le{88(7.2.2\240\240)3 C(6.2.2)WB 15 Sn( )SM(version)ES()88 1 TN()EA()BN}if
3 NH le{89(7.2.3\240\240)3 C(6.2.3)WB 16 Sn( )SM(type)ES(,
  )SM(language)ES()89 1 TN()EA()BN}if
3 NH le{90(7.2.4\240\240)3 C(6.2.4)WB 17 Sn( )SM(project)ES()90 1 TN()EA()BN}if
3 NH le{91(7.2.5\240\240)3 C(6.2.5)WB 18 Sn( )SM(prior)HY(ity)YH()ES()91 1 TN()EA()BN}if
3 NH le{92(7.2.6\240\240)3 C(6.2.6)WB 19 Sn( )SM(summary)ES()92 1 TN()EA()BN}if
3 NH le{93(7.2.7\240\240)3 C(6.2.7)WB 20 Sn( )SM(license)ES()93 1 TN()EA()BN}if
3 NH le{94(7.2.8\240\240)3 C(6.2.8)WB 21 Sn( )SM(topics)ES()94 1 TN()EA()BN}if
3 NH le{95(7.2.9\240\240)3 C(6.2.9)WB 22 Sn( )SM(keywords)ES()95 1 TN()EA()BN}if
3 NH le{96(7.2.10\240\240)3 C(6.2.10)WB 23 Sn( )SM(descrip)HY(tion)YH()ES(,
  )SM(package-descrip)HY(tion)YH()ES()96 1 TN()EA()BN}if
3 NH le{97(7.2.11\240\240)3 C(6.2.11)WB 24 Sn( )SM(changes)ES()97 1 TN()EA()BN}if
3 NH le{98(7.2.12\240\240)3 C(6.2.12)WB 25 Sn( )SM(url)ES()98 1 TN()EA()BN}if
3 NH le{99(7.2.13\240\240)3 C(6.2.13)WB 26 Sn( )SM(doc-url)ES()99 1 TN()EA()BN}if
3 NH le{100(7.2.14\240\240)3 C(6.2.14)WB 27 Sn( )SM(src-url)ES()100 1 TN()EA()BN}if
3 NH le{101(7.2.15\240\240)3 C(6.2.15)WB 28 Sn( )SM(package-url)ES()101 1 TN()EA()BN}if
3 NH le{102(7.2.16\240\240)3 C(6.2.16)WB 29 Sn( )SM(email)ES()102 1 TN()EA()BN}if
3 NH le{103(7.2.17\240\240)3 C(6.2.17)WB 30 Sn(
  )SM(package-email)ES()103 1 TN()EA()BN}if
3 NH le{104(7.2.18\240\240)3 C(6.2.18)WB 31 Sn( )SM(build-email)ES()104 1 TN()EA()BN}if
3 NH le{105(7.2.19\240\240)3 C(6.2.19)WB 32 Sn(
  )SM(build-warning-email)ES()105 1 TN()EA()BN}if
3 NH le{106(7.2.20\240\240)3 C(6.2.20)WB 33 Sn(
  )SM(build-error-email)ES()106 1 TN()EA()BN}if
3 NH le{107(7.2.21\240\240)3 C(6.2.21)WB 34 Sn( )SM(depends)ES()107 1 TN()EA()BN}if
3 NH le{108(7.2.22\240\240)3 C(6.2.22)WB 35 Sn( )SM(requires)ES()108 1 TN()EA()BN}if
3 NH le{109(7.2.23\240\240)3 C(6.2.23)WB 36 Sn(
  )SM(tests)ES(, )SM(exam)HY(ples)YH()ES(, )SM(bench)HY(marks)YH()ES()109 1 TN()EA()BN}if
3 NH le{110(7.2.24\240\240)3 C(6.2.24)WB 37 Sn( )SM(builds)ES()110 1 TN()EA()BN}if
3 NH le{111(7.2.25\240\240)3 C(6.2.25)WB 38 Sn( )SM(build-{include,
  exclude})ES()111 1 TN()EA()BN}if
3 NH le{112(7.2.26\240\240)3 C(6.2.26)WB 39 Sn(
  )SM(build-auxil)HY(iary)YH()ES()112 1 TN()EA()BN}if
3 NH le{113(7.2.27\240\240)3 C(6.2.27)WB 40 Sn( )SM(build-bot)ES()113 1 TN()EA()BN}if
3 NH le{114(7.2.28\240\240)3 C(6.2.28)WB 41 Sn(
  )SM(*-build-config)ES()114 1 TN()EA()BN}if
3 NH le{115(7.2.29\240\240)3 C(6.2.29)WB 42 Sn( )SM(build-file)ES()115 1 TN()EA()BN}if
3 NH le{116(7.2.30\240\240)3 C(6.2.30)WB 43 Sn( )SM(*-{name, version,
  to-down)HY(stream)YH(-version})ES()116 1 TN()EA()BN}if
2 NH le{117(7.3\240\240)2 C(6.3)WB 44 Sn( Package List Mani)HY(fest)YH( for
  )SM()BD(pkg)ES()ES( Repos)HY(i)HY(to)HY(ries)YH()117 1 TN()EA()BN}if
3 NH le{118(7.3.1\240\240)3 C(6.3.1)WB 45 Sn( )SM(sha256sum)ES(
  \201list mani)HY(fest)YH(\202)118 1 TN()EA()BN}if
3 NH le{119(7.3.2\240\240)3 C(6.3.2)WB 46 Sn(
  )SM(loca)HY(tion)YH()ES( \201package mani)HY(fest)YH(\202)119 1 TN()EA()BN}if
3 NH le{120(7.3.3\240\240)3 C(6.3.3)WB 47 Sn(
  )SM(sha256sum)ES( \201package mani)HY(fest)YH(\202)120 1 TN()EA()BN}if
2 NH le{121(7.4\240\240)2 C(6.4)WB 48 Sn( Package List Mani)HY(fest)YH( for
  )SM()BD(dir)ES()ES( Repos)HY(i)HY(to)HY(ries)YH()121 1 TN()EA()BN}if
3 NH le{122(7.4.1\240\240)3 C(6.4.1)WB 49 Sn( )SM(loca)HY(tion)YH()ES()122 1 TN()EA()BN}if
3 NH le{123(7.4.2\240\240)3 C(6.4.2)WB 50 Sn( )SM(frag)HY(ment)YH()ES()123 1 TN()EA()BN}if
2 NH le{124(7.5\240\240)2 C(6.5)WB 51 Sn( Repos)HY(i)HY(tory)YH( Mani)HY(fest)YH()124 1 TN()EA()BN}if
3 NH le{125(7.5.1\240\240)3 C(6.5.1)WB 52 Sn( )SM(loca)HY(tion)YH()ES()125 1 TN()EA()BN}if
3 NH le{126(7.5.2\240\240)3 C(6.5.2)WB 53 Sn( )SM(type)ES()126 1 TN()EA()BN}if
3 NH le{127(7.5.3\240\240)3 C(6.5.3)WB 54 Sn( )SM(role)ES()127 1 TN()EA()BN}if
3 NH le{128(7.5.4\240\240)3 C(6.5.4)WB 55 Sn( )SM(trust)ES()128 1 TN()EA()BN}if
3 NH le{129(7.5.5\240\240)3 C(6.5.5)WB 56 Sn( )SM(url)ES()129 1 TN()EA()BN}if
3 NH le{130(7.5.6\240\240)3 C(6.5.6)WB 57 Sn( )SM(email)ES()130 1 TN()EA()BN}if
3 NH le{131(7.5.7\240\240)3 C(6.5.7)WB 58 Sn( )SM(summary)ES()131 1 TN()EA()BN}if
3 NH le{132(7.5.8\240\240)3 C(6.5.8)WB 59 Sn( )SM(descrip)HY(tion)YH()ES()132 1 TN()EA()BN}if
3 NH le{133(7.5.9\240\240)3 C(6.5.9)WB 60 Sn( )SM(certifi)HY(cate)YH()ES()133 1 TN()EA()BN}if
3 NH le{134(7.5.10\240\240)3 C(6.5.10)WB 61 Sn( )SM(frag)HY(ment)YH()ES()134 1 TN()EA()BN}if
2 NH le{135(7.6\240\240)2 C(6.6)WB 62 Sn( Repos)HY(i)HY(tory)YH( List Mani)HY(fest)YH()135 1 TN()EA()BN}if
3 NH le{136(7.6.1\240\240)3 C(6.6.1)WB 63 Sn(
  )SM(min-bpkg-version)ES()136 1 TN()EA()BN}if
3 NH le{137(7.6.2\240\240)3 C(6.6.2)WB 64 Sn(
  )SM(compres)HY(sion)YH()ES()137 1 TN()EA()BN}if
2 NH le{138(7.7\240\240)2 C(6.7)WB 65 Sn( Signa)HY(ture)YH( Mani)HY(fest)YH( for
  )SM()BD(pkg)ES()ES( Repos)HY(i)HY(to)HY(ries)YH()138 1 TN()EA()BN}if
3 NH le{139(7.7.1\240\240)3 C(6.7.1)WB 66 Sn( )SM(sha256sum)ES()139 1 TN()EA()BN}if
3 NH le{140(7.7.2\240\240)3 C(6.7.2)WB 67 Sn( )SM(signa)HY(ture)YH()ES()140 1 TN()EA()BN}if
1 NH le{141(8\240\240)1 C(7)WB 68 Sn( Binary Distri)HY(bu)HY(tion)YH( Package Mapping)141 1 TN()EA()BN}if
2 NH le{142(8.1\240\240)2 C(7.1)WB 69 Sn( Debian Package Mapping)142 1 TN()EA()BN}if
3 NH le{143(8.1.1\240\240)3 C(7.1.1)WB 70 Sn( Debian Package Mapping for
  Consump)HY(tion)YH()143 1 TN()EA()BN}if
3 NH le{144(8.1.2\240\240)3 C(7.1.2)WB 71 Sn( Debian Package Mapping for
  Produc)HY(tion)YH()144 1 TN()EA()BN}if
2 NH le{145(8.2\240\240)2 C(7.2)WB 72 Sn( Fedora Package Mapping)145 1 TN()EA()BN}if
3 NH le{146(8.2.1\240\240)3 C(7.2.1)WB 73 Sn( Fedora Package Mapping for
  Consump)HY(tion)YH()146 1 TN()EA()BN}if
3 NH le{147(8.2.2\240\240)3 C(7.2.2)WB 74 Sn( Fedora Package Mapping for
  Produc)HY(tion)YH()147 1 TN()EA()BN}if
/OU t D /Cb Db D NP Ep ET 
/Cb Db D /Ct [16#00 16#00 16#00] D /Cl [16#00 16#00 16#00] D /CL -1 D Ct Sc

/Ba f D /BO 0 D Bs
/UR (-) D
/Ti (The build2 Package Manager) D
/Au () D
/Df f D
/ME [(0.17)(Package Manager)(2014-2024 the build2 authors)(package manager)] D

NP RC ZF
()2 Sl()WB 0 Sn(
)BR()WB 1 Sn(
   
  )0 1 0 H(Preface)WB 75 Sn()WB 2 Sn()EH(

  )0 P(This docu)HY(ment)YH( describes )SM(bpkg)ES(, the )SM(build2)ES(
  package depen)HY(dency)YH( manager. For the package manager command line inter)HY(face)YH(
  refer to the )0 2 A()SM()BD(bpkg\2011\202)ES()ES()EA( man
  pages.)EP(

  )0 1 1 H(1)WB 76 Sn()WB 3 Sn( Package Name)EH(

  )0 P(The )SM(bpkg)ES( package name can contain ASCII alpha)HY(betic)YH(
  char)HY(ac)HY(ters)YH( \201)SM([a-zA-Z])ES(\202, digits \201)SM([0-9])ES(\202, under)HY(scores)YH(
  \201)SM(_)ES(\202, plus/minus \201)SM(+-)ES(\202, and dots/periods
  \201)SM()SM(.)ES()ES(\202. The name must be at least two char)HY(ac)HY(ters)YH( long
  with the follow)HY(ing)YH( addi)HY(tional)YH( restric)HY(tions)YH(:)EP(

  )4 OL(  )-1 LI(It must start with an alpha)HY(betic)YH( char)HY(ac)HY(ter)YH(.

  )-1 LI(It must end with an alpha)HY(betic)YH(, digit, or plus char)HY(ac)HY(ter)YH(.

  )-1 LI(It must not be any of the follow)HY(ing)YH( illegal names:

  ) 4 44 PR(build
con prn aux nul
com1 com2 com3 com4 com5 com6 com7 com8 com9
lpt1 lpt2 lpt3 lpt4 lpt5 lpt6 lpt7 lpt8 lpt9)RP(
  )LO(

  )0 P(The use of the plus \201)SM(+)ES(\202 char)HY(ac)HY(ter)YH( in package names is
  discour)HY(aged)YH(. Pluses are used in URL encod)HY(ing)YH( which makes
  spec)HY(i)HY(fy)HY(ing)YH( pack)HY(ages)YH( that contain pluses in URLs cumber)HY(some)YH(.)EP(

  )0 P(The use of the dot \201)SM(.)ES(\202 char)HY(ac)HY(ter)YH( in package names is
  discour)HY(aged)YH( except for distin)HY(guish)HY(ing)YH( the imple)HY(men)HY(ta)HY(tions)YH( of the same
  func)HY(tion)HY(al)HY(ity)YH( for differ)HY(ent)YH( languages. For example,
  )SM(libfoo)ES( and )SM(libfoo.bash)ES(.)EP(

  )0 P(Package name compar)HY(i)HY(son)YH( is case-insen)HY(si)HY(tive)YH( but the orig)HY(i)HY(nal)YH( case must be
  preserved for display, in file names, etc. The reason for
  case-insen)HY(si)HY(tive)YH( compar)HY(i)HY(son)YH( is Windows file names.)EP(

  )0 P(If the package is a library then it is strongly recom)HY(mended)YH( that you
  start its package name with the )SM(lib)ES( prefix, for example,
  )SM(libfoo)ES(. Some package repos)HY(i)HY(to)HY(ries)YH( may make this a require)HY(ment)YH(
  as part of their submis)HY(sion)YH( policy.)EP(

  )0 P(If a package \201normally a library\202 supports usage of multi)HY(ple)YH( major
  versions in the same project, then it is recom)HY(mended)YH( to append the major
  version number to the package name start)HY(ing)YH( from version )SM(2.0.0)ES(,
  for example, )SM(libfoo)ES( \201before )SM(2.0.0)ES(\202,
  )SM(libfoo2)ES( \201)SM(2.Y.Z)ES(\202, )SM(libfoo3)ES(
  \201)SM(3.Y.Z)ES(\202, etc.)EP(

  )0 1 2 H(2)WB 77 Sn()WB 4 Sn( Package Version)EH(

  )0 P(The )SM(bpkg)ES( package version format tries to balance the need of
  accom)HY(mo)HY(dat)HY(ing)YH( exist)HY(ing)YH( soft)HY(ware)YH( versions on one hand and provid)HY(ing)YH( a
  reason)HY(ably)YH( straight)HY(for)HY(ward)YH( compar)HY(i)HY(son)YH( seman)HY(tics)YH( on another. For some
  back)HY(ground)YH( on this problem see )SM()BD(deb-version\2011\202)ES()ES( and the )R1 2 A(Seman)HY(tic)YH( Version)HY(ing)YH()EA( spec)HY(i)HY(fi)HY(ca)HY(tion)YH(.)EP(

  )0 P(Note also that if you are start)HY(ing)YH( a new project that will use the
  )SM(build2)ES( toolchain, then it is strongly recom)HY(mended)YH( that you use
  the )I(stan)HY(dard)YH( version)HY(ing)YH()ES( scheme which is a more strictly defined
  subset of seman)HY(tic)YH( version)HY(ing)YH( that allows automa)HY(tion)YH( of many version
  manage)HY(ment)YH( tasks. See )0 2 A()SM(version)ES(
  Module)EA( for details.)EP(

  )0 P(The )SM(bpkg)ES( package version has the follow)HY(ing)YH( form:)EP(

  ) 1 59 PR([+<epoch>-]<upstream>[-<prerel>][+<revision>][#<iteration>])RP(

  )0 P(The )I(epoch)ES( part should be an integer. It can be used to change to a
  new version)HY(ing)YH( scheme that would be incom)HY(pat)HY(i)HY(ble)YH( with the old one. If not
  spec)HY(i)HY(fied)YH(, then )I(epoch)ES( defaults to )SM(1)ES( except for a stub
  version \201see below\202 in which case it defaults to )SM(0)ES(. The
  explicit zero )I(epoch)ES( can be used if the current version)HY(ing)YH( scheme \201for
  example, date-based\202 is known to be tempo)HY(rary)YH(.)EP(

  )0 P(The )I(upstream)ES( part is the upstream soft)HY(ware)YH( version that this
  package is based on. It can only contain alpha-numeric char)HY(ac)HY(ters)YH( and
  )SM(.)ES(. The )SM(.)ES( char)HY(ac)HY(ter)YH( is used to sepa)HY(rate)YH( the version
  into )I(compo)HY(nents)YH()ES(.)EP(

  )0 P(The )I(prerel)ES( part is the upstream soft)HY(ware)YH( pre-release marker, for
  example, alpha, beta, candi)HY(date)YH(, etc. Its format is the same as for
  )I(upstream)ES( except for two special values: the absent )I(prerel)ES( \201for
  example, )SM(1.2.3)ES(\202 signi)HY(fies)YH( the maximum or final release while
  the empty )I(prerel)ES( \201for example, )SM(1.2.3-)ES(\202 signi)HY(fies)YH( the
  minimum or earli)HY(est)YH( possi)HY(ble)YH( release. The minimum release
  is intended to be used for version constraints \201for example, )SM(libfoo
  < 1.2.3-)ES(\202 rather than actual releases.)EP(

  )0 P(The )I(revi)HY(sion)YH()ES( part should be an integer. It is used to version
  package releases that are based on the same upstream versions. If not
  spec)HY(i)HY(fied)YH(, then )I(revi)HY(sion)YH()ES( defaults to )SM(0)ES(.)EP(

  )0 P(The )I(iter)HY(a)HY(tion)YH()ES( part is an integer. It is used inter)HY(nally)YH( by
  )SM(bpkg)ES( to auto)HY(mat)HY(i)HY(cally)YH( version modi)HY(fi)HY(ca)HY(tions)YH( to the pack)HY(ag)HY(ing)YH(
  infor)HY(ma)HY(tion)YH( \201specif)HY(i)HY(cally)YH(, to package mani)HY(fest)YH( and lock)HY(file)YH(\202 in )I(exter)HY(nal)YH(
  pack)HY(ages)YH()ES( that have the same upstream version and revi)HY(sion)YH(. As a result,
  the )I(iter)HY(a)HY(tion)YH()ES( cannot not be spec)HY(i)HY(fied)YH( by the user and is only shown
  in the )SM(bpkg)ES( output \201for example, by )SM(pkg-status)ES(
  command\202 in order to distin)HY(guish)YH( between package iter)HY(a)HY(tions)YH( with other)HY(wise)YH(
  iden)HY(ti)HY(cal)YH( versions. Note also that )I(iter)HY(a)HY(tion)YH()ES( is rela)HY(tive)YH( to the
  )SM(bpkg)ES( config)HY(u)HY(ra)HY(tion)YH(. Or, in other words, it is an iter)HY(a)HY(tion)YH(
  number of a package as observed by a specific config)HY(u)HY(ra)HY(tion)YH(. As a result,
  two config)HY(u)HY(ra)HY(tions)YH( can "see" the same package state as two differ)HY(ent)YH(
  iter)HY(a)HY(tions)YH(.)EP(

  )BR(
  )0 P(Package iter)HY(a)HY(tions)YH( are used to support package devel)HY(op)HY(ment)YH( during which
  requir)HY(ing)YH( the devel)HY(oper)YH( to manu)HY(ally)YH( incre)HY(ment)YH( the version or revi)HY(sion)YH( after
  each modi)HY(fi)HY(ca)HY(tion)YH( would be imprac)HY(ti)HY(cal)YH(. This mech)HY(a)HY(nism)YH( is similar to the
  auto)HY(matic)YH( commit version)HY(ing)YH( provided by the )I(stan)HY(dard)YH( version)ES( except
  that it is limited to the pack)HY(ag)HY(ing)YH( infor)HY(ma)HY(tion)YH( but works for uncom)HY(mit)HY(ted)YH(
  changes.)EP(
  )BR(

  )0 P(Version )SM(+0-0-)ES( \201least possi)HY(ble)YH( version\202 is reserved and
  spec)HY(i)HY(fy)HY(ing)YH( it explic)HY(itly)YH( is illegal. Explic)HY(itly)YH(
  spec)HY(i)HY(fy)HY(ing)YH( this version does not make much sense since )SM(libfoo <
  +0-0-)ES( is always false and )SM(libfoo > +0-0-)ES( is always true.
  In the imple)HY(men)HY(ta)HY(tion)YH( this value is used as a special empty
  version.)EP(

  )0 P(Version )SM(0)ES( \201with a poten)HY(tial)YH( revi)HY(sion)YH(, for example,
  )SM(0+1)ES(, )SM(0+2)ES(\202 is used to signify a )I(stub
  package)ES(. A stub is a package that does not contain source code and can
  only be "obtained" from other sources, for example, a system package
  manager. Note that at some point a stub may be converted into a full-fledged
  package at which point it will be assigned a "real" version. It is assumed
  that this version will always be greater than the stub version.)EP(

  )0 P(When display)HY(ing)YH( the package version or when using the version to derive
  the file name, the default )I(epoch)ES( value as well as zero
  )I(revi)HY(sion)YH()ES( and )I(iter)HY(a)HY(tion)YH()ES( values are omitted \201even if they were
  explic)HY(itly)YH( spec)HY(i)HY(fied)YH(, for instance, in the package mani)HY(fest)YH(\202. For example,
  )SM(+1-1.2.3+0)ES( will be used as )SM(libfoo-1.2.3)ES(.)EP(

  )BR(
  )0 P(This version)HY(ing)YH( scheme and the choice of delim)HY(iter)YH( char)HY(ac)HY(ters)YH(
  \201)SM(.-+)ES(\202 is meant to align with seman)HY(tic)YH( version)HY(ing)YH(.)EP(
  )BR(

  )0 P(Some exam)HY(ples)YH( of versions:)EP(

  ) 15 18 PR(0+1
+0-20180112
1.2.3
1.2.3-a1
1.2.3-b2
1.2.3-rc1
1.2.3-alpha1
1.2.3-alpha.1
1.2.3-beta.1
1.2.3+1
+2-1.2.3
+2-1.2.3-alpha.1+3
+2.2.3#1
1.2.3+1#1
+2-1.2.3+1#2)RP(

  )0 P(The version sorting order is )I(epoch)ES(, )I(upstream)ES(,
  )I(prerel)ES(, )I(revi)HY(sion)YH()ES(, and finally, )I(iter)HY(a)HY(tion)YH()ES(. The
  )I(upstream)ES( and )I(prerel)ES( parts are compared from left to right, one
  compo)HY(nent)YH( at a time, as described next.)EP(

  )0 P(To compare two compo)HY(nents)YH(, first the compo)HY(nent)YH( types are deter)HY(mined)YH(.  A
  compo)HY(nent)YH( that only consists of digits is an integer. Other)HY(wise)YH(, it is a
  string. If both compo)HY(nents)YH( are inte)HY(gers)YH(, then they are compared as inte)HY(gers)YH(.
  Other)HY(wise)YH(, they are compared lexi)HY(co)HY(graph)HY(i)HY(cally)YH( and case-insen)HY(si)HY(tively)YH(. The reason for case-insen)HY(si)HY(tive)YH( compar)HY(i)HY(son)YH( is Windows file
  names.)EP(

  )0 P(A non-exis)HY(tent)YH( compo)HY(nent)YH( is consid)HY(ered)YH( 0 if the other compo)HY(nent)YH( is an
  integer and an empty string if the other compo)HY(nent)YH( is a string.  For
  example, in )SM(1.2)ES( vs )SM(1.2.0)ES(, the third compo)HY(nent)YH( in
  the first version is 0 and the two versions are there)HY(fore)YH( equal. As a
  special excep)HY(tion)YH( to this rule, an absent )I(prerel)ES( part is always
  greater than any non-absent part. And thus making the
  final release always older than any pre-release.)EP(

  )0 P(This algo)HY(rithm)YH( gives correct results for most commonly-used version)HY(ing)YH(
  schemes, for example:)EP(

  ) 4 23 PR(1.2.3 < 12.2
1.alpha < 1.beta
20151128 < 20151228
2015.11.28 < 2015.12.28)RP(

  )0 P(One notable version)HY(ing)YH( scheme where this approach gives an incor)HY(rect)YH(
  result is hex numbers \201consider )SM(A)ES( vs )SM(1A)ES(\202. The
  simplest work around is to convert such numbers to decimal. Alter)HY(na)HY(tively)YH(,
  one can fix the width of the hex number and pad all the values with leading
  zeros, for example: )SM(00A)ES( vs )SM(01A)ES(.)EP(

  )0 P(It is also possi)HY(ble)YH( to convert the )I(upstream)ES( and )I(prerel)ES(
  parts into a )I(canon)HY(i)HY(cal)YH( repre)HY(sen)HY(ta)HY(tion)YH()ES( that will produce the correct
  compar)HY(i)HY(son)YH( result when always compared lexi)HY(co)HY(graph)HY(i)HY(cally)YH( and as a whole.
  This can be useful, for example, when storing versions in
  the database which would other)HY(wise)YH( require a custom colla)HY(tion)YH( imple)HY(men)HY(ta)HY(tion)YH(
  to obtain the correct sort order.)EP(

  )0 P(To convert one of these parts to its canon)HY(i)HY(cal)YH( repre)HY(sen)HY(ta)HY(tion)YH(, all its
  string compo)HY(nents)YH( are converted to the lower case while all its integer
  compo)HY(nents)YH( are padded with leading zeros to the fixed length of
  )SM(16)ES( char)HY(ac)HY(ters)YH(, with all trail)HY(ing)YH( zero-only compo)HY(nents)YH( removed.
  Note that this places an imple)HY(men)HY(ta)HY(tion)YH( limit on the length of integer
  compo)HY(nents)YH( which should be checked by the imple)HY(men)HY(ta)HY(tion)YH( when convert)HY(ing)YH( to
  the canon)HY(i)HY(cal)YH( repre)HY(sen)HY(ta)HY(tion)YH(. The )SM(16)ES(
  char)HY(ac)HY(ters)YH( limit was chosen to still be able to repre)HY(sent)YH( \201with some spare\202
  compo)HY(nents)YH( in the )I(YYYYM)HY(MD)HY(Dhh)HY(mmss)YH()ES( form while not \201visu)HY(ally)YH(\202 bloat)HY(ing)YH(
  the database too much. As a special case, the absent )I(prerel)ES(
  part is repre)HY(sented)YH( as )SM(~)ES(. Since the ASCII
  code for )SM(~)ES( is greater than any other char)HY(ac)HY(ter)YH( that could
  appear in )I(prerel)ES(, such a string will always be greater than any other
  repre)HY(sen)HY(ta)HY(tion)YH(. The empty )I(prerel)ES( part is repre)HY(sented)YH( as an
  empty string.)EP(

  )0 P(Note that because it is not possi)HY(ble)YH( to perform a reverse conver)HY(sion)YH(
  without the possi)HY(bil)HY(ity)YH( of loss \201consider )SM(01.AA.BB)ES(\202, the
  orig)HY(i)HY(nal)YH( parts may also have to be stored, for example, for display, to
  derive package archive names, etc.)EP(

  )BR(
  )0 P(In quite a few contexts the imple)HY(men)HY(ta)HY(tion)YH( needs to ignore the
  )I(revi)HY(sion)YH()ES( and/or )I(iter)HY(a)HY(tion)YH()ES( parts. For example, this is needed
  to imple)HY(ment)YH( the seman)HY(tics)YH( of newer revi)HY(sions)YH(/iter)HY(a)HY(tions)YH( of pack)HY(ages)YH(
  replac)HY(ing)YH( their old ones since we do not keep multi)HY(ple)YH( revi)HY(sions)YH(/iter)HY(a)HY(tions)YH(
  of the same upstream version in the same repos)HY(i)HY(tory)YH(. As a result, in the
  package object model, we have a version key as just {)I(epoch)ES(,
  )I(upstream)ES(, )I(prerel)ES(} but also store the package revi)HY(sion)YH( and
  iter)HY(a)HY(tion)YH( so that it can be shown to the user, etc.)EP(
  )BR(

  )0 1 3 H(3)WB 78 Sn()WB 5 Sn( Package Version Constraint)EH(

  )0 P(The )SM(bpkg)ES( package version constraint may follow the package
  name in certain contexts, such as the mani)HY(fest)YH( values and )SM(bpkg)ES(
  command line, to restrict the allowed package version set. It can be
  spec)HY(i)HY(fied)YH( using compar)HY(i)HY(son)YH( oper)HY(a)HY(tors)YH(, short)HY(cut)YH( \201to range\202 oper)HY(a)HY(tors)YH(, or
  ranges and has the follow)HY(ing)YH( form:)EP(

  ) 4 66 PR(<version-constraint> = <comparison> | <shortcut> | <range>
<comparison>         = \201'==' | '>' | '<' | '>=' | '<='\202 <version>
<shortcut>           = \201'^' | '~'\202 <version>
<range>              = \201'\201' | '['\202 <version> <version> \201'\202' | ']'\202)RP(

  )0 P(The short)HY(cut)YH( oper)HY(a)HY(tors)YH( can only be used with )0 2 A(stan)HY(dard)YH(
  versions)EA( \201a seman)HY(tic)YH( version without the pre-release part is a stan)HY(dard)YH(
  version\202. They are equiv)HY(a)HY(lent)YH( to the follow)HY(ing)YH( ranges. The )SM(X.Y.Z-)ES( version signi)HY(fies)YH( the earli)HY(est)YH(
  pre-release in the )SM(X.Y.Z)ES( series; see )0 4 1 A(Package Version)4 0 TN TL()Ec /AF f D( for details.)EP(

  ) 4 36 PR(~X.Y.Z  [X.Y.Z  X.Y+1.0-\202

^X.Y.Z  [X.Y.Z  X+1.0.0-\202  if X >  0
^0.Y.Z  [0.Y.Z  0.Y+1.0-\202  if X == 0)RP(

  )0 P(That is, the tilde \201)SM(~)ES(\202 constraint allows upgrades to any
  further patch version while the caret \201)SM(^)ES(\202 constraint \235
  also to any further minor version.)EP(

  )BR(
  )0 P(Zero major version compo)HY(nent)YH( is custom)HY(ar)HY(ily)YH( used during early devel)HY(op)HY(ment)YH(
  where the minor version effec)HY(tively)YH( becomes major. As a result, the tilde
  constraint has special seman)HY(tics)YH( for this case.)EP(
  )BR(

  )0 P(Note that the short)HY(uct)YH( oper)HY(a)HY(tors)YH( can only be used with the complete,
  three-compo)HY(nent)YH( versions \201)SM(X.Y.Z)ES( with the optional pre-release
  part per the stan)HY(dard)YH( version\202. Specif)HY(i)HY(cally)YH(, there is no support for
  special )SM(^X.Y)ES( or )SM(~X)ES( seman)HY(tics)YH( offered by some
  package manager \235 if desired, such func)HY(tion)HY(al)HY(ity)YH( can be easily
  achieved with ranges. Also, the )SM(0.0.Z)ES( version is not consid)HY(ered)YH(
  special except as having zero major compo)HY(nent)YH( for the tilde seman)HY(tics)YH(
  discussed above.)EP(

  )0 P(Note also that pre-releases do not require any special consid)HY(er)HY(a)HY(tions)YH(
  when used with the short)HY(cut)YH( oper)HY(a)HY(tors)YH(. For example, if package
  )SM(libfoo)ES( is usable start)HY(ing)YH( with the second beta of the
  )SM(2.0.0)ES( release, then our constraint could be expressed as:)EP(

  ) 1 17 PR(libfoo ^2.0.0-b.2)RP(

  )BR(
  )0 P(Inter)HY(nally)YH(, short)HY(cuts)YH( and compar)HY(isons)YH( can be repre)HY(sented)YH( as ranges \201that
  is, )SM([v, v])ES( for )SM(==)ES(, )SM(\201v, inf\202)ES( for
  )SM(>)ES(, etc\202. However, for display and seri)HY(al)HY(iza)HY(tion)YH( such
  repre)HY(sen)HY(ta)HY(tions)YH( should be converted back to simple oper)HY(a)HY(tors)YH(. While it is
  possi)HY(ble)YH( that the orig)HY(i)HY(nal)YH( mani)HY(fest)YH( spec)HY(i)HY(fied)YH( equal)HY(ity)YH( or short)HY(ucts)YH( as full
  ranges, it is accept)HY(able)YH( to display/seri)HY(al)HY(ize)YH( them as simpler oper)HY(a)HY(tors)YH(.)EP(
  )BR(

  )0 P(Instead of a concrete value, the version in the constraint can be
  spec)HY(i)HY(fied)YH( in terms of the depen)HY(dent)YH( package's version \201that is, the version
  of the package placing the constraint\202 using the special )SM($)ES(
  value. For example:)EP(

  ) 1 11 PR(libfoo == $)RP(

  )0 P(A constraint that contains )SM($)ES( is called incom)HY(plete)YH(. This
  mech)HY(a)HY(nism)YH( is primar)HY(ily)YH( useful when devel)HY(op)HY(ing)YH( related pack)HY(ages)YH( that should
  track each other's versions exactly or closely.)EP(

  )0 P(In compar)HY(i)HY(son)YH( oper)HY(a)HY(tors)YH( and ranges the )SM($)ES( value is replaced
  with the depen)HY(dent)YH( version ignor)HY(ing)YH( the revi)HY(sion)YH(. For short)HY(cut)YH( oper)HY(a)HY(tors)YH(,
  the depen)HY(dent)YH( version must be a stan)HY(dard)YH( version and the follow)HY(ing)YH(
  addi)HY(tional)YH( process)HY(ing)YH( is applied depend)HY(ing)YH( on whether the version is a
  release, final pre-release, or a snap)HY(shot)YH( pre-release.)EP(

  )4 OL(  )-1 LI(For a release we set the min version patch to zero. For )SM(^)ES(
  we also set the minor version to zero, unless the major version is zero
  \201reduces to )SM(~)ES(\202. The max version is set accord)HY(ing)YH( to the
  stan)HY(dard)YH( short)HY(cut)YH( logic. For example, )SM(~$)ES( is completed as
  follows:

  ) 3 23 PR(1.2.0 -> [1.2.0 1.3.0-\202
1.2.1 -> [1.2.0 1.3.0-\202
1.2.2 -> [1.2.0 1.3.0-\202)RP(

  )0 P(And )SM(^$)ES( is completed as follows:)EP(

  ) 2 23 PR(1.0.0 -> [1.0.0 2.0.0-\202
1.1.1 -> [1.0.0 2.0.0-\202)RP(

  )-1 LI(For a final pre-release the key obser)HY(va)HY(tion)YH( is that if the patch
  compo)HY(nent)YH( for )SM(~)ES( or minor and patch compo)HY(nents)YH( for
  )SM(^)ES( are not zero, then that means there has been a compat)HY(i)HY(ble)YH(
  release and we treat this case the same as release, ignor)HY(ing)YH( the pre-release
  part. If, however, it/they are zero, then that means there may yet be no
  final release and we have to start from the first alpha. For example, for
  the )SM(~$)ES( case:

  ) 4 31 PR(1.2.0-a.1 -> [1.2.0-a.1 1.3.0-\202
1.2.0-b.2 -> [1.2.0-a.1 1.3.0-\202
1.2.1-a.1 -> [1.2.0     1.3.0-\202
1.2.2-b.2 -> [1.2.0     1.3.0-\202)RP(

  )0 P(And for the )SM(^$)ES( case:)EP(

  ) 4 31 PR(1.0.0-a.1 -> [1.0.0-a.1 2.0.0-\202
1.0.0-b.2 -> [1.0.0-a.1 2.0.0-\202
1.0.1-a.1 -> [1.0.0     2.0.0-\202
1.1.0-b.2 -> [1.0.0     2.0.0-\202)RP(

  )-1 LI(For a snap)HY(shot)YH( pre-release we distin)HY(guish)YH( two cases: a patch snap)HY(shot)YH(
  \201the patch compo)HY(nent)YH( is not zero\202 and a major/minor snap)HY(shot)YH( \201the patch
  compo)HY(nent)YH( is zero\202. For the patch snap)HY(shot)YH( case we assume that it is \201most
  likely\202 devel)HY(oped)YH( inde)HY(pen)HY(dently)YH( of the depen)HY(dency)YH( and we treat it the same
  as the final pre-release case. For example, if the depen)HY(dent)YH( version is
  )SM(1.2.1-a.0.nnn)ES(, the depen)HY(dency)YH( could be )SM(1.2.0)ES( or
  )SM(1.2.2)ES( \201or some)HY(where)YH( in-between\202.

  )0 P(For the major/minor snap)HY(shot)YH( we assume that all the pack)HY(ages)YH( are
  devel)HY(oped)YH( in the lock)HY(step)YH( and have the same )SM(X.Y.0)ES( version. In
  this case we make the range start from the earli)HY(est)YH( possi)HY(ble)YH( version in this
  "snap)HY(shot)YH( series" and end before the final pre-release. For example \201in this
  case )SM(~)ES( and )SM(^)ES( are treated the same\202:)EP(

  ) 2 40 PR(1.2.0-a.0.nnn -> [1.2.0-a.0.1 1.2.0-a.1\202
2.0.0-b.2.nnn -> [2.0.0-b.2.1 2.0.0-b.3\202)RP(
  )LO(

  )0 1 4 H(4)WB 79 Sn()WB 6 Sn( Package Build System Skele)HY(ton)YH()EH(

  )0 P(There are situ)HY(a)HY(tions)YH( where )SM(bpkg)ES( may need to eval)HY(u)HY(ate)YH(
  )SM(build)HY(file)YH()ES( expres)HY(sions)YH( and frag)HY(ments)YH( before commit)HY(ting)YH( to a
  partic)HY(u)HY(lar)YH( version of the package and there)HY(fore)YH( before actu)HY(ally)YH( unpack)HY(ing)YH(
  anything. For example, )SM(bpkg)ES( may need to eval)HY(u)HY(ate)YH( a condi)HY(tion)YH( in
  the condi)HY(tional)YH( depen)HY(dency)YH( or it may need to nego)HY(ti)HY(ate)YH( a config)HY(u)HY(ra)HY(tion)YH( among
  several depen)HY(dents)YH( of a package which requires it to know this package's
  config)HY(u)HY(ra)HY(tion)YH( vari)HY(able)YH( types and default values.)EP(

  )0 P(To solve this chicken and egg kind of problem, )SM(bpkg)ES( includes
  a minimal subset of the build system files along with the package's stan)HY(dard)YH(
  meta)HY(data)YH( \201name, version, etc\202 into the repos)HY(i)HY(tory)YH( meta)HY(data)YH( \201)0 44 1 A()SM(pack)HY(ages)YH(.mani)HY(fest)YH()ES()44 0 TN TL()Ec /AF f D(\202. This
  subset is called the package build system skele)HY(ton)YH(, or just package skele)HY(ton)YH(
  for short, and includes the )SM(build/boot)HY(strap)YH(.build)ES( and
  )SM(build/root.build)ES( files \201or their alter)HY(na)HY(tive)YH( naming scheme
  vari)HY(ants)YH(\202 as well as any files that may be sourced by
  )SM(root.build)ES(.)EP(

  )0 P(The inclu)HY(sion)YH( of )SM(build/boot)HY(strap)YH(.build)ES( and
  )SM(build/root.build)ES( \201if present\202 as well as any
  )SM(build/config/*.build)ES( \201or their alter)HY(na)HY(tive)YH( naming scheme
  vari)HY(ants)YH(\202 is auto)HY(matic)YH(. However, if )SM(root.build)ES( sources any
  files other than )SM(build/config/*.build)ES(, then they must be
  spec)HY(i)HY(fied)YH( explic)HY(itly)YH( in the package mani)HY(fest)YH( using the )0 42 1 A()SM(build-file)ES()42 0 TN TL()Ec /AF f D( value.)EP(

  )0 P(Inside these build)HY(files)YH( the skele)HY(ton)YH( load can be distin)HY(guished)YH( from
  normal load by exam)HY(in)HY(ing)YH( the )SM(build.mode)ES( vari)HY(able)YH(, which is set
  to )SM(skele)HY(ton)YH()ES( during the skele)HY(ton)YH( load. In partic)HY(u)HY(lar)YH(, this
  vari)HY(able)YH( must be used to omit loading of build system modules that are
  neither built-in nor stan)HY(dard)YH( pre-installed and which are there)HY(fore)YH( listed
  as package depen)HY(den)HY(cies)YH(. Such modules are not yet avail)HY(able)YH( during the
  skele)HY(ton)YH( load. For example:)EP(

  ) 7 52 PR(# root.build

using cxx       # Ok, built-in module.
using autoconf  # Ok, standard pre-installed module.

if \201$build.mode != 'skeleton'\202
  using hello)RP(

  )0 P(The )SM(build.mode)ES( vari)HY(able)YH( can also be used to omit parts of
  )SM(root.build)ES( that are expen)HY(sive)YH( to eval)HY(u)HY(ate)YH( and which are only
  neces)HY(sary)YH( during the actual build. Here is a real)HY(is)HY(tic)YH( example:)EP(

  ) 26 67 PR(# root.build

...

using cxx

# Determine the GCC plugin directory. But omit doing it during the
# skeleton load.
#
if \201$build.mode != 'skeleton'\202
{
  if \201$cxx.id != 'gcc'\202
    fail 'this project can only be built with GCC'

  # If plugin support is disabled, then -print-file-name will print
  # the name we have passed \201the real plugin directory will always
  # be absolute\202.
  #
  plugin_dir = [dir_path] \200
    $process.run\201$cxx.path -print-file-name=plugin\202

  if \201"$plugin_dir" == plugin\202
    fail "$recall\201$cxx.path\202 does not support plugins"

  plugin_dir = $normalize\201$plugin_dir\202
})RP(

  )0 1 5 H(5)WB 80 Sn()WB 7 Sn( Depen)HY(dency)YH( Config)HY(u)HY(ra)HY(tion)YH( Nego)HY(ti)HY(a)HY(tion)YH()EH(

  )0 P(In )SM(bpkg)ES(, a depen)HY(dent)YH( package may specify a desired
  config)HY(u)HY(ra)HY(tion)YH( for a depen)HY(dency)YH( package. Because there could be multi)HY(ple)YH( such
  depen)HY(dents)YH(, )SM(bpkg)ES( needs to come up with a depen)HY(dency)YH(
  config)HY(u)HY(ra)HY(tion)YH( that is accept)HY(able)YH( to all of them. This process is called the
  depen)HY(dency)YH( config)HY(u)HY(ra)HY(tion)YH( nego)HY(ti)HY(a)HY(tion)YH(.)EP(

  )0 P(The desired depen)HY(dency)YH( config)HY(u)HY(ra)HY(tion)YH( is spec)HY(i)HY(fied)YH( as part of the )0 34 1 A()SM(depends)ES()34 0 TN TL()Ec /AF f D( mani)HY(fest)YH( value and
  can be expressed as either a single )SM(require)ES( clause or as a pair
  of )SM(prefer)ES(/)SM(accept)ES( clauses.)EP(

  )0 P(The )SM(require)ES( clause is essen)HY(tially)YH( a short)HY(cut)YH( for spec)HY(i)HY(fy)HY(ing)YH(
  the )SM(prefer)ES(/)SM(accept)ES( clauses where the
  )SM(accept)ES( condi)HY(tion)YH( simply veri)HY(fies)YH( all the vari)HY(able)YH( values
  assigned in the )SM(prefer)ES( clause. It is, however, further
  restricted to the common case of only setting )SM(bool)ES( vari)HY(ables)YH(
  and only to )SM(true)ES( to allow addi)HY(tional)YH( opti)HY(miza)HY(tions)YH( during the
  config)HY(u)HY(ra)HY(tion)YH( nego)HY(ti)HY(a)HY(tion)YH(. The remain)HY(der)YH( of this section only deals with the
  general )SM(prefer)ES(/)SM(accept)ES( seman)HY(tics)YH(.)EP(

  )0 P(While the exact format of )SM(prefer)ES(/)SM(accept)ES( is
  described as part of the )0 34 1 A()SM(depends)ES()34 0 TN TL()Ec /AF f D( mani)HY(fest)YH( value,
  for this section it is suffi)HY(cient)YH( to know that the )SM(prefer)ES(
  clause is an arbi)HY(trary)YH( )SM(build)HY(file)YH()ES( frag)HY(ment)YH( that is expected to
  set one or more depen)HY(dency)YH( config)HY(u)HY(ra)HY(tion)YH( vari)HY(ables)YH( to the values preferred
  by this depen)HY(dent)YH( while the )SM(accept)ES( clause is a
  )SM(build)HY(file)YH()ES( eval context expres)HY(sion)YH( that should eval)HY(u)HY(ate)YH( to
  )SM(true)ES( or )SM(false)ES( indi)HY(cat)HY(ing)YH( whether the depen)HY(dency)YH(
  config)HY(u)HY(ra)HY(tion)YH( values it is eval)HY(u)HY(ated)YH( on are accept)HY(able)YH( to this depen)HY(dent)YH(.
  For example:)EP(

  ) 16 58 PR(libfoo ^1.0.0
{
  # We prefer the cache but can work without it.
  # We need the buffer of at least 4KB.
  #
  prefer
  {
    config.libfoo.cache = true

    config.libfoo.buffer = \201$config.libfoo.buffer < 4096 \200
                            ? 4096                       \200
                            : $config.libfoo.buffer\202
  }

  accept \201$config.libfoo.buffer >= 4096\202
})RP(

  )0 P(The config)HY(u)HY(ra)HY(tion)YH( nego)HY(ti)HY(a)HY(tion)YH( algo)HY(rithm)YH( can be summa)HY(rized)YH( as coop)HY(er)HY(a)HY(tive)YH(
  refine)HY(ment)YH(. Specif)HY(i)HY(cally)YH(, when)HY(ever)YH( a )SM(prefer)ES( clause of a
  depen)HY(dent)YH( changes any config)HY(u)HY(ra)HY(tion)YH( value, all other depen)HY(dents)YH('
  )SM(prefer)ES( clauses are re-eval)HY(u)HY(ated)YH(. This process contin)HY(ues)YH( until
  there are no more changes \201success\202, one of the )SM(accept)ES( clauses
  returned )SM(false)ES( \201failure\202, or the process starts "yo-yo'ing"
  between two or more config)HY(u)HY(ra)HY(tions)YH( \201failure\202.)EP(

  )0 P(The depen)HY(dents)YH( are expected to coop)HY(er)HY(ate)YH( by not over)HY(rid)HY(ing)YH( "better"
  values that were set by other depen)HY(dents)YH(. Consider the follow)HY(ing)YH( two
  )SM(prefer)ES( clauses:)EP(

  ) 11 56 PR(prefer
{
  config.libfoo.buffer = 4096
}

prefer
{
  config.libfoo.buffer = \201$config.libfoo.buffer < 4096 \200
                          ? 4096                       \200
                          : $config.libfoo.buffer\202
})RP(

  )0 P(The first version is non-coop)HY(er)HY(a)HY(tive)YH( and should only be used if this
  depen)HY(dent)YH( requires the buffer to be exactly 4KB. The second version is
  coop)HY(er)HY(a)HY(tive)YH(: it will increase the buffer to the minimum required by this
  depen)HY(dent)YH( but will respect values above 4KB.)EP(

  )0 P(One case where we don't need to worry about this is when setting the
  config)HY(u)HY(ra)HY(tion)YH( vari)HY(able)YH( to the "best" possi)HY(ble)YH( value. One common example of
  this is setting a )SM(bool)ES( config)HY(u)HY(ra)HY(tion)YH( to )SM(true)ES(.)EP(

  )0 P(With a few excep)HY(tions)YH( discussed below, a depen)HY(dent)YH( must always re-set the
  config)HY(u)HY(ra)HY(tion)YH( vari)HY(able)YH(, even if to the better value. For example, the
  follow)HY(ing)YH( is an incor)HY(rect)YH( attempt at the above coop)HY(er)HY(a)HY(tive)YH(
  )SM(prefer)ES( clause:)EP(

  ) 5 49 PR(prefer
{
  if \201$config.libfoo.buffer < 4096\202  # Incorrect.
    config.libfoo.buffer = 4096
})RP(

  )0 P(The problem with the above attempt is that the default value could be
  greater than 4KB, in which case )SM(bpkg)ES( will have no idea that
  there is a depen)HY(dent)YH( relying on this config)HY(u)HY(ra)HY(tion)YH( value.)EP(

  )0 P(Before each )SM(prefer)ES( clause re-eval)HY(u)HY(a)HY(tion)YH(, vari)HY(ables)YH( that were
  first set to their current values by this depen)HY(dent)YH( are reset to their
  defaults thus allow)HY(ing)YH( the depen)HY(dent)YH( to change its mind, for instance, in
  response to other config)HY(u)HY(ra)HY(tion)YH( changes. For example:)EP(

  ) 13 70 PR(# While we have no preference about the cache, if enabled/disabled,
# we need a bigger/smaller buffer.
#
prefer
{
  min_buffer = \201$config.libfoo.cache ? 8192 : 4096\202

  config.libfoo.buffer = \201$config.libfoo.buffer < $min_buffer \200
                          ? $min_buffer                       \200
                          : $config.libfoo.buffer\202
}

accept \201$config.libfoo.buffer >= \201$config.libfoo.cache ? 8192 : 4096\202\202)RP(

  )0 P(The inter)HY(est)HY(ing)YH( case to consider in the above example is when
  )SM(config.libfoo.cache)ES( changes from )SM(true)ES( to
  )SM(false)ES(: without the reset to defaults seman)HY(tics)YH( the
  )SM(prefer)ES( clause would have kept the buffer at 8KB \201since it's
  greater than the 4KB minimum\202.)EP(

  )BR(
  )0 P(Currently )SM(accept)ES( is always eval)HY(u)HY(ated)YH( after
  )SM(prefer)ES( and tempo)HY(rary)YH( vari)HY(ables)YH( \201like )SM(min_buffer)ES( in
  the above example\202 set in )SM(prefer)ES( are visible in
  )SM(accept)ES(. But it's best not to rely on this in case it changes in
  the future. For example, we may try harder to resolve the "yo-yo'ing" case
  mentioned above by check)HY(ing)YH( if one of the alter)HY(nat)HY(ing)YH( config)HY(u)HY(ra)HY(tions)YH( are
  accept)HY(able)YH( to every)HY(one)YH( without re-eval)HY(u)HY(a)HY(tion)YH(.)EP(

  )0 P(This is also the reason why we need a sepa)HY(rate)YH( )SM(accept)ES( in the
  first place. Plus, it allows for more advanced config)HY(u)HY(ra)HY(tion)YH( tech)HY(niques)YH(
  where we may need to have an accep)HY(tance)YH( crite)HY(ria)YH( but no pref)HY(er)HY(ences)YH(.)EP(
  )BR(

  )0 P(Config)HY(u)HY(ra)HY(tion)YH( vari)HY(ables)YH( that are set by the depen)HY(dent)YH( in the
  )SM(prefer)ES( clause are visible in the subse)HY(quent)YH( clauses as well as
  in the subse)HY(quent)YH( )SM(depends)ES( values of this depen)HY(dent)YH(.
  Config)HY(u)HY(ra)HY(tion)YH( vari)HY(ables)YH( that are not set, however, are only visible until
  the imme)HY(di)HY(ately)YH( follow)HY(ing)YH( )SM(reflect)ES( clause. For example, in the
  above listing, )SM(config.libfoo.cache)ES( would still be visible in
  the )SM(reflect)ES( clause if it were to follow )SM(accept)ES( but
  no further. As a result, if we need to make deci)HY(sions)YH( based on config)HY(u)HY(ra)HY(tion)YH(
  vari)HY(ables)YH( that we have no pref)HY(er)HY(ence)YH( about, they need to be saved in the
  )SM(reflect)ES( clause. For example:)EP(

  ) 21 53 PR(depends:
\200
libfoo ^1.0.0
{
  # We have no preference about the cache but need to
  # observe its value.
  #
  prefer
  {
  }

  accept \201true\202

  reflect
  {
    config.hello.libfoo_cache = $config.libfoo.cache
  }
}
\200

depends: libbar ^1.0.0 ? \201$config.hello.libfoo_cache\202)RP(

  )0 P(It is possi)HY(ble)YH( to deter)HY(mine)YH( the origin of the config)HY(u)HY(ra)HY(tion)YH( vari)HY(able)YH(
  value using the )SM($config.origin\201\202)ES( func)HY(tion)YH(. It returns either
  )SM(unde)HY(fined)YH()ES( if the vari)HY(able)YH( is unde)HY(fined)YH( \201only possi)HY(ble)YH( if it has
  no default value\202, )SM(default)ES( if the vari)HY(able)YH( has the default
  value from the )SM(config)ES( direc)HY(tive)YH( in )SM(root.build)ES(,
  )SM(build)HY(file)YH()ES( if the value is from a )SM(build)HY(file)YH()ES(,
  normally )SM(config.build)ES(, or )SM(over)HY(ride)YH()ES( if the value is
  a command line over)HY(ride)YH( \201that is, user config)HY(u)HY(ra)HY(tion)YH(\202. For example, this is
  how we could use it if we only wanted to change the default value \201notice
  that it's the vari)HY(able)YH('s name and not its )SM($)ES(-expan)HY(sion)YH( that we
  pass to )SM($config.origin\201\202)ES(\202:)EP(

  ) 7 55 PR(prefer
{
  config.libfoo.buffer = \201                            \200
    $config.origin\201config.libfoo.buffer\202 == 'default' \200
    ? 4096                                            \200
    : $config.libfoo.buffer\202
})RP(

  )0 P(The follow)HY(ing)YH( sub-sections discuss a number of more advanced
  config)HY(u)HY(ra)HY(tion)YH( tech)HY(niques)YH( that are based on the func)HY(tion)HY(al)HY(ity)YH( described in
  this section.)EP(

  )0 2 6 H(5.1)WB 81 Sn()WB 8 Sn( Prefer X but Accept X or Y)EH(

  )0 P(Consider a config)HY(u)HY(ra)HY(tion)YH( vari)HY(able)YH( that is a choice between several
  mutu)HY(ally)YH( exclu)HY(sive)YH( values, for example, user inter)HY(face)YH( back)HY(ends)YH( that could
  be, say, )SM(cli)ES(, )SM(gui)ES(, or )SM(none)ES(. In such
  situ)HY(a)HY(tions)YH( it's common to prefer one value but being able to work with some
  subset of them. For example, we could prefer )SM(gui)ES( but were also
  able to make do with )SM(cli)ES( but not with )SM(none)ES(. Here
  is how we could express such a config)HY(u)HY(ra)HY(tion)YH(:)EP(

  ) 15 67 PR(libfoo ^1.0.0
{
  # We prefer `gui`, can also work with `cli` but not `none`.
  #
  prefer
  {
    config.libfoo.ui = \201                                         \200
      $config.origin\201config.libfoo.ui\202 == 'default' ||           \200
      \201$config.libfoo.ui != 'gui' && $config.libfoo.ui != 'cli'\202 \200
      ? 'gui'                                                    \200
      : $config.libfoo.ui\202
  }

  accept \201$config.libfoo.ui == 'gui' || $config.libfoo.ui == 'cli'\202
})RP(

  )0 2 7 H(5.2)WB 82 Sn()WB 9 Sn( Use If Enabled)EH(

  )0 P(Some)HY(times)YH( we may want to use a feature if it is enabled by someone else
  but not enable it ourselves. For example, the feature might be expen)HY(sive)YH( and
  our use of it tangen)HY(tial)YH(, but if it's enabled anyway, then we might as well
  take advan)HY(tage)YH( of it. Here is how we could express such a config)HY(u)HY(ra)HY(tion)YH(:)EP(

  ) 15 56 PR(libfoo ^1.0.0
{
  # Use config.libfoo.x only if enabled by someone else.
  #
  prefer
  {
  }

  accept \201true\202

  reflect
  {
    config.hello.libfoo_x = $config.libfoo.x
  }
})RP(

  )0 2 8 H(5.3)WB 83 Sn()WB 10 Sn( Disable If Enabled by Default)EH(

  )0 P(Some)HY(times)YH( we may want to disable a feature that is enabled by default
  provided that nobody else needs it. For example, the feature might be
  expen)HY(sive)YH( and we would prefer to avoid paying the cost if we are the only
  ones using this depen)HY(dency)YH(. Here is how we could express such a
  config)HY(u)HY(ra)HY(tion)YH(:)EP(

  ) 10 53 PR(libfoo ^1.0.0
{
  prefer
  {
    if \201$config.origin\201config.libfoo.x\202 == 'default'\202
      config.libfoo.x = false
  }

  accept \201true\202
})RP(

  )0 1 9 H(6)WB 84 Sn()WB 11 Sn( Mani)HY(fests)YH()EH(

  )0 P(This chapter describes the general mani)HY(fest)YH( file format as well as the
  concrete mani)HY(fests)YH( used by )SM(bpkg)ES(.)EP(

  )0 P(Currently, three mani)HY(fests)YH( are defined: package mani)HY(fest)YH(, repos)HY(i)HY(tory)YH(
  mani)HY(fest)YH(, and signa)HY(ture)YH( mani)HY(fest)YH(. The former two mani)HY(fests)YH( can also be
  combined into a list of mani)HY(fests)YH( to form the list of avail)HY(able)YH( pack)HY(ages)YH( and
  the descrip)HY(tion)YH( of a repos)HY(i)HY(tory)YH(, respec)HY(tively)YH(.)EP(

  )0 2 10 H(6.1)WB 85 Sn()WB 12 Sn( Mani)HY(fest)YH( Format)EH(

  )0 P(A mani)HY(fest)YH( is a UTF-8 encoded text restricted to the Unicode graphic
  char)HY(ac)HY(ters)YH(, tabs \201)SM(\200t)ES(\202, carriage returns \201)SM(\200r)ES(\202, and
  line feeds \201)SM(\200n)ES(\202. It contains a list of name-value pairs in the
  form:)EP(

  ) 1 15 PR(<name>: <value>)RP(

  )0 P(For example:)EP(

  ) 2 14 PR(name: libfoo
version: 1.2.3)RP(

  )BR(
  )0 P(If a value needs to be able to contain other Unicode code)HY(points)YH(, they
  should be escaped in a value-specific manner. For example, the back)HY(slash)YH(
  \201)SM(\200)ES(\202 escap)HY(ing)YH( described below can be extended for this
  purpose.)EP(
  )BR(

  )0 P(The name can contain any char)HY(ac)HY(ters)YH( except )SM(:)ES( and
  whites)HY(paces)YH(. Newline termi)HY(nates)YH( the pair unless escaped with )SM(\200)ES(
  \201see below\202. Leading and trail)HY(ing)YH( whites)HY(paces)YH( before and after name and
  value are ignored except in the multi-line mode \201see below\202.)EP(

  )0 P(If the first non-whites)HY(pace)YH( char)HY(ac)HY(ter)YH( on the line is )SM(#)ES(, then
  the rest of the line is treated as a comment and ignored except if the
  preced)HY(ing)YH( newline was escaped or in the multi-line mode \201see below\202. For
  example:)EP(

  ) 4 29 PR(# This is a comment.
short: This is #not a comment
long: Also \200
#not a comment)RP(

  )0 P(The first name-value pair in the mani)HY(fest)YH( file should always have an
  empty name. The value of this special pair is the mani)HY(fest)YH( format version.
  The version value shall use the default \201that is, non-multi-line\202 mode and
  shall not use any escape sequences. Currently it should be )SM(1)ES(,
  for example:)EP(

  ) 3 14 PR(: 1
name: libfoo
version: 1.2.3)RP(

  )0 P(Any new name that is added without incre)HY(ment)HY(ing)YH( the version must be
  optional so that it can be safely ignored by older imple)HY(men)HY(ta)HY(tions)YH(.)EP(

  )0 P(The special empty name pair can also be used to sepa)HY(rate)YH( multi)HY(ple)YH(
  mani)HY(fests)YH(. In this case the version may be omitted in the subse)HY(quent)YH(
  mani)HY(fests)YH(, for example:)EP(

  ) 6 14 PR(: 1
name: libfoo
version: 1.2.3
:
name: libbar
version: 2.3.4)RP(

  )0 P(To disable treat)HY(ing)YH( of a newline as a name-value pair termi)HY(na)HY(tor)YH( we can
  escape it with )SM(\200)ES(. Note that )SM(\200)ES( is only treated as
  an escape sequence when followed by a newline and both are simply removed
  from the stream \201as opposed to being replaced with a space\202. To enter a
  literal )SM(\200)ES( at the end of the value, use the )SM(\200\200)ES(
  sequence. For example:)EP(

  ) 2 55 PR(description: Long text that doesn't fit into one line \200
so it is continued on the next line.)RP(

  ) 1 26 PR(windows-path: C:\200foo\200bar\200\200)RP(

  )0 P(Notice that in the final example only the last )SM(\200)ES( needs
  special handling since it is the only one that is followed by a newline.)EP(

  )0 P(One may notice that in this newline escap)HY(ing)YH( scheme a line consist)HY(ing)YH( of
  just )SM(\200)ES( followed by a newline has no use, except, perhaps, for
  visual presen)HY(ta)HY(tion)YH( of, arguably, dubious value. For example, this
  repre)HY(sen)HY(ta)HY(tion)YH(:)EP(

  ) 3 26 PR(description: First line. \200
\200
Second line.)RP(

  )0 P(Is seman)HY(ti)HY(cally)YH( equiv)HY(a)HY(lent)YH( to:)EP(

  ) 1 37 PR(description: First line. Second line.)RP(

  )0 P(As a result, such a sequence is "over)HY(loaded)YH(" to provide more useful
  func)HY(tion)HY(al)HY(ity)YH( in two ways: Firstly, if )SM(:)ES( after the name is
  followed on the next line by just )SM(\200)ES( and a newline, then it
  signals the start of the multi-line mode. In this mode all subse)HY(quent)YH(
  newlines and )SM(#)ES( are treated as ordi)HY(nary)YH( char)HY(ac)HY(ters)YH( rather than
  value termi)HY(na)HY(tors)YH( or comments until a line consist)HY(ing)YH( of just )SM(\200)ES(
  and a newline \201the multi-line mode termi)HY(na)HY(tor)YH(\202. For example:)EP(

  ) 6 17 PR(description:
\200
First paragraph.
#
Second paragraph.
\200)RP(

  )0 P(Expressed as a C-string, the value in the above example is:)EP(

  ) 1 40 PR("First paragraph.\200n#\200nSecond paragraph.")RP(

  )BR(
  )0 P(Orig)HY(i)HY(nally)YH(, the multi-line mode was entered if )SM(:)ES( after the
  name were imme)HY(di)HY(ately)YH( followed by )SM(\200)ES( and a newline but on the
  same line. While this syntax is still recog)HY(nized)YH( for back)HY(wards)YH(
  compat)HY(i)HY(bil)HY(ity)YH(, it is depre)HY(cated)YH( and will be discon)HY(tin)HY(ued)YH( in the future.)EP(
  )BR(

  )0 P(Note that in the multi-line mode we can still use newline escap)HY(ing)YH( to
  split long lines, for example:)EP(

  ) 6 48 PR(description:
\200
First paragraph that doesn't fit into one line \200
so it is continued on the next line.
Second paragraph.
\200)RP(

  )0 P(And secondly, in the simple \201that is, non-multi-line\202 mode, the sole
  )SM(\200)ES( and newline sequence is over)HY(loaded)YH( to mean a newline. So the
  previ)HY(ous)YH( example can also be repre)HY(sented)YH( like this:)EP(

  ) 4 56 PR(description: First paragraph that doesn't fit into one \200
line so it is continued on the next line.\200
\200
Second paragraph.)RP(

  )0 P(Note that the multi-line mode can be used to capture a value with leading
  and/or trail)HY(ing)YH( whites)HY(paces)YH(, for example:)EP(

  ) 5 12 PR(description:
\200
  test

\200)RP(

  )0 P(The C-string repre)HY(sent)HY(ing)YH( this value is:)EP(

  ) 1 10 PR("  test\200n")RP(

  )0 P(EOF can be used instead of a newline to termi)HY(nate)YH( both simple and
  multi-line values. For example the follow)HY(ing)YH( repre)HY(sen)HY(ta)HY(tion)YH( results in the
  same value as in the previ)HY(ous)YH( example.)EP(

  ) 5 12 PR(description:
\200
  test

<EOF>)RP(

  )0 P(By conven)HY(tion)YH(, names are all in lower case and multi-word names are
  sepa)HY(rated)YH( with )SM(-)ES(. Note that names are case-sensi)HY(tive)YH(.)EP(

  )0 P(Also by conven)HY(tion)YH(, the follow)HY(ing)YH( name suffixes are used to denote common
  types of values:)EP(

  ) 3 6 PR(-file
-url
-email)RP(

  )0 P(For example:)EP(

  ) 4 35 PR(description: Inline description
description-file: README
package-url: http://www.example.com
package-email: john@example.com)RP(

  )0 P(Other common name suffixes \201such as -feed\202 could be added later.)EP(

  )BR(
  )0 P(Gener)HY(ally)YH(, unless there is a good reason not to, we keep values
  lower-case \201for example, )SM(requires)ES( values such as
  )SM(c++11)ES( or )SM(linux)ES(\202. An example where we use
  upper/mixed case would be )SM(license)ES(; it seems unlikely
  )SM(gplv2)ES( would be better than )SM(GPLv2)ES(.)EP(
  )BR(

  )0 P(A number of name-value pairs described below allow for the value proper
  to be option)HY(ally)YH( followed by )SM(;)ES( and a comment. Such comments
  serve as addi)HY(tional)YH( docu)HY(men)HY(ta)HY(tion)YH( for the user and should be one or more
  full sentences, that is start with a capital letter and end with a period.
  Note that unlike )SM(#)ES(-style comments which are ignored, these
  comments are consid)HY(ered)YH( to be part of the value. For example:)EP(

  ) 1 51 PR(email: foo-users@example.com ; Public mailing list.)RP(

  )0 P(It is recom)HY(mended)YH( that you keep comments short, single-sentence. Note
  that non-comment semi)HY(colons)YH( in such values have to be escaped with a
  back)HY(slash)YH(, for example:)EP(

  ) 1 42 PR(url: http://git.example.com/?p=foo\200;a=tree)RP(

  )0 P(The only other recog)HY(nized)YH( escape sequence in such values is
  )SM(\200\200)ES(, which is replaced with a single back)HY(slash)YH(. If a back)HY(slash)YH(
  is followed by any other char)HY(ac)HY(ter)YH(, then it is treated liter)HY(ally)YH(.)EP(

  )0 P(If a value with a comment is multi-line, then )SM(;)ES( must appear
  on a sepa)HY(rate)YH( line, for example:)EP(

  ) 6 36 PR(url:
\200
http://git.example.com/?p=foo;a=tree
;
Git repository tree.
\200)RP(

  )0 P(In this case, only lines that consist of a sole non-comment semi)HY(colon)YH(
  need escap)HY(ing)YH(, for example:)EP(

  ) 6 14 PR(license:
\200
other: strange
\200;
license
\200)RP(

  )0 P(The only other recog)HY(nized)YH( escape sequence in such multi-line values is
  lines consist)HY(ing)YH( of two or more back)HY(slashes)YH( followed by a semi)HY(colon)YH(.)EP(

  )0 P(In the mani)HY(fest)YH( spec)HY(i)HY(fi)HY(ca)HY(tions)YH( described below optional compo)HY(nents)YH( are
  enclosed in square brack)HY(ets)YH( \201)SM([])ES(\202. If the name is enclosed in
  )SM([])ES( then the name-value pair is optional, other)HY(wise)YH( \235
  required. For example:)EP(

  ) 3 33 PR(name: <name>
license: <licenses> [; <comment>]
[description]: <text>)RP(

  )0 P(In the above example )SM(name)ES( is required, )SM(license)ES(
  has an optional compo)HY(nent)YH( \201comment\202, and )SM(descrip)HY(tion)YH()ES( is
  optional.)EP(

  )0 P(In certain situ)HY(a)HY(tions)YH( \201for example, shell scripts\202 it can be easier to
  parse the binary mani)HY(fest)YH( repre)HY(sen)HY(ta)HY(tion)YH(. The binary repre)HY(sen)HY(ta)HY(tion)YH( does not
  include comments and consists of a sequence of name-value pairs in the
  follow)HY(ing)YH( form:)EP(

  ) 1 16 PR(<name>:<value>\2000)RP(

  )0 P(That is, the name and the value are sepa)HY(rated)YH( by a colon and each pair
  \201includ)HY(ing)YH( the last\202 is termi)HY(nated)YH( with the )SM(NUL)ES( char)HY(ac)HY(ter)YH(. Note
  that there can be no leading or trail)HY(ing)YH( whites)HY(pace)YH( char)HY(ac)HY(ters)YH( around the
  name and any whites)HY(paces)YH( after the colon and before the )SM(NUL)ES(
  termi)HY(na)HY(tor)YH( are part of the value. Finally, the mani)HY(fest)YH( format versions are
  always explicit \201that is, not empty\202 in binary mani)HY(fest)YH( lists.)EP(

  )0 2 11 H(6.2)WB 86 Sn()WB 13 Sn( Package Mani)HY(fest)YH()EH(

  )0 P(The package mani)HY(fest)YH( \201the )SM(mani)HY(fest)YH()ES( file found in the
  package's root direc)HY(tory)YH(\202 describes a )SM(bpkg)ES( package. The
  mani)HY(fest)YH( synop)HY(sis)YH( is presented next followed by the detailed descrip)HY(tion)YH( of
  each value in subse)HY(quent)YH( sections.)EP(

  )0 P(The subset of the values up to and includ)HY(ing)YH( )SM(license)ES(
  consti)HY(tute)YH( the package mani)HY(fest)YH( header. Note that the header is a valid
  package mani)HY(fest)YH( since all the other values are optional. There is also no
  require)HY(ment)YH( for the header values to appear first or to be in a specific
  order. In partic)HY(u)HY(lar)YH(, in a full package mani)HY(fest)YH( they can be inter)HY(leaved)YH(
  with non-header values.)EP(

  ) 9 36 PR(name: <name>
version: <version>
[upstream-version]: <string>
[type]: <type>
[language]: <lang>
[project]: <name>
[priority]: <priority> [; <comment>]
summary: <text>
license: <licenses> [; <comment>])RP(

  ) 63 52 PR([topics]: <topics>
[keywords]: <keywords>
[description]: <text>
[description-file]: <path> [; <comment>]
[description-type]: <text-type>
[package-description]: <text>
[package-description-file]: <path> [; <comment>]
[package-description-type]: <text-type>
[changes]: <text>
[changes-file]: <path> [; <comment>]
[changes-type]: <text-type>

[url]: <url> [; <comment>]
[doc-url]: <url> [; <comment>]
[src-url]: <url> [; <comment>]
[package-url]: <url> [; <comment>]

[email]: <email> [; <comment>]
[package-email]: <email> [; <comment>]
[build-email]: <email> [; <comment>]
[build-warning-email]: <email> [; <comment>]
[build-error-email]: <email> [; <comment>]

[depends]: [*] <alternatives> [; <comment>]
[requires]: [*] <alternatives> [; <comment>]

[tests]: [*] <name> [<version-constraint>]
[examples]: [*] <name> [<version-constraint>]
[benchmarks]: [*] <name> [<version-constraint>]

[builds]: <class-expr> [; <comment>])WR(
[build-include]: <config>[/<target>] [; <comment>]
[build-exclude]: <config>[/<target>] [; <comment>]
[build-auxiliary]: <config> [; <comment>]
[build-auxiliary-<name>]: <config> [; <comment>]
[build-bot]: <pub-key>

[*-build-config]: <args> [; <comment>]

[*-builds]: <class-expr> [; <comment>]
[*-build-include]: <config>[/<target>] [; <comment>]
[*-build-exclude]: <config>[/<target>] [; <comment>]
[*-build-auxiliary]: <config> [; <comment>]
[*-build-auxiliary-<name>]: <config> [; <comment>]
[*-build-bot]: <pub-key>

[*-build-email]: <email> [; <comment>]
[*-build-warning-email]: <email> [; <comment>]
[*-build-error-email]: <email> [; <comment>]

[build-file]: <path>

[bootstrap-build]: <text>
[root-build]: <text>
[*-build]: <text>

[bootstrap-build2]: <text>
[root-build2]: <text>
[*-build2]: <text>

[*-name]: <name> [<name>...])WR(
[*-version]: <string>
[*-to-downstream-version]: <regex>)RP(

  )0 3 12 H(6.2.1)WB 87 Sn()WB 14 Sn( )SM(name)ES()EH(

  ) 1 12 PR(name: <name>)RP(

  )0 P(The package name. See )0 3 1 A(Package Name)3 0 TN TL()Ec /AF f D( for the
  package name format descrip)HY(tion)YH(. Note that the name case is preserved for
  display, in file names, etc.)EP(

  )0 3 13 H(6.2.2)WB 88 Sn()WB 15 Sn( )SM(version)ES()EH(

  ) 2 28 PR(version: <version>
[upstream-version]: <string>)RP(

  )0 P(The package version. See )0 4 1 A(Package Version)4 0 TN TL()Ec /AF f D(
  for the version format descrip)HY(tion)YH(. Note that the version case is preserved
  for display, in file names, etc.)EP(

  )0 P(When pack)HY(ag)HY(ing)YH( exist)HY(ing)YH( projects, some)HY(times)YH( you may want to deviate from
  the upstream version)HY(ing)YH( scheme because, for example, it may not be
  repre)HY(sentable)YH( as a )SM(bpkg)ES( package version or simply be
  incon)HY(ve)HY(nient)YH( to work with. In this case you would need to come up with an
  upstream-to-down)HY(stream)YH( version mapping and use the
  )SM(upstream-version)ES( value to preserve the orig)HY(i)HY(nal)YH( version for
  infor)HY(ma)HY(tion)YH(.)EP(

  )0 3 14 H(6.2.3)WB 89 Sn()WB 16 Sn( )SM(type)ES(,
  )SM(language)ES()EH(

  ) 5 31 PR([type]: <type>
[language]: <lang>

<type> = <name>[,<sub-options>]
<lang> = <name>[=impl])RP(

  )0 P(The package type and program)HY(ming)YH( language\201s\202.)EP(

  )0 P(The currently recog)HY(nized)YH( package types are )SM(exe)ES(,
  )SM(lib)ES(, and )SM(other)ES(. If the type is not spec)HY(i)HY(fied)YH(, then
  if the package name starts with )SM(lib)ES(, then it is assumed to be
  )SM(lib)ES( and )SM(exe)ES( other)HY(wise)YH( \201see )0 3 1 A(Package Name)3 0 TN TL()Ec /AF f D( for details\202. Other package types may
  be added in the future and code that does not recog)HY(nize)YH( a certain package
  type should treat it as )SM(other)ES(. The type name can be followed by
  a comma-sepa)HY(rated)YH( list of sub-options. Currently, the only recog)HY(nized)YH(
  sub-option is )SM(binless)ES( which applies to the )SM(lib)ES(
  type indi)HY(cat)HY(ing)YH( a header-only \201or equiv)HY(a)HY(lent)YH(\202 library. For example:)EP(

  ) 1 17 PR(type: lib,binless)RP(

  )0 P(The package language must be in the lower case, for example,
  )SM(c)ES(, )SM(c++)ES(, )SM(rust)ES(, )SM(bash)ES(. If
  the language is not spec)HY(i)HY(fied)YH(, then if the package name has an exten)HY(sion)YH( \201as
  in, for example, )SM(libbutl.bash)ES(; see )0 3 1 A(Package Name)3 0 TN TL()Ec /AF f D( for details\202 the exten)HY(sion)YH( is assumed
  to name the package language. Other)HY(wise)YH(, )SM(cc)ES( \201unspec)HY(i)HY(fied)YH(
  )SM(c)ES(-common language\202 is assumed. If a package uses multi)HY(ple)YH(
  languages, then multi)HY(ple)YH( )SM(language)ES( values must be spec)HY(i)HY(fied)YH(. The
  languages which are only used in a library's imple)HY(men)HY(ta)HY(tion)YH( \201as opposed to
  also in its inter)HY(face)YH(\202 should be marked as such. For example, for a C
  library with C++ imple)HY(men)HY(ta)HY(tion)YH(:)EP(

  ) 3 18 PR(type: lib
language: c
language: c++=impl)RP(

  )BR(
  )0 P(If the use of a language, such as C++, also always implies the use of
  another language, such as C, then such an implied language need not be
  explic)HY(itly)YH( spec)HY(i)HY(fied)YH(.)EP(
  )BR(

  )0 3 15 H(6.2.4)WB 90 Sn()WB 17 Sn( )SM(project)ES()EH(

  ) 1 17 PR([project]: <name>)RP(

  )0 P(The project this package belongs to. The project name has the same
  restric)HY(tions)YH( as the package name \201see )0 3 1 A(Package
  Name)3 0 TN TL()Ec /AF f D( for details\202 and its case is preserved for display, in direc)HY(tory)YH(
  names, etc. If unspec)HY(i)HY(fied)YH(, then the project name is assumed to be the same
  as the package name.)EP(

  )0 P(Projects are used to group related pack)HY(ages)YH( together in order to help
  with orga)HY(ni)HY(za)HY(tion)YH( and discov)HY(ery)YH( in repos)HY(i)HY(to)HY(ries)YH(. For example, pack)HY(ages)YH(
  )SM(hello)ES(, )SM(libhello)ES(, and )SM(libhello2)ES( could
  all belong to project )SM(hello)ES(. By conven)HY(tion)YH(, projects of library
  pack)HY(ages)YH( are named without the )SM(lib)ES( prefix.)EP(

  )0 3 16 H(6.2.5)WB 91 Sn()WB 18 Sn( )SM(prior)HY(ity)YH()ES()EH(

  ) 3 43 PR([priority]: <priority> [; <comment>]

<priority> = security | high | medium | low)RP(

  )0 P(The release prior)HY(ity)YH( \201optional\202. As a guide)HY(line)YH(, use
  )SM(secu)HY(rity)YH()ES( for secu)HY(rity)YH( fixes, )SM(high)ES( for crit)HY(i)HY(cal)YH( bug
  fixes, )SM(medium)ES( for impor)HY(tant)YH( bug fixes, and )SM(low)ES( for
  minor fixes and/or feature releases. If not spec)HY(i)HY(fied)YH(, )SM(low)ES( is
  assumed.)EP(

  )0 3 17 H(6.2.6)WB 92 Sn()WB 19 Sn( )SM(summary)ES()EH(

  ) 1 15 PR(summary: <text>)RP(

  )0 P(The short descrip)HY(tion)YH( of the package.)EP(

  )0 3 18 H(6.2.7)WB 93 Sn()WB 20 Sn( )SM(license)ES()EH(

  ) 5 37 PR(license: <licenses> [; <comment>]

<licenses> = <license> [, <license>]*
<license>  = [<scheme>:] <name>
<scheme>   = other)RP(

  )0 P(The package license. The default license name scheme is )R2 2 A(SPDX License Expres)HY(sion)YH()EA(. In its
  simplest form, it is just an ID of the license under which this package is
  distributed. An optional comment normally gives the full name of the
  license, for example:)EP(

  ) 1 45 PR(license: MPL-2.0 ; Mozilla Public License 2.0)RP(

  )0 P(The follow)HY(ing)YH( table lists the most commonly used free/open source
  soft)HY(ware)YH( licenses and their SPDX license IDs:)EP(

  ) 32 68 PR(MIT                ; MIT License.

BSD-2-Clause       ; BSD 2-Clause "Simplified" License
BSD-3-Clause       ; BSD 3-Clause "New" or "Revised" License
BSD-4-Clause       ; BSD 4-Clause "Original" or "Old" License

GPL-2.0-only       ; GNU General Public License v2.0 only
GPL-2.0-or-later   ; GNU General Public License v2.0 or later
GPL-3.0-only       ; GNU General Public License v3.0 only
GPL-3.0-or-later   ; GNU General Public License v3.0 or later

LGPL-2.0-only      ; GNU Library General Public License v2 only
LGPL-2.0-or-later  ; GNU Library General Public License v2 or later
LGPL-2.1-only      ; GNU Lesser General Public License v2.1 only
LGPL-2.1-or-later  ; GNU Lesser General Public License v2.1 or later
LGPL-3.0-only      ; GNU Lesser General Public License v3.0 only
LGPL-3.0-or-later  ; GNU Lesser General Public License v3.0 or later

AGPL-3.0-only      ; GNU Affero General Public License v3.0 only
AGPL-3.0-or-later  ; GNU Affero General Public License v3.0 or later

Apache-1.0         ; Apache License 1.0
Apache-1.1         ; Apache License 1.1
Apache-2.0         ; Apache License 2.0

MPL-1.0            ; Mozilla Public License 1.0
MPL-1.1            ; Mozilla Public License 1.1
MPL-2.0            ; Mozilla Public License 2.0

BSL-1.0            ; Boost Software License 1.0
)WR(
Unlicense          ; The Unlicense \201public domain\202)RP(

  )0 P(If the package is licensed under multi)HY(ple)YH( licenses, then an SPDX license
  expres)HY(sion)YH( can be used to specify this, for example:)EP(

  ) 2 29 PR(license: Apache-2.0 OR MIT
license: MIT AND BSD-2-Clause)RP(

  )0 P(A custom license or extra condi)HY(tions)YH( can be expressed either using the
  license refer)HY(ence)YH( mech)HY(a)HY(nism)YH( of the SPDX license expres)HY(sion)YH( or using the
  )SM(other)ES( scheme \201described below\202. For example:)EP(

  ) 2 57 PR(license: LicenseRef-My-MIT-Like; Custom MIT-alike license
license: other: MIT with extra attribution requirements)RP(

  )0 P(The )SM(other)ES( license name scheme can be used to specify
  licenses that are not defined by SPDX. The license names in this scheme are
  free form with case-insen)HY(si)HY(tive)YH( compar)HY(i)HY(son)YH(. The follow)HY(ing)YH( names in this
  scheme have prede)HY(fined)YH( meaning:)EP(

  ) 4 70 PR(other: public domain    ; Released into the public domain
other: available source ; Not free/open source with public source code
other: proprietary      ; Not free/open source
other: TODO             ; License is not yet decided)RP(

  )BR(
  )0 P(For new projects )R3 2 A(The Unli)HY(cense)YH()EA(
  disclaimer with the )SM(Unli)HY(cense)YH()ES( SPDX ID is recom)HY(mended)YH( over
  )SM(other: public domain)ES(.)EP(
  )BR(

  )0 P(To support combin)HY(ing)YH( license names that use differ)HY(ent)YH( schemes, the
  )SM(license)ES( mani)HY(fest)YH( value can contain a comma-sepa)HY(rated)YH( list of
  license names. This list has the )I(AND)ES( seman)HY(tics)YH(, that is, the user
  must comply with all the licenses listed. To capture alter)HY(na)HY(tive)YH( licens)HY(ing)YH(
  options \201the )I(OR)ES( seman)HY(tics)YH(\202, multi)HY(ple)YH( )SM(license)ES( mani)HY(fest)YH(
  values are used, for example:)EP(

  ) 2 46 PR(license: GPL-2.0-only, other: available source
license: other: proprietary)RP(

  )0 P(For complex licens)HY(ing)YH( situ)HY(a)HY(tions)YH( it is recom)HY(mended)YH( to add comments as an
  aid to the user, for example:)EP(

  ) 2 57 PR(license: LGPL-2.1-only AND MIT ; If linking with GNU TLS.
license: BSD-3-Clause          ; If linking with OpenSSL.)RP(

  )BR(
  )0 P(For back)HY(wards)YH( compat)HY(i)HY(bil)HY(ity)YH( with exist)HY(ing)YH( pack)HY(ages)YH(, the follow)HY(ing)YH(
  \201depre)HY(cated)YH(\202 scheme-less values on the left are recog)HY(nized)YH( as aliases for
  the new values on the right:)EP(

  ) 18 42 PR(BSD2               BSD-2-Clause
BSD3               BSD-3-Clause
BSD4               BSD-4-Clause
GPLv2              GPL-2.0-only
GPLv3              GPL-3.0-only
LGPLv2             LGPL-2.0-only
LGPLv2.1           LGPL-2.1-only
LGPLv3             LGPL-3.0-only
AGPLv3             AGPL-3.0-only
ASLv1              Apache-1.0
ASLv1.1            Apache-1.1
ASLv2              Apache-2.0
MPLv2              MPL-2.0

public domain      other: public domain
available source   other: available source
proprietary        other: proprietary
TODO               other: TODO)RP(
  )BR(

  )0 3 19 H(6.2.8)WB 94 Sn()WB 21 Sn( )SM(topics)ES()EH(

  ) 3 31 PR([topics]: <topics>

<topics> = <topic> [, <topic>]*)RP(

  )0 P(The package topics \201optional\202. The format is a comma-sepa)HY(rated)YH( list of up
  to five poten)HY(tially)YH( multi-word concepts that describe this package. For
  example:)EP(

  ) 1 34 PR(topics: xml parser, xml serializer)RP(

  )0 3 20 H(6.2.9)WB 95 Sn()WB 22 Sn( )SM(keywords)ES()EH(

  ) 3 36 PR([keywords]: <keywords>

<keywords> = <keyword> [ <keyword>]*)RP(

  )0 P(The package keywords \201optional\202. The format is a space-sepa)HY(rated)YH( list of
  up to five words that describe this package. Note that the package and
  project names as well as words from its summary are already consid)HY(ered)YH( to be
  keywords and need not be repeated in this value.)EP(

  )0 3 21 H(6.2.10)WB 96 Sn()WB 23 Sn( )SM(descrip)HY(tion)YH()ES(,
  )SM(package-descrip)HY(tion)YH()ES()EH(

  ) 6 48 PR([description]: <text>
[description-file]: <path> [; <comment>]
[description-type]: <text-type>
[package-description]: <text>
[package-description-file]: <path> [; <comment>]
[package-description-type]: <text-type>)RP(

  )0 P(The detailed descrip)HY(tion)YH( of the project \201)SM(descrip)HY(tion)YH()ES(\202 and
  package \201)SM(package-descrip)HY(tion)YH()ES(\202. If the package descrip)HY(tion)YH( is
  not spec)HY(i)HY(fied)YH(, it is assumed to be the same as the project descrip)HY(tion)YH(. It
  only makes sense to specify the )SM(package-descrip)HY(tion)YH()ES( value if
  the project and package are main)HY(tained)YH( sepa)HY(rately)YH(. A descrip)HY(tion)YH( can be
  provided either inline as a text frag)HY(ment)YH( or by refer)HY(ring)YH( to a file within a
  package \201for example, )SM(README)ES(\202, but not both. For
  )SM(package-descrip)HY(tion)YH(-file)ES( the recom)HY(mended)YH( file name is
  )SM(PACKAGE-README)ES( or )SM(README-PACKAGE)ES(.)EP(

  )0 P(In the web inter)HY(face)YH( \201)SM(brep)ES(\202 the descrip)HY(tion)YH( is displayed
  accord)HY(ing)YH( to its type. Currently, pre-format)HY(ted)YH( plain text, )R4 2 A(GitHub-Flavored Mark)HY(down)YH()EA(, and )R5 2 A(Common)HY(Mark)YH()EA( are supported with
  the follow)HY(ing)YH( )SM(*-type)ES( values, respec)HY(tively)YH(:)EP(

  ) 3 32 PR(text/plain
text/markdown;variant=GFM
text/markdown;variant=CommonMark)RP(

  )0 P(If just )SM(text/mark)HY(down)YH()ES( is spec)HY(i)HY(fied)YH(, then the GitHub-Flavored
  Mark)HY(down)YH( \201which is a super)HY(set)YH( of Common)HY(Mark)YH(\202 is assumed.)EP(

  )0 P(If a descrip)HY(tion)YH( type is not explic)HY(itly)YH( spec)HY(i)HY(fied)YH( and the descrip)HY(tion)YH( is
  spec)HY(i)HY(fied)YH( as )SM(*-file)ES(, then an attempt to derive the type from
  the file exten)HY(sion)YH( is made. Specif)HY(i)HY(cally)YH(, the )SM()BD(.md)ES()ES( and
  )SM()BD(.mark)HY(down)YH()ES()ES( exten)HY(sions)YH( are mapped to
  )SM(text/mark)HY(down)YH()ES(, the )SM()BD(.txt)ES()ES( and no exten)HY(sion)YH(
  are mapped to )SM(text/plain)ES(, and all other exten)HY(sions)YH( are treated
  as an unknown type, similar to unknown )SM(*-type)ES( values. And if a
  descrip)HY(tion)YH( is not spec)HY(i)HY(fied)YH( as a file, )SM(text/plain)ES( is
  assumed.)EP(

  )0 3 22 H(6.2.11)WB 97 Sn()WB 24 Sn( )SM(changes)ES()EH(

  ) 3 36 PR([changes]: <text>
[changes-file]: <path> [; <comment>]
[changes-type]: <text-type>)RP(

  )0 P(The descrip)HY(tion)YH( of changes in the release.)EP(

  )BR(
  )0 P(The tricky aspect is what happens if the upstream release stays the same
  \201and has, say, a )SM(NEWS)ES( file to which we point\202 but we need to
  make another package release, for example, to apply a crit)HY(i)HY(cal)YH( patch.)EP(
  )BR(

  )0 P(Multi)HY(ple)YH( )SM(changes)ES( values can be present which are all
  concate)HY(nated)YH( in the order spec)HY(i)HY(fied)YH(, that is, the first value is consid)HY(ered)YH(
  to be the most recent \201similar to )SM(ChangeLog)ES( and
  )SM(NEWS)ES( files\202. For example:)EP(

  ) 3 61 PR(changes: 1.2.3-2: applied upstream patch for critical bug bar
changes: 1.2.3-1: applied upstream patch for critical bug foo
changes-file: NEWS)RP(

  )0 P(Or:)EP(

  ) 10 47 PR(changes:
\200
1.2.3-2
  - applied upstream patch for critical bug bar
  - regenerated documentation

1.2.3-1
  - applied upstream patch for critical bug foo
\200
changes-file: NEWS)RP(

  )0 P(In the web inter)HY(face)YH( \201)SM(brep)ES(\202 the changes are displayed
  accord)HY(ing)YH( to their type, similar to the package descrip)HY(tion)YH( \201see the )0 23 1 A()SM(descrip)HY(tion)YH()ES()23 0 TN TL()Ec /AF f D( value for
  details\202. If the changes type is not explic)HY(itly)YH( spec)HY(i)HY(fied)YH(, then the types
  deduced for indi)HY(vid)HY(ual)YH( )SM(changes)ES( values must all be the same.)EP(

  )0 3 23 H(6.2.12)WB 98 Sn()WB 25 Sn( )SM(url)ES()EH(

  ) 1 26 PR([url]: <url> [; <comment>])RP(

  )0 P(The project home page URL.)EP(

  )0 3 24 H(6.2.13)WB 99 Sn()WB 26 Sn( )SM(doc-url)ES()EH(

  ) 1 30 PR([doc-url]: <url> [; <comment>])RP(

  )0 P(The project docu)HY(men)HY(ta)HY(tion)YH( URL.)EP(

  )0 3 25 H(6.2.14)WB 100 Sn()WB 27 Sn( )SM(src-url)ES()EH(

  ) 1 30 PR([src-url]: <url> [; <comment>])RP(

  )0 P(The project source repos)HY(i)HY(tory)YH( URL.)EP(

  )0 3 26 H(6.2.15)WB 101 Sn()WB 28 Sn( )SM(package-url)ES()EH(

  ) 1 34 PR([package-url]: <url> [; <comment>])RP(

  )0 P(The package home page URL. If not spec)HY(i)HY(fied)YH(, then assumed to be the same
  as )SM(url)ES(. It only makes sense to specify this value if the
  project and package are main)HY(tained)YH( sepa)HY(rately)YH(.)EP(

  )0 3 27 H(6.2.16)WB 102 Sn()WB 29 Sn( )SM(email)ES()EH(

  ) 1 30 PR([email]: <email> [; <comment>])RP(

  )0 P(The project email address. For example, a support mailing list.)EP(

  )0 3 28 H(6.2.17)WB 103 Sn()WB 30 Sn(
  )SM(package-email)ES()EH(

  ) 1 38 PR([package-email]: <email> [; <comment>])RP(

  )0 P(The package email address. If not spec)HY(i)HY(fied)YH(, then assumed to be the same
  as )SM(email)ES(. It only makes sense to specify this value if the
  project and package are main)HY(tained)YH( sepa)HY(rately)YH(.)EP(

  )0 3 29 H(6.2.18)WB 104 Sn()WB 31 Sn( )SM(build-email)ES()EH(

  ) 1 36 PR([build-email]: <email> [; <comment>])RP(

  )0 P(The build noti)HY(fi)HY(ca)HY(tion)YH( email address. It is used to send build result
  noti)HY(fi)HY(ca)HY(tions)YH( by auto)HY(mated)YH( build bots. If unspec)HY(i)HY(fied)YH(, then no build result
  noti)HY(fi)HY(ca)HY(tions)YH( for this package are sent by email.)EP(

  )BR(
  )0 P(For back)HY(wards)YH( compat)HY(i)HY(bil)HY(ity)YH( with exist)HY(ing)YH( pack)HY(ages)YH(, if it is spec)HY(i)HY(fied)YH(
  but empty, then this is the same as unspec)HY(i)HY(fied)YH(.)EP(
  )BR(

  )0 3 30 H(6.2.19)WB 105 Sn()WB 32 Sn(
  )SM(build-warning-email)ES()EH(

  ) 1 44 PR([build-warning-email]: <email> [; <comment>])RP(

  )0 P(The build warning noti)HY(fi)HY(ca)HY(tion)YH( email address. Unlike
  )SM(build-email)ES(, only build warning and error noti)HY(fi)HY(ca)HY(tions)YH( are
  sent to this email.)EP(

  )0 3 31 H(6.2.20)WB 106 Sn()WB 33 Sn(
  )SM(build-error-email)ES()EH(

  ) 1 42 PR([build-error-email]: <email> [; <comment>])RP(

  )0 P(The build error noti)HY(fi)HY(ca)HY(tion)YH( email address. Unlike
  )SM(build-email)ES(, only build error noti)HY(fi)HY(ca)HY(tions)YH( are sent to this
  email.)EP(

  )0 3 32 H(6.2.21)WB 107 Sn()WB 34 Sn( )SM(depends)ES()EH(

  ) 1 43 PR([depends]: [*] <alternatives> [; <comment>])RP(

  )0 P(Single-line form:)EP(

  ) 7 67 PR(<alternatives> = <alternative> [ '|' <alternative>]*
<alternative>  = <dependencies> ['?' <enable-cond>] [<reflect-var>]
<dependencies> = <dependency> | \200
    '{' <dependency> [<dependency>]* '}' [<version-constraint>]
<dependency>   = <name> [<version-constraint>]
<enable-cond>  = '\201' <buildfile-eval-expr> '\202'
<reflect-var>  = <config-var> '=' <value>)RP(

  )0 P(Multi-line form:)EP(

  ) 37 46 PR(<alternatives> =
  <alternative>[
  '|'
  <alternative>]*

<alternative>  =
  <dependencies>
  '{'
   [
     'enable' <enable-cond>
   ]

   [
     'require'
     '{'
        <buildfile-fragment>
     '}'

   ] | [

     'prefer'
     '{'
        <buildfile-fragment>
     '}'

     'accept' <accept-cond>
   ]

   [
     'reflect'
     '{')WR(
        <buildfile-fragment>
     '}'
   ]
  '}'

<accept-cond>  = '\201' <buildfile-eval-expr> '\202')RP(

  )0 P(The depen)HY(dency)YH( pack)HY(ages)YH(. The most common form of a depen)HY(dency)YH( is a
  package name followed by the optional version constraint. For example:)EP(

  ) 1 24 PR(depends: libhello ^1.0.0)RP(

  )0 P(See )0 5 1 A(Package Version Constraint)5 0 TN TL()Ec /AF f D(
  for the format and seman)HY(tics)YH( of the version constraint. Instead of a
  concrete value, the version in the constraint can also be spec)HY(i)HY(fied)YH( in terms
  of the depen)HY(dent)YH( package's version \201that is, its )0 15 1 A()SM(version)ES()15 0 TN TL()Ec /AF f D( value\202 using the
  special )SM($)ES( value. This mech)HY(a)HY(nism)YH( is primar)HY(ily)YH( useful when
  devel)HY(op)HY(ing)YH( related pack)HY(ages)YH( that should track each other's versions exactly
  or closely. For example:)EP(

  ) 3 24 PR(name: sqlite3
version: 3.18.2
depends: libsqlite3 == $)RP(

  )0 P(If multi)HY(ple)YH( pack)HY(ages)YH( are spec)HY(i)HY(fied)YH( within a single )SM(depends)ES(
  value, they must be grouped with )SM({})ES(. This can be useful if the
  pack)HY(ages)YH( share a version constraint. The group constraint applies to all the
  pack)HY(ages)YH( in the group that do not have their own constraint. For
  example:)EP(

  ) 1 68 PR(depends: { libboost-any libboost-log libboost-uuid ~1.77.1 } ~1.77.0)RP(

  )0 P(If the )SM(depends)ES( value starts with )SM(*)ES(, then it is
  a )I(build-time)ES( depen)HY(dency)YH(. Other)HY(wise)YH( it is )I(run-time)ES(. For
  example:)EP(

  ) 1 28 PR(depends: * byacc >= 20210619)RP(

  )BR(
  )0 P(Most of the build-time depen)HY(den)HY(cies)YH( are expected to be tools such as code
  gener)HY(a)HY(tors)YH(, so you can think of )SM(*)ES( as the executable mark
  printed by )SM(ls)ES(. An impor)HY(tant)YH( differ)HY(ence)YH( between the two kinds of
  depen)HY(den)HY(cies)YH( is that in case of cross-compi)HY(la)HY(tion)YH( a build-time depen)HY(dency)YH(
  must be built for the host machine, not the target. Build system modules are
  also build-time depen)HY(den)HY(cies)YH(.)EP(
  )BR(

  )0 P(Two special build-time depen)HY(dency)YH( names are recog)HY(nized)YH( and checked in an
  ad hoc manner: )SM(build2)ES( \201the )SM(build2)ES( build system\202
  and )SM(bpkg)ES( \201the )SM(build2)ES( package manager\202. This allows
  us to specify the minimum required build system and package manager
  versions, for example:)EP(

  ) 2 27 PR(depends: * build2 >= 0.15.0
depends: * bpkg >= 0.15.0)RP(

  )BR(
  )0 P(If you are devel)HY(op)HY(ing)YH( or pack)HY(ag)HY(ing)YH( a project that uses features from the
  not yet released \201staged\202 version of the )SM(build2)ES( toolchain, then
  you can use the pre-release version in the constraint. For example:)EP(

  ) 2 28 PR(depends: * build2 >= 0.16.0-
depends: * bpkg >= 0.16.0-)RP(
  )BR(

  )0 P(A depen)HY(dency)YH( can be condi)HY(tional)YH(, that is, it is only enabled if a certain
  condi)HY(tion)YH( is met. For example:)EP(

  ) 1 66 PR(depends: libposix-getopt ^1.0.0 ? \201$cxx.target.class == 'windows'\202)RP(

  )0 P(The condi)HY(tion)YH( after )SM(?)ES( inside )SM(\201\202)ES( is a
  )SM(build)HY(file)YH()ES( eval context expres)HY(sion)YH( that should eval)HY(u)HY(ate)YH( to
  )SM(true)ES( or )SM(false)ES(, as if it were spec)HY(i)HY(fied)YH( in the
  )SM(build)HY(file)YH()ES( )SM(if)ES( direc)HY(tive)YH( \201see )0 2 A(Expan)HY(sion)YH(
  and Quoting)EA( and )0 2 A(Condi)HY(tions)YH(
  \201)SM(if-else)ES(\202)EA( for details\202.)EP(

  )0 P(The condi)HY(tion)YH( expres)HY(sion)YH( is eval)HY(u)HY(ated)YH( after loading the package build
  system skele)HY(ton)YH(, that is, after loading its )SM(root.build)ES( \201see )0 6 1 A(Package Build System Skele)HY(ton)YH()6 0 TN TL()Ec /AF f D( for details\202. As
  a result, vari)HY(able)YH( values set by build system modules that are loaded in
  )SM(root.build)ES( as well as the package's config)HY(u)HY(ra)HY(tion)YH( \201includ)HY(ing)YH(
  previ)HY(ously)YH( reflected; see below\202 or computed values can be refer)HY(enced)YH( in
  depen)HY(dency)YH( condi)HY(tions)YH(. For example, given the follow)HY(ing)YH(
  )SM(root.build)ES(:)EP(

  ) 12 50 PR(# root.build

...

using cxx

# MinGW ships POSIX <getopt.h>.
#
need_getopt = \201$cxx.target.class == 'windows' && \200
               $cxx.target.system != 'mingw32'\202

config [bool] config.hello.regex ?= false)RP(

  )0 P(We could have the follow)HY(ing)YH( condi)HY(tional)YH( depen)HY(den)HY(cies)YH(:)EP(

  ) 3 69 PR(depends: libposix-getopt ^1.0.0 ? \201$need_getopt\202 ; Windows && !MinGW.
depends: libposix-regex  ^1.0.0 ? \201$config.hello.regex && \200
                                   $cxx.target.class == 'windows'\202)RP(

  )0 P(The first )SM(depends)ES( value in the above example also shows the
  use of an optional comment. It's a good idea to provide it if the condi)HY(tion)YH(
  is not suffi)HY(ciently)YH( self-explana)HY(tory)YH(.)EP(

  )0 P(A depen)HY(dency)YH( can "reflect" config)HY(u)HY(ra)HY(tion)YH( vari)HY(ables)YH( to the subse)HY(quent)YH(
  )SM(depends)ES( values and to the package config)HY(u)HY(ra)HY(tion)YH(. This can be
  used to signal whether a condi)HY(tional)YH( depen)HY(dency)YH( is enabled or which
  depen)HY(dency)YH( alter)HY(na)HY(tive)YH( was selected \201see below\202. The single-line form of
  )SM(depends)ES( can only reflect one config)HY(u)HY(ra)HY(tion)YH( vari)HY(able)YH(. For
  example:)EP(

  ) 3 38 PR(depends: libposix-regex ^1.0.0       \200
  ? \201$cxx.target.class == 'windows'\202 \200
  config.hello.external_regex=true)RP(

  ) 7 50 PR(# root.build

...

using cxx

config [bool] config.hello.external_regex ?= false)RP(

  ) 8 48 PR(# buildfile

libs =

if $config.hello.external_regex
  import libs += libposix-regex%lib{posix-regex}

exe{hello}: ... $libs)RP(

  )0 P(In the above example, if the )SM(hello)ES( package is built for
  Windows, then the depen)HY(dency)YH( on )SM(libposix-regex)ES( will be enabled
  and the package will be config)HY(ured)YH( with
  )SM(config.hello.exter)HY(nal)YH(_regex=true)ES(. This is used in the
  )SM(build)HY(file)YH()ES( to decide whether to import
  )SM(libposix-regex)ES(. While in this example it would have prob)HY(a)HY(bly)YH(
  been easier to just dupli)HY(cate)YH( the check for Windows in the
  )SM(build)HY(file)YH()ES( \201or, better yet, factor this check to
  )SM(root.build)ES( and share the result via a computed vari)HY(able)YH( between
  )SM(mani)HY(fest)YH()ES( and )SM(build)HY(file)YH()ES(\202, the reflect mech)HY(a)HY(nism)YH( is
  the only way to commu)HY(ni)HY(cate)YH( the selected depen)HY(dency)YH( alter)HY(na)HY(tive)YH( \201discussed
  next\202.)EP(

  )BR(
  )0 P(An attempt to set a reflected config)HY(u)HY(ra)HY(tion)YH( vari)HY(able)YH( that is over)HY(rid)HY(den)YH(
  by the user is an error. In a sense, config)HY(u)HY(ra)HY(tion)YH( vari)HY(ables)YH( that are used
  to reflect infor)HY(ma)HY(tion)YH( should be treated as the package's imple)HY(men)HY(ta)HY(tion)YH(
  details if the package manage)HY(ment)YH( is involved. If, however, the package is
  config)HY(ured)YH( without )SM(bpkg)ES('s involve)HY(ment)YH(, then these vari)HY(ables)YH(
  could reason)HY(ably)YH( be provided as user config)HY(u)HY(ra)HY(tion)YH(.)EP(

  )0 P(If you feel the need to allow a reflected config)HY(u)HY(ra)HY(tion)YH( vari)HY(able)YH( to also
  poten)HY(tially)YH( be supplied as user config)HY(u)HY(ra)HY(tion)YH(, then it's prob)HY(a)HY(bly)YH( a good
  sign that you should turn things around: make the vari)HY(able)YH( only
  user-config)HY(urable)YH( and use the enable condi)HY(tion)YH( instead of reflect.
  Alter)HY(na)HY(tively)YH(, you could try to recog)HY(nize)YH( and handle user over)HY(rides)YH( with the
  help of the )SM($config.origin\201\202)ES( func)HY(tion)YH( discussed in )0 7 1 A(Depen)HY(dency)YH( Config)HY(u)HY(ra)HY(tion)YH( Nego)HY(ti)HY(a)HY(tion)YH()7 0 TN TL()Ec /AF f D(.)EP(
  )BR(

  )0 P(While multi)HY(ple)YH( )SM(depends)ES( values are used to specify multi)HY(ple)YH(
  pack)HY(ages)YH( with the )I(AND)ES( seman)HY(tics)YH(, inside )SM(depends)ES( we can
  specify multi)HY(ple)YH( pack)HY(ages)YH( \201or groups of pack)HY(ages)YH(\202 with the )I(OR)ES(
  seman)HY(tics)YH(, called depen)HY(dency)YH( alter)HY(na)HY(tives)YH(. For example:)EP(

  ) 1 53 PR(depends: libmysqlclient >= 5.0.3 | libmariadb ^10.2.2)RP(

  )0 P(When select)HY(ing)YH( an alter)HY(na)HY(tive)YH(, )SM(bpkg)ES( only consid)HY(ers)YH( pack)HY(ages)YH(
  that are either already present in the build config)HY(u)HY(ra)HY(tion)YH( or are selected
  as depen)HY(den)HY(cies)YH( by other pack)HY(ages)YH(, picking the first alter)HY(na)HY(tive)YH( with a
  satis)HY(fac)HY(tory)YH( version constraint and an accept)HY(able)YH( config)HY(u)HY(ra)HY(tion)YH(. As a
  result, the order of alter)HY(na)HY(tives)YH( expresses a pref)HY(er)HY(ence)YH(. If, however, this
  does not yield a suit)HY(able)YH( alter)HY(na)HY(tive)YH(, then )SM(bpkg)ES( fails asking
  the user to make the selec)HY(tion)YH(.)EP(

  )0 P(For example, if the package with the above depen)HY(dency)YH( is called
  )SM(libhello)ES( and we build it in a config)HY(u)HY(ra)HY(tion)YH( that already has
  both )SM(libmysql)HY(client)YH()ES( and )SM(libmari)HY(adb)YH()ES(, then
  )SM(bpkg)ES( will select )SM(libmysql)HY(client)YH()ES(, provided the
  exist)HY(ing)YH( version satis)HY(fies)YH( the version constraint. If, however, there are no
  exist)HY(ing)YH( pack)HY(ages)YH( in the build config)HY(u)HY(ra)HY(tion)YH( and we attempt to build just
  )SM(libhello)ES(, then )SM(bpkg)ES( will fail asking the user to
  pick one of the alter)HY(na)HY(tives)YH(. If we wanted to make )SM(bpkg)ES( select
  )SM(libmari)HY(adb)YH()ES( we could run:)EP(

  ) 1 33 PR($ bpkg build libhello ?libmariadb)RP(

  )BR(
  )0 P(While )SM(bpkg)ES('s refusal to auto)HY(mat)HY(i)HY(cally)YH( pick an alter)HY(na)HY(tive)YH(
  that would require build)HY(ing)YH( a new package may at first seem unfriendly to
  the user, prac)HY(ti)HY(cal)YH( expe)HY(ri)HY(ence)YH( shows that such extra user-friend)HY(li)HY(ness)YH( would
  rarely justify the poten)HY(tial)YH( confu)HY(sion)YH( that it may cause.)EP(

  )0 P(Also note that it's not only the user that can pick a certain alter)HY(na)HY(tive)YH(
  but also a depen)HY(dent)YH( package. Contin)HY(u)HY(ing)YH( with the above example, if we had
  )SM(hello)ES( that depended on )SM(libhello)ES( but only supported
  MariaDB \201or provided a config)HY(u)HY(ra)HY(tion)YH( vari)HY(able)YH( to explic)HY(itly)YH( select the
  database\202, then we could have the follow)HY(ing)YH( in its
  )SM(mani)HY(fest)YH()ES(:)EP(

  ) 2 55 PR(depends: libmariadb       ; Select MariaDB in libhello.
depends: libhello ^1.0.0)RP(
  )BR(

  )0 P(Depen)HY(dency)YH( alter)HY(na)HY(tives)YH( can be combined with all the other features
  discussed above: groups, condi)HY(tional)YH( depen)HY(den)HY(cies)YH(, and reflect. As mentioned
  earlier, reflect is the only way to commu)HY(ni)HY(cate)YH( the selec)HY(tion)YH( to subse)HY(quent)YH(
  )SM(depends)ES( values and the package config)HY(u)HY(ra)HY(tion)YH(. For example:)EP(

  ) 5 65 PR(depends: libmysqlclient >= 5.0.3 config.hello.db='mysql'      | \200
         libmariadb ^10.2.2 ? \201$cxx.target.class != 'windows'\202  \200
           config.hello.db='mariadb'

depends: libz ^1.2.1100 ? \201$config.hello.db == 'mysql'\202)RP(

  )0 P(If an alter)HY(na)HY(tive)YH( is condi)HY(tional)YH( and the condi)HY(tion)YH( eval)HY(u)HY(ates)YH( to
  )SM(false)ES(, then this alter)HY(na)HY(tive)YH( is not consid)HY(ered)YH(. If all but one
  alter)HY(na)HY(tive)YH( are disabled due to condi)HY(tions)YH(, then this becomes an ordi)HY(nary)YH(
  depen)HY(dency)YH(. If all the alter)HY(na)HY(tives)YH( are disabled due to condi)HY(tions)YH(, then the
  entire depen)HY(dency)YH( is disabled. For example:)EP(

  ) 2 68 PR(depends: libmysqlclient >= 5.0.3 ? \201$config.hello.db == 'mysql'\202 | \200
         libmariadb ^10.2.2      ? \201$config.hello.db == 'mariadb'\202)RP(

  )0 P(While there is no need to use the depen)HY(dency)YH( alter)HY(na)HY(tives)YH( in the above
  example \201since the alter)HY(na)HY(tives)YH( are mutu)HY(ally)YH( exclu)HY(sive)YH(\202, it makes for good
  docu)HY(men)HY(ta)HY(tion)YH( of intent.)EP(

  )0 P(Besides as a single line, the )SM(depends)ES( value can also be
  spec)HY(i)HY(fied)YH( in a multi-line form which, besides poten)HY(tially)YH( better
  read)HY(abil)HY(ity)YH(, provides addi)HY(tional)YH( func)HY(tion)HY(al)HY(ity)YH(. In the multi-line form, each
  depen)HY(dency)YH( alter)HY(na)HY(tive)YH( occu)HY(pies)YH( a sepa)HY(rate)YH( line and )SM(|)ES( can be
  spec)HY(i)HY(fied)YH( either at the end of the depen)HY(dency)YH( alter)HY(na)HY(tive)YH( line or on a
  sepa)HY(rate)YH( line. For example:)EP(

  ) 5 57 PR(depends:
\200
libmysqlclient >= 5.0.3 ? \201$config.hello.db == 'mysql'\202 |
libmariadb ^10.2.2      ? \201$config.hello.db == 'mariadb'\202
\200)RP(

  )0 P(A depen)HY(dency)YH( alter)HY(na)HY(tive)YH( can be option)HY(ally)YH( followed by a block contain)HY(ing)YH(
  a number of clauses. The )SM(enable)ES( clause is the alter)HY(na)HY(tive)YH( way
  to specify the condi)HY(tion)YH( for a condi)HY(tional)YH( depen)HY(dency)YH( while the
  )SM(reflect)ES( clause is the alter)HY(na)HY(tive)YH( way to specify the reflected
  config)HY(u)HY(ra)HY(tion)YH( vari)HY(able)YH(. The block may also contain )SM(#)ES(-style
  comments, similar to )SM(build)HY(file)YH()ES(. For example:)EP(

  ) 22 41 PR(depends:
\200
libmysqlclient >= 5.0.3
{
  reflect
  {
    config.hello.db = 'mysql'
  }
}
|
libmariadb ^10.2.2
{
  # TODO: MariaDB support on Windows.
  #
  enable \201$cxx.target.class != 'windows'\202

  reflect
  {
    config.hello.db = 'mariadb'
  }
}
\200)RP(

  )0 P(While the )SM(enable)ES( clause is essen)HY(tially)YH( the same as its
  inline )SM(?)ES( variant, the )SM(reflect)ES( clause is an
  arbi)HY(trary)YH( )SM(build)HY(file)YH()ES( frag)HY(ment)YH( that can have more complex logic
  and assign multi)HY(ple)YH( config)HY(u)HY(ra)HY(tion)YH( vari)HY(ables)YH(. For example:)EP(

  ) 10 41 PR(libmariadb ^10.2.2
{
  reflect
  {
    if \201$cxx.target.class == 'windows'\202
      config.hello.db = 'mariadb-windows'
    else
      config.hello.db = 'mariadb-posix'
  }
})RP(

  )0 P(The multi-line form also allows us to express our pref)HY(er)HY(ences)YH( and
  require)HY(ments)YH( for the depen)HY(dency)YH( config)HY(u)HY(ra)HY(tion)YH(. If all we need is to set one
  or more )SM(bool)ES( config)HY(u)HY(ra)HY(tion)YH( vari)HY(ables)YH( to )SM(true)ES(
  \201which usually trans)HY(lates)YH( to enabling one or more features\202, then we can use
  the )SM(require)ES( clause. For example:)EP(

  ) 10 39 PR(libmariadb ^10.2.2
{
  require
  {
    config.libmariadb.cache = true

    if \201$cxx.target.class != 'windows'\202
      config.libmariadb.tls = true
  }
})RP(

  )0 P(For more complex depen)HY(dency)YH( config)HY(u)HY(ra)HY(tions)YH( instead of
  )SM(require)ES( we can use the )SM(prefer)ES( and
  )SM(accept)ES( clauses. The )SM(prefer)ES( clause can set
  config)HY(u)HY(ra)HY(tion)YH( vari)HY(ables)YH( of any type and to any value in order to express the
  package's preferred config)HY(u)HY(ra)HY(tion)YH( while the )SM(accept)ES( condi)HY(tion)YH(
  eval)HY(u)HY(ates)YH( whether any given config)HY(u)HY(ra)HY(tion)YH( is accept)HY(able)YH(. If used instead of
  )SM(require)ES(, both )SM(prefer)ES( and )SM(accept)ES( must
  be present. For example:)EP(

  ) 16 66 PR(libmariadb ^10.2.2
{
  # We prefer the cache but can work without it.
  # We need the buffer of at least 4KB.
  #
  prefer
  {
    config.libmariadb.cache = true

    config.libmariadb.buffer = \201$config.libmariadb.buffer < 4096 \200
                                ? 4096                           \200
                                : $config.libmariadb.buffer\202
  }

  accept \201$config.libmariadb.buffer >= 4096\202
})RP(

  )BR(
  )0 P(The )SM(require)ES( clause is essen)HY(tially)YH( a short)HY(cut)YH( for spec)HY(i)HY(fy)HY(ing)YH(
  the )SM(prefer)ES(/)SM(accept)ES( clauses where the
  )SM(accept)ES( condi)HY(tion)YH( simply veri)HY(fies)YH( all the vari)HY(able)YH( values
  assigned in the )SM(prefer)ES( clause. It is, however, further
  restricted to the common case of only setting )SM(bool)ES( vari)HY(ables)YH(
  and only to )SM(true)ES( to allow addi)HY(tional)YH( opti)HY(miza)HY(tions)YH( during the
  config)HY(u)HY(ra)HY(tion)YH( nego)HY(ti)HY(a)HY(tion)YH(.)EP(
  )BR(

  )0 P(The )SM(require)ES( and )SM(prefer)ES( clauses are arbi)HY(trary)YH(
  )SM(build)HY(file)YH()ES( frag)HY(ments)YH( similar to )SM(reflect)ES( while the
  )SM(accept)ES( clause is a )SM(build)HY(file)YH()ES( eval context
  expres)HY(sion)YH( that should eval)HY(u)HY(ate)YH( to )SM(true)ES( or )SM(false)ES(,
  similar to )SM(enable)ES(.)EP(

  )0 P(Given the )SM(require)ES( and
  )SM(prefer)ES(/)SM(accept)ES( clauses of all the depen)HY(dents)YH( of a
  partic)HY(u)HY(lar)YH( depen)HY(dency)YH(, )SM(bpkg)ES( tries to nego)HY(ti)HY(ate)YH( a config)HY(u)HY(ra)HY(tion)YH(
  accept)HY(able)YH( to all of them as described in )0 7 1 A(Depen)HY(dency)YH( Config)HY(u)HY(ra)HY(tion)YH( Nego)HY(ti)HY(a)HY(tion)YH()7 0 TN TL()Ec /AF f D(.)EP(

  )0 P(All the clauses are eval)HY(u)HY(ated)YH( in the spec)HY(i)HY(fied)YH( order, that is,
  )SM(enable)ES(, then )SM(require)ES( or
  )SM(prefer)ES(/)SM(accept)ES(, and finally )SM(reflect)ES(,
  with the \201nego)HY(ti)HY(ated)YH(, in case of )SM(prefer)ES(\202 config)HY(u)HY(ra)HY(tion)YH( values
  set by preced)HY(ing)YH( clauses avail)HY(able)YH( for exam)HY(i)HY(na)HY(tion)YH( by the subse)HY(quent)YH( clauses
  in this )SM(depends)ES( value as well as in all the subse)HY(quent)YH( ones.
  For example:)EP(

  ) 23 66 PR(depends:
\200
libmariadb ^10.2.2
{
  prefer
  {
    config.libmariadb.cache = true

    config.libmariadb.buffer = \201$config.libmariadb.buffer < 4096 \200
                                ? 4096                           \200
                                : $config.libmariadb.buffer\202
  }

  accept \201$config.libmariadb.buffer >= 4096\202

  reflect
  {
    config.hello.buffer = $config.libmariadb.buffer
  }
}
\200

depends: liblru ^1.0.0 ? \201$config.libmariadb.cache\202)RP(

  )0 P(The above example also high)HY(lights)YH( the differ)HY(ence)YH( between the
  )SM(require)ES(/)SM(prefer)ES( and )SM(reflect)ES( clauses
  that is easy to mix up: in )SM(require)ES(/)SM(prefer)ES( we set
  the depen)HY(dency)YH('s while in )SM(reflect)ES( we set the depen)HY(dent)YH('s
  config)HY(u)HY(ra)HY(tion)YH( vari)HY(ables)YH(.)EP(

  )0 3 33 H(6.2.22)WB 108 Sn()WB 35 Sn( )SM(requires)ES()EH(

  ) 9 69 PR([requires]: [*] <alternatives> [; <comment>]

<alternatives> = <alternative> [ '|' <alternative>]*
<alternative>  = <requirements> ['?' [<enable-cond>]] [<reflect-var>]
<requirements> = [<requirement>] | \200
    '{' <requirement> [<requirement>]* '}' [<version-constraint>]
<requirement>  = <name> [<version-constraint>]
<enable-cond>  = '\201' <buildfile-eval-expr> '\202'
<reflect-var>  = <config-var> '=' <value>)RP(

  )0 P(The package require)HY(ments)YH( other than other pack)HY(ages)YH(. Such require)HY(ments)YH( are
  normally checked in an ad hoc way during package config)HY(u)HY(ra)HY(tion)YH( by its
  )SM(build)HY(files)YH()ES( and the primary purpose of captur)HY(ing)YH( them in the
  mani)HY(fest)YH( is for docu)HY(men)HY(ta)HY(tion)YH(.  However, there are some special require)HY(ments)YH(
  that are recog)HY(nized)YH( by the tooling \201see below\202. For example:)EP(

  ) 3 62 PR(requires: c++11
requires: linux | windows | macos
requires: libc++ ? \201$macos\202 ; libc++ if using Clang on Mac OS.)RP(

  )0 P(The format of the )SM(requires)ES( value is similar to )0 34 1 A()SM(depends)ES()34 0 TN TL()Ec /AF f D( with the follow)HY(ing)YH(
  differ)HY(ences)YH(. The require)HY(ment)YH( name \201with or without version constraint\202 can
  mean anything \201but must still be a valid package name\202. Only the
  )SM(enable)ES( and )SM(reflect)ES( clauses are permit)HY(ted)YH(. There is
  a simpli)HY(fied)YH( syntax with either the require)HY(ment)YH( or enable condi)HY(tion)YH( or both
  being empty and where the comment carries all the infor)HY(ma)HY(tion)YH( \201and is thus
  manda)HY(tory)YH(\202. For example:)EP(

  ) 4 40 PR(requires: ; X11 libs.
requires: ? \201$windows\202 ; Only 64-bit.
requires: ? ; Only 64-bit if on Windows.
requires: x86_64 ? ; Only if on Windows.)RP(

  )0 P(Note that )SM(requires)ES( can also be used to specify depen)HY(den)HY(cies)YH(
  on system libraries, that is, the ones not to be pack)HY(aged)YH(. In this case it
  may make sense to also specify the version constraint. For example:)EP(

  ) 1 25 PR(requires: libx11 >= 1.7.2)RP(

  )0 P(To assist poten)HY(tial)YH( future auto)HY(mated)YH( process)HY(ing)YH(, the follow)HY(ing)YH(
  pre-defined require)HY(ment)YH( names should be used for the common
  require)HY(ments)YH(:)EP(

  ) 7 5 PR(c++98
c++03
c++11
c++14
c++17
c++20
c++23)RP(

  ) 7 7 PR(posix
linux
macos
freebsd
openbsd
netbsd
windows)RP(

  ) 3 59 PR(gcc[_X.Y.Z]  ; For example: gcc_6, gcc_4.9, gcc_5.0.0
clang[_X.Y]  ; For example: clang_6, clang_3.4, clang_3.4.1
msvc[_N.U]   ; For example: msvc_14, msvc_15.3)RP(

  )0 P(The follow)HY(ing)YH( pre-defined require)HY(ment)YH( names are recog)HY(nized)YH( by auto)HY(mated)YH(
  build bots:)EP(

  ) 2 9 PR(bootstrap
host)RP(

  )0 P(The )SM(boot)HY(strap)YH()ES( value should be used to mark build system
  modules that require boot)HY(strap)HY(ping)YH(. The )SM(host)ES( value should be
  used to mark pack)HY(ages)YH(, such source code gener)HY(a)HY(tors)YH(, that are normally
  spec)HY(i)HY(fied)YH( as build-time depen)HY(den)HY(cies)YH( by other pack)HY(ages)YH( and there)HY(fore)YH( should
  be built in a host config)HY(u)HY(ra)HY(tion)YH(. See the )0 2 A()SM(bbot)ES(
  docu)HY(men)HY(ta)HY(tion)YH()EA( for details.)EP(

  )0 3 34 H(6.2.23)WB 109 Sn()WB 36 Sn(
  )SM(tests)ES(, )SM(exam)HY(ples)YH()ES(, )SM(bench)HY(marks)YH()ES()EH(

  ) 7 63 PR([tests]: [*] <package> ['?' <enable-cond>] [<reflect-var>]
[examples]: [*] <package> ['?' <enable-cond>] [<reflect-var>]
[benchmarks]: [*] <package> ['?' <enable-cond>] [<reflect-var>]

<package>     = <name> [<version-constraint>]
<enable-cond> = '\201' <buildfile-eval-expr> '\202'
<reflect-var> = <config-var> '=' <value>)RP(

  )0 P(Sepa)HY(rate)YH( tests, exam)HY(ples)YH(, and bench)HY(marks)YH( pack)HY(ages)YH(. If the value starts
  with )SM(*)ES(, then the primary package is a )I(build-time)ES(
  depen)HY(dency)YH( for the spec)HY(i)HY(fied)YH( package. Other)HY(wise)YH( it is )I(run-time)ES(. See
  the )0 34 1 A()SM(depends)ES()34 0 TN TL()Ec /AF f D( value for
  details on )I(build-time)ES( depen)HY(den)HY(cies)YH(.)EP(

  )0 P(These pack)HY(ages)YH( are built and tested by auto)HY(mated)YH( build bots together with
  the primary package \201see the )0 2 A()SM(bbot)ES(
  docu)HY(men)HY(ta)HY(tion)YH()EA( for details\202. This, in partic)HY(u)HY(lar)YH(, implies that these
  pack)HY(ages)YH( must be avail)HY(able)YH( from the primary package's repos)HY(i)HY(tory)YH( or its
  comple)HY(ment)YH( repos)HY(i)HY(to)HY(ries)YH(, recur)HY(sively)YH(. The recom)HY(mended)YH( naming conven)HY(tion)YH( for
  these pack)HY(ages)YH( is the primary package name followed by )SM(-tests)ES(,
  )SM(-exam)HY(ples)YH()ES(, or )SM(-bench)HY(marks)YH()ES(, respec)HY(tively)YH(. For
  example:)EP(

  ) 3 24 PR(name: hello
tests: hello-tests
examples: hello-examples)RP(

  )0 P(See )0 5 1 A(Package Version Constraint)5 0 TN TL()Ec /AF f D(
  for the format and seman)HY(tics)YH( of the optional version constraint. Instead of
  a concrete value, it can also be spec)HY(i)HY(fied)YH( in terms of the primary package's
  version \201see the )0 34 1 A()SM(depends)ES()34 0 TN TL()Ec /AF f D( value for
  details\202, for example:)EP(

  ) 1 21 PR(tests: hello-tests ~$)RP(

  )0 P(Note that normally the tests, etc., pack)HY(ages)YH( them)HY(selves)YH( \201we'll call them
  all test pack)HY(ages)YH( for short\202 do not have an explicit depen)HY(dency)YH( on the
  primary package \201in a sense, the primary package has a special test
  depen)HY(dency)YH( on them\202. They are also not built by auto)HY(mated)YH( build bots
  sepa)HY(rately)YH( from their primary package but may have their own build
  constraints, for example, to be excluded from build)HY(ing)YH( on some plat)HY(forms)YH(
  where the primary package is still built, for example:)EP(

  ) 2 17 PR(name: hello-tests
builds: -windows)RP(

  )0 P(Also note that a test package may poten)HY(tially)YH( be used as a test
  depen)HY(dency)YH( for multi)HY(ple)YH( primary pack)HY(ages)YH(. In this case a primary package
  normally needs to reflect to the test package the fact that it is the one
  being tested. This can be achieved by setting the test package's
  config)HY(u)HY(ra)HY(tion)YH( vari)HY(able)YH( \201see the )0 34 1 A()SM(depends)ES()34 0 TN TL()Ec /AF f D( value for details
  on reflec)HY(tion)YH(\202. For example:)EP(

  ) 5 52 PR(name: hello-foo
tests: hello-tests config.hello_tests.test=hello-foo

name: hello-bar
tests: hello-tests config.hello_tests.test=hello-bar)RP(

  )0 P(If it is plau)HY(si)HY(ble)YH( that the test package may also be built explic)HY(itly)YH(,
  for example, to achieve a more compli)HY(cated)YH( setup \201test multi)HY(ple)YH( main
  pack)HY(ages)YH( simul)HY(ta)HY(ne)HY(ously)YH(, etc\202, then the test depen)HY(den)HY(cies)YH( need to be made
  condi)HY(tional)YH( in the primary pack)HY(ages)YH( so that the explicit config)HY(u)HY(ra)HY(tion)YH( is
  preferred over the reflec)HY(tions)YH( \201see the )0 34 1 A()SM(depends)ES()34 0 TN TL()Ec /AF f D( value for details
  on condi)HY(tional)YH( depen)HY(den)HY(cies)YH(\202. For example:)EP(

  ) 7 72 PR(name: hello-foo
tests: hello-tests \200
? \201!$defined\201config.hello_tests.test\202\202 config.hello_tests.test=hello-foo

name: hello-bar
tests: hello-tests \200
? \201!$defined\201config.hello_tests.test\202\202 config.hello_tests.test=hello-bar)RP(

  )0 P(Note that in contrast to the )0 34 1 A()SM(depends)ES()34 0 TN TL()Ec /AF f D( value, both the
  reflec)HY(tion)YH( and condi)HY(tion)YH( refer to the vari)HY(ables)YH( defined not by the package
  which spec)HY(i)HY(fies)YH( the test depen)HY(dency)YH( \201primary package\202, but the package such
  a depen)HY(dency)YH( refers to \201test package\202.)EP(

  )0 3 35 H(6.2.24)WB 110 Sn()WB 37 Sn( )SM(builds)ES()EH(

  ) 5 70 PR([builds]: [<class-uset> ':' ] [<class-expr>] [; <comment>]

<class-uset> = <class-name> [ <class-name>]*
<class-expr> = <class-term> [ <class-term>]*
<class-term> = \201'+'|'-'|'&'\202['!']\201<class-name> | '\201' <class-expr> '\202'\202)RP(

  )0 P(The common package build target config)HY(u)HY(ra)HY(tions)YH(. They specify the target
  config)HY(u)HY(ra)HY(tion)YH( classes the package should or should not be built for by
  auto)HY(mated)YH( build bots, unless over)HY(rid)HY(den)YH( by a package config)HY(u)HY(ra)HY(tion)YH(-specific
  value \201see )0 41 1 A()SM(*-build-config)ES()41 0 TN TL()Ec /AF f D( for
  details\202. For example:)EP(

  ) 1 16 PR(builds: -windows)RP(

  )0 P(Build target config)HY(u)HY(ra)HY(tions)YH( can belong to multi)HY(ple)YH( classes with their
  names and seman)HY(tics)YH( varying between differ)HY(ent)YH( build bot deploy)HY(ments)YH(.
  However, the pre-defined )SM(none)ES(, )SM(default)ES(,
  )SM(all)ES(, )SM(host)ES(, and )SM(build2)ES( classes are
  always provided. If no )SM(builds)ES( value is spec)HY(i)HY(fied)YH( in the package
  mani)HY(fest)YH(, then the )SM(default)ES( class is assumed.)EP(

  )BR(
  )0 P(A target config)HY(u)HY(ra)HY(tion)YH( class can also derive from another class in which
  case config)HY(u)HY(ra)HY(tions)YH( that belong to the derived class are treated as also
  belong)HY(ing)YH( to the base class \201or classes, recur)HY(sively)YH(\202. See the Build
  Config)HY(u)HY(ra)HY(tions)YH( page of the build bot deploy)HY(ment)YH( for the list of avail)HY(able)YH(
  target config)HY(u)HY(ra)HY(tions)YH( and their classes.)EP(
  )BR(

  )0 P(The )SM(builds)ES( value consists of an optional under)HY(ly)HY(ing)YH( class
  set \201)SM(<class-uset>)ES(\202 followed by a class set expres)HY(sion)YH(
  \201)SM(<class-expr>)ES(\202. The under)HY(ly)HY(ing)YH( set is a space-sepa)HY(rated)YH( list
  of class names that define the set of build target config)HY(u)HY(ra)HY(tions)YH( to
  consider. If not spec)HY(i)HY(fied)YH(, then all the config)HY(u)HY(ra)HY(tions)YH( belong)HY(ing)YH( to the
  )SM(default)ES( class are assumed. The class set expres)HY(sion)YH( can then be
  used to exclude certain config)HY(u)HY(ra)HY(tions)YH( from this initial set.)EP(

  )0 P(The class expres)HY(sion)YH( is a space-sepa)HY(rated)YH( list of terms that are
  eval)HY(u)HY(ated)YH( from left to right. The first char)HY(ac)HY(ter)YH( of each term deter)HY(mines)YH(
  whether the build target config)HY(u)HY(ra)HY(tion)YH( that belong to its set are added to
  \201)SM(+)ES(\202, subtracted from \201)SM(-)ES(\202, or inter)HY(sected)YH( with
  \201)SM(&)ES(\202 the current set. If the second char)HY(ac)HY(ter)YH( in the term is
  )SM(!)ES(, then its set of config)HY(u)HY(ra)HY(tion)YH( is inverted against the
  under)HY(ly)HY(ing)YH( set. The term itself can be either the class name or a
  paren)HY(the)HY(sized)YH( expres)HY(sion)YH(. Some exam)HY(ples)YH( \201based on the )R6 2 A(cppget.org)EA( deploy)HY(ment)YH(\202:)EP(

  ) 14 70 PR(builds: none                          ; None.
builds: all                           ; All \201suitable for libraries\202.
builds: all : &host                   ; All host \201suitable for tools\202.
builds: default                       ; All default.
builds: default : &host               ; Default host.
builds: default legacy                ; All default and legacy.
builds: default legacy : &host        ; Default and legacy host.
builds: -windows                      ; Default except Windows.
builds: all : -windows                ; All except Windows.
builds: all : -mobile                 ; All except mobile.
builds: all : &gcc                    ; All with GCC only.
builds: all : &gcc-8+                 ; All with GCC 8 and up only.
builds: all : &gcc -optimized         ; All GCC without optimization.
builds: all : &gcc &\201 +linux +macos \202 ; All GCC on Linux and Mac OS.)RP(

  )0 P(Notice that the colon and paren)HY(the)HY(ses)YH( must be sepa)HY(rated)YH( with spaces from
  both preced)HY(ing)YH( and follow)HY(ing)YH( terms.)EP(

  )0 P(Multi)HY(ple)YH( )SM(builds)ES( values are eval)HY(u)HY(ated)YH( in the order spec)HY(i)HY(fied)YH(
  and as if they were all part of a single expres)HY(sion)YH(. Only the first value
  may specify the under)HY(ly)HY(ing)YH( set. The main reason for having multi)HY(ple)YH( values
  is to provide indi)HY(vid)HY(ual)YH( reasons \201as the )SM(builds)ES( value comments\202
  for differ)HY(ent)YH( parts of the expres)HY(sion)YH(. For example:)EP(

  ) 3 67 PR(builds: default experimental ; Only modern compilers are supported.
builds: -gcc                 ; GCC is not supported.
builds: -clang               ; Clang is not supported.)RP(

  ) 2 61 PR(builds: default
builds: -\201 +macos &gcc\202      ; Homebrew GCC is not supported.)RP(

  )BR(
  )0 P(The )SM(builds)ES( value comments are used by the web inter)HY(face)YH(
  \201)SM(brep)ES(\202 to display the reason for the build target config)HY(u)HY(ra)HY(tion)YH(
  exclu)HY(sion)YH(.)EP(
  )BR(

  )0 P(After eval)HY(u)HY(at)HY(ing)YH( all the )SM(builds)ES( values, the final
  config)HY(u)HY(ra)HY(tion)YH( set can be further fine-tuned using the )0 38 1 A()SM(build-{include,
  exclude})ES()38 0 TN TL()Ec /AF f D( patterns.)EP(

  )0 3 36 H(6.2.25)WB 111 Sn()WB 38 Sn( )SM(build-{include,
  exclude})ES()EH(

  ) 2 50 PR([build-include]: <config>[/<target>] [; <comment>]
[build-exclude]: <config>[/<target>] [; <comment>])RP(

  )0 P(The common package build inclu)HY(sions)YH( and exclu)HY(sions)YH(. The
  )SM(build-include)ES( and )SM(build-exclude)ES( values further
  reduce the config)HY(u)HY(ra)HY(tion)YH( set produced by eval)HY(u)HY(at)HY(ing)YH( the )0 37 1 A()SM(builds)ES()37 0 TN TL()Ec /AF f D( values. The
  )I(config)ES( and )I(target)ES( values are filesys)HY(tem)YH( wild)HY(card)YH( patterns
  which are matched against the build target config)HY(u)HY(ra)HY(tion)YH( names and target
  names \201see the )0 2 A()SM(bbot)ES(
  docu)HY(men)HY(ta)HY(tion)YH()EA( for details\202. In partic)HY(u)HY(lar)YH(, the )SM(*)ES( wild)HY(card)YH(
  matches zero or more char)HY(ac)HY(ters)YH( within the name compo)HY(nent)YH( while the
  )SM(**)ES( sequence matches across the compo)HY(nents)YH(. Plus, wild)HY(card)YH(-only
  pattern compo)HY(nents)YH( match absent name compo)HY(nents)YH(. For example:)EP(

  ) 3 72 PR(build-exclude: windows**    # matches windows_10-msvc_15
build-exclude: macos*-gcc** # matches macos_10.13-gcc_8.1-O3
build-exclude: linux-gcc*-* # matches linux-gcc_8.1 and linux-gcc_8.1-O3)RP(

  )0 P(The exclu)HY(sion)YH( and inclu)HY(sion)YH( patterns are applied in the order spec)HY(i)HY(fied)YH(
  with the first match deter)HY(min)HY(ing)YH( whether the package will be built for this
  config)HY(u)HY(ra)HY(tion)YH( and target. If none of the patterns match \201or none we
  spec)HY(i)HY(fied)YH(\202, then the package is built.)EP(

  )0 P(As an example, the follow)HY(ing)YH( value will exclude 32-bit builds for the
  MSVC 14 compiler:)EP(

  ) 1 50 PR(build-exclude: *-msvc_14**/i?86-** ; Linker crash.)RP(

  )0 P(As another example, the follow)HY(ing)YH( pair of values will make sure that a
  package is only built on Linux:)EP(

  ) 2 44 PR(build-include: linux**
build-exclude: ** ; Only supported on Linux.)RP(

  )0 P(Note that the comment of the match)HY(ing)YH( exclu)HY(sion)YH( is used by the web
  inter)HY(face)YH( \201)SM(brep)ES(\202 to display the reason for the build target
  config)HY(u)HY(ra)HY(tion)YH( exclu)HY(sion)YH(.)EP(

  )0 3 37 H(6.2.26)WB 112 Sn()WB 39 Sn(
  )SM(build-auxil)HY(iary)YH()ES()EH(

  ) 2 48 PR([build-auxiliary]: <config> [; <comment>]
[build-auxiliary-<name>]: <config> [; <comment>])RP(

  )0 P(The common package build auxil)HY(iary)YH( config)HY(u)HY(ra)HY(tions)YH(. The
  )SM(build-auxil)HY(iary)YH()ES( values can be used to specify auxil)HY(iary)YH(
  config)HY(u)HY(ra)HY(tions)YH( that provide addi)HY(tional)YH( compo)HY(nents)YH( which are required for
  build)HY(ing)YH( or testing a package and that are impos)HY(si)HY(ble)YH( or imprac)HY(ti)HY(cal)YH( to
  provide as part of the build config)HY(u)HY(ra)HY(tion)YH( itself. For example, a package
  may need access to a suit)HY(ably)YH( config)HY(ured)YH( database, such as Post)HY(greSQL)YH(, in
  order to run its tests. Currently no more than )SM(9)ES( auxil)HY(iary)YH(
  config)HY(u)HY(ra)HY(tions)YH( can be spec)HY(i)HY(fied)YH(.)EP(

  )0 P(The )I(config)ES( value is a filesys)HY(tem)YH( wild)HY(card)YH( patterns which is
  matched against the auxil)HY(iary)YH( config)HY(u)HY(ra)HY(tion)YH( names \201which are in turn derived
  from auxil)HY(iary)YH( machine names; see the )0 2 A()SM(bbot)ES(
  docu)HY(men)HY(ta)HY(tion)YH()EA( for details\202. In partic)HY(u)HY(lar)YH(, the )SM(*)ES( wild)HY(card)YH(
  matches zero or more char)HY(ac)HY(ters)YH( within the name compo)HY(nent)YH( while the
  )SM(**)ES( sequence matches across the compo)HY(nents)YH(. Plus, wild)HY(card)YH(-only
  pattern compo)HY(nents)YH( match absent name compo)HY(nents)YH(. For example:)EP(

  ) 3 46 PR(build-auxiliary: linux_debian_12-postgresql_16
build-auxiliary: linux_*-postgresql_*
build-auxiliary: *-postgresql**)RP(

  )BR(
  )0 P(If multi)HY(ple)YH( auxil)HY(iary)YH( config)HY(u)HY(ra)HY(tions)YH( match the spec)HY(i)HY(fied)YH( pattern, then
  one is picked at random for every build.)EP(
  )BR(

  )0 P(If multi)HY(ple)YH( auxil)HY(iary)YH( config)HY(u)HY(ra)HY(tions)YH( are required, then they must be
  given distinct names with the )I(name)ES( compo)HY(nent)YH(. For example:)EP(

  ) 2 37 PR(build-auxiliary-pgsql: *-postgresql_*
build-auxiliary-mysql: *-mysql_*)RP(

  )0 P(Another example:)EP(

  ) 2 41 PR(build-auxiliary-primary: *-postgresql_*
build-auxiliary-secondary: *-postgresql_*)RP(

  )0 P(Auxil)HY(iary)YH( machines commu)HY(ni)HY(cate)YH( infor)HY(ma)HY(tion)YH( about their setup to the build
  machine using envi)HY(ron)HY(ment)YH( vari)HY(ables)YH( \201see )0 2 A()SM(auxil)HY(iary)YH(-envi)HY(ron)HY(ment)YH()ES()EA(
  for details\202. For example, an auxil)HY(iary)YH( machine that provides a test
  Post)HY(greSQL)YH( database may need to commu)HY(ni)HY(cate)YH( the host IP address and port on
  which it can be accessed as well as the user to login as and the database
  name to use. For example:)EP(

  ) 4 25 PR(DATABASE_HOST=192.168.0.1
DATABASE_PORT=5432
DATABASE_USER=test
DATABASE_NAME=test)RP(

  )0 P(If the auxil)HY(iary)YH( config)HY(u)HY(ra)HY(tion)YH( is spec)HY(i)HY(fied)YH( as
  )SM(build-auxil)HY(iary)YH(-<name>)ES(, then capi)HY(tal)HY(ized)YH( and sani)HY(tized)YH(
  )I(name)ES(_ is used as a prefix in the envi)HY(ron)HY(ment)YH( vari)HY(ables)YH( corre)HY(spond)HY(ing)YH(
  to the machine. For example, for the auxil)HY(iary)YH( config)HY(u)HY(ra)HY(tions)YH( spec)HY(i)HY(fied)YH(
  as:)EP(

  ) 2 38 PR(build-auxiliary-pg-sql: *-postgresql_*
build-auxiliary-my-sql: *-mysql_*)RP(

  )0 P(The envi)HY(ron)HY(ment)YH( vari)HY(ables)YH( could be:)EP(

  ) 7 32 PR(PG_SQL_DATABASE_HOST=192.168.0.1
PG_SQL_DATABASE_PORT=5432
...

MY_SQL_DATABASE_HOST=192.168.0.2
MY_SQL_DATABASE_PORT=3306
...)RP(

  )0 P(The auxil)HY(iary)YH( envi)HY(ron)HY(ment)YH( vari)HY(ables)YH( are in effect for the entire build.
  The recom)HY(mended)YH( place to prop)HY(a)HY(gate)YH( them to the package config)HY(u)HY(ra)HY(tion)YH( is the
  )SM(*-build-config)ES( value. For example:)EP(

  ) 7 46 PR(build-auxiliary: *-postgresql_*
default-build-config:
\200
config.hello.pgsql_host=$getenv\201DATABASE_HOST\202
config.hello.pgsql_port=$getenv\201DATABASE_PORT\202
...
\200)RP(

  )0 3 38 H(6.2.27)WB 113 Sn()WB 40 Sn( )SM(build-bot)ES()EH(

  ) 1 22 PR([build-bot]: <pub-key>)RP(

  )0 P(The common package build custom bot public key \201see )0 2 A()SM(build2)ES(
  build bot manual)EA( for back)HY(ground)YH(\202. Multi)HY(ple)YH( )SM(build-bot)ES( values
  can be spec)HY(i)HY(fied)YH( to list several custom build bots. If spec)HY(i)HY(fied)YH(, then such
  custom bots will be used instead of \201note: not in addi)HY(tion)YH( to\202 the default
  bots to build this package. Custom bots can be used, for example, to
  accom)HY(mo)HY(date)YH( pack)HY(ages)YH( that have special require)HY(ments)YH(, such as propri)HY(etary)YH(
  depen)HY(den)HY(cies)YH(, and which cannot be fulfilled using the default bots. The
  public key should be in the PEM format. For example:)EP(

  ) 17 64 PR(build-bot:
\200
-----BEGIN PUBLIC KEY-----
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAw5liP5pyU9ebC/nD3djZ
1H2dlKmUyiX0Z8POvKhLREd0B3rM59bPcnbRB4HMIhj0J0hUBvS8xb4u5udCPToa
x0A/LMWZ6claiivNtJ3CdLV98eklWdNUg5WXOuqq9QDKXw2ZpGbwDwCOh6aHSWVq
98N9AQx0ZMmMWz3qhRyxPfh+GeJ05uj2ohU9FeUJxeqUcgJT/UcMZ3+7KYbwr+Uq
/HCoX1BmN6nvzhQGHvJIZ2IcjvOQ0AUrPmpSZN01Zr3ZEpkHM3hJWNLu3ntJLGBQ
0aT5kG3iqFyr9q3M3c4J8c0AWrnDjvj0qnCyjNwqW+qIpatmCNT43DmgYr9fQLW0
UHusburz53AbXs12zu3gZzkb0irlShatkMqqQaqaU0/+zw1LnoZ+rvmn2XV97UuK
LFKMKXCnyi2ZG65IZHGkjBVAPuvsX6RgLNyner/QtkDJTbfhktInbG08dCPqv1EF
1OtcYKMTn8I5P2VmMO6SXXDLMSdU8b5DA5EY6Ca6JBB8g06S9sqGqXgQFysAnZs1
VFgMopf8WZqj23x+DX+9KKT2pVnjbwRvBAntuCDoO75gWoETDnCQXEei/PbyamPq
9+NjNsTDn67iJTGncZbII+eciY2YiFHm6GMzBPsUYlQcxiuO4X36jW6m2rwuw37K
oFDbGI3uY4LnhwmDFLbjtk8CAwEAAQ==
-----END PUBLIC KEY-----
\200)RP(

  )0 P(Note that such custom build bots must offer the same set of machines \201or
  a subset thereof\202 as the default bots. In other words, you cannot invent new
  build config)HY(u)HY(ra)HY(tion)YH( names \201and the corre)HY(spond)HY(ing)YH( machines\202 with custom build
  bots \235 for that you would need to run your own )SM(brep)ES(
  deploy)HY(ment)YH(. Note also that the list of machines offered by custom bots
  should be consis)HY(tent)YH( with the build config)HY(u)HY(ra)HY(tions)YH( enabled by the package
  \201see )0 37 1 A()SM(builds)ES()37 0 TN TL()Ec /AF f D( for
  details\202. For example, if the package enables a config)HY(u)HY(ra)HY(tion)YH( that is not
  offered by any of the custom bots listed, then this config)HY(u)HY(ra)HY(tion)YH( will
  remain unbuilt forever.)EP(

  )BR(
  )0 P(Note that custom build bot public keys are publicly known and nothing
  prevents someone else from spec)HY(i)HY(fy)HY(ing)YH( your bot's public key in their own
  package and thus trig)HY(ger)HY(ing)YH( a build on your bot of a poten)HY(tially)YH( rogue
  package. As a result, care)HY(fully)YH( consider the infor)HY(ma)HY(tion)YH( that you make
  avail)HY(able)YH( in your custom machines \201which will be easy to exfil)HY(trate)YH(\202 as well
  as the envi)HY(ron)HY(ment)YH( in which you run your custom bots \201which can poten)HY(tially)YH(
  be compro)HY(mised)YH(\202. In the future, )SM(bbot)ES( may offer mech)HY(a)HY(nisms)YH( to
  restrict the names and loca)HY(tions)YH( of pack)HY(ages)YH( that it is allowed to
  build.)EP(
  )BR(

  )0 3 39 H(6.2.28)WB 114 Sn()WB 41 Sn(
  )SM(*-build-config)ES()EH(

  ) 22 68 PR([*-build-config]: <args> [; <comment>]

<args> = [[[+|-]<prefix>:]\201<option>|<config-var>\202]* \200
         [\201+|-\202<prefix>:]*                          \200
         [<dependency-spec>]*                       \200
         [<package-specific-vars>]*

<dependency-spec> = [{ <config-var> [<config-var>]* }+] <dependency>
<dependency> = \201?[sys:]|sys:\202<name>[<version-spec>]
<version-spec> = /<version> | <version-constraint>
<package-specific-vars> = { <config-var> [<config-var>]* }+ <name>

[*-builds]: <class-expr> [; <comment>]
[*-build-include]: <config>[/<target>] [; <comment>]
[*-build-exclude]: <config>[/<target>] [; <comment>]
[*-build-auxiliary]: <config> [; <comment>]
[*-build-auxiliary-<name>]: <config> [; <comment>]
[*-build-bot]: <pub-key>

[*-build-email]: <email> [; <comment>]
[*-build-warning-email]: <email> [; <comment>]
[*-build-error-email]: <email> [; <comment>])RP(

  )0 P(The package build config)HY(u)HY(ra)HY(tions)YH( where the substring matched by
  )SM(*)ES( in )SM(*-build-config)ES( denotes the config)HY(u)HY(ra)HY(tion)YH(
  name. If spec)HY(i)HY(fied)YH(, then the package is built in these config)HY(u)HY(ra)HY(tions)YH( by
  auto)HY(mated)YH( build bots in addi)HY(tion)YH( to the default config)HY(u)HY(ra)HY(tion)YH( \201which is
  called )SM(default)ES(\202.)EP(

  )0 P(The )SM(*-build-config)ES( values contain whites)HY(pace)YH( sepa)HY(rated)YH( lists
  of poten)HY(tially)YH( double/single-quoted package config)HY(u)HY(ra)HY(tion)YH( argu)HY(ments)YH(. The
  global \201as opposed to package-specific\202 options and vari)HY(ables)YH( can be
  prefixed with the build bot worker script step ids or a leading portion
  thereof to restrict it to a specific step, oper)HY(a)HY(tion)YH(, phase, or tool \201see )0 2 A()SM()BD(bbot)ES()ES(
  worker step ids)EA(\202. The prefix can option)HY(ally)YH( begin with the
  )SM(+)ES( or )SM(-)ES( char)HY(ac)HY(ter)YH( \201in this case the argu)HY(ment)YH( can be
  omitted\202 to enable or disable the respec)HY(tive)YH( step \201see the list of )0 2 A(worker
  steps)EA( which can be enabled or disabled\202. Unpre)HY(fixed)YH( global options,
  vari)HY(ables)YH(, and depen)HY(den)HY(cies)YH( are passed to the )0 2 A()SM()BD(bpkg-pkg-build\2011\202)ES()ES()EA(
  command at the )SM(bpkg.config)HY(ure)YH(.build)ES( step. The package-specific
  config)HY(u)HY(ra)HY(tion)YH( vari)HY(ables)YH( for this and/or the sepa)HY(rate)YH( test pack)HY(ages)YH( are
  passed to )0 2 A()SM()BD(bpkg-pkg-build\2011\202)ES()ES()EA( at the
  )SM(bpkg.config)HY(ure)YH(.build)ES( and
  )SM(bpkg.test-sepa)HY(rate)YH(-installed.config)HY(ure)YH(.build)ES( steps. For
  example:)EP(

  ) 41 80 PR(network-build-config: config.libfoo.network=true; Enable networking API.

cache-build-config:
\200
config.libfoo.cache=true
config.libfoo.buffer=4096
;
Enable caching.
\200

libbar-network-build-config:
\200
{ config.libbar.network=true }+ ?libbar
;
Enable networking API in libbar.
\200

older-libz-build-config: "?libz ^1.0.0"; Test with older libz version.

sys-build-config:
\200
?sys:libbar ?sys:libz
;
Test with system dependencies.
\200

bindist-build-config:
\200
+bpkg.bindist.debian:--recursive=full
-bbot.sys-install:
+bbot.bindist.upload:)WR(
;
Generate and upload binary distribution package but don't test its installation.
\200

load-tests-build-config:
\200
{ config.libfoo_tests.load=true }+ libfoo-tests
;
Enable load testing.
\200)RP(

  )0 P(Note that options with values can only be spec)HY(i)HY(fied)YH( using the single
  argu)HY(ment)YH( nota)HY(tion)YH(, for example, )SM(--verbose=4)ES(.)EP(

  )0 P(The package build config)HY(u)HY(ra)HY(tion)YH( can over)HY(ride)YH( the common build target
  config)HY(u)HY(ra)HY(tions)YH( set \201spec)HY(i)HY(fied)YH( with )0 37 1 A()SM(builds)ES()37 0 TN TL()Ec /AF f D( and )0 38 1 A()SM(build-{include,
  exclude})ES()38 0 TN TL()Ec /AF f D(\202 by spec)HY(i)HY(fy)HY(ing)YH( the match)HY(ing)YH( )SM(*-builds)ES( and/or
  )SM(*-build-{include, exclude})ES( values. For example:)EP(

  ) 2 72 PR(network-builds: linux; Only supported on Linux.
network-build-config: config.libfoo.network=true; Enable networking API.)RP(

  )0 P(Note that the common build target config)HY(u)HY(ra)HY(tions)YH( set is over)HY(rid)HY(den)YH(
  hier)HY(ar)HY(chi)HY(cally)YH( meaning that the )SM(*-build-{include, exclude})ES(
  over)HY(rides)YH( don't discard the common )SM(builds)ES( values.)EP(

  )0 P(The package build config)HY(u)HY(ra)HY(tion)YH( can over)HY(ride)YH( the common build auxil)HY(iary)YH(
  machines. Note that the auxil)HY(iary)YH( machine set is over)HY(rid)HY(den)YH( entirely,
  meaning that spec)HY(i)HY(fy)HY(ing)YH( one )SM(*-build-auxil)HY(iary)YH()ES( value discard all
  the common )SM(build-auxil)HY(iary)YH()ES( values for this package
  config)HY(u)HY(ra)HY(tion)YH(.)EP(

  )0 P(The package build config)HY(u)HY(ra)HY(tion)YH( can over)HY(ride)YH( the common build custom
  bots. Note that the custom bot set is over)HY(rid)HY(den)YH( entirely, meaning that
  spec)HY(i)HY(fy)HY(ing)YH( one )SM(*-build-bot)ES( value discards all the common
  )SM(build-bot)ES( values for this package config)HY(u)HY(ra)HY(tion)YH(.)EP(

  )0 P(The package build config)HY(u)HY(ra)HY(tion)YH( can over)HY(ride)YH( the common build
  noti)HY(fi)HY(ca)HY(tion)YH( email addresses \201spec)HY(i)HY(fied)YH( with )0 31 1 A()SM(build-email)ES()31 0 TN TL()Ec /AF f D(, )0 32 1 A()SM(build-warning-email)ES()32 0 TN TL()Ec /AF f D(,
  and )0 33 1 A()SM(build-error-email)ES()33 0 TN TL()Ec /AF f D(\202 by
  spec)HY(i)HY(fy)HY(ing)YH( the match)HY(ing)YH( )SM(*-build-email)ES( and/or
  )SM(*-build-{warning, error}-email)ES( values. For example:)EP(

  ) 8 48 PR(bindist-build-config:
\200
+bpkg.bindist.debian:--recursive=full
+bbot.bindist.upload:
;
Generate and upload binary distribution package.
\200
bindist-build-error-email: builds@example.org)RP(

  )0 P(Note that to disable all the build noti)HY(fi)HY(ca)HY(tion)YH( emails for a specific
  package build config)HY(u)HY(ra)HY(tion)YH(, specify the empty )SM(*-build-email)ES(
  value. For example:)EP(

  ) 2 59 PR(sys-build-config: ?sys:libz; Test with system dependencies.
sys-build-email:)RP(

  )0 P(The default config)HY(u)HY(ra)HY(tion)YH( should normally build the package with no
  config)HY(u)HY(ra)HY(tion)YH( argu)HY(ments)YH( and for the common target build config)HY(u)HY(ra)HY(tions)YH( set.
  While not recom)HY(mended)YH(, this can be over)HY(rid)HY(den)YH( by using the special
  )SM(default)ES( config)HY(u)HY(ra)HY(tion)YH( name. For example:)EP(

  ) 1 46 PR(default-build-config: config.libfoo.cache=true)RP(

  )0 3 40 H(6.2.29)WB 115 Sn()WB 42 Sn( )SM(build-file)ES()EH(

  ) 9 26 PR([build-file]: <path>

[bootstrap-build]: <text>
[root-build]: <text>
[*-build]: <text>

[bootstrap-build2]: <text>
[root-build2]: <text>
[*-build2]: <text>)RP(

  )0 P(The contents of the manda)HY(tory)YH( )SM(boot)HY(strap)YH(.build)ES( file, optional
  )SM(root.build)ES( file, and addi)HY(tional)YH( files included by
  )SM(root.build)ES(, or their alter)HY(na)HY(tive)YH( naming scheme vari)HY(ants)YH(
  \201)SM(boot)HY(strap)YH(.build2)ES(, etc\202. Pack)HY(ages)YH( with the alter)HY(na)HY(tive)YH( naming
  scheme should use the )SM(*-build2)ES( values instead of
  )SM(*-build)ES(. See )0 6 1 A(Package Build System
  Skele)HY(ton)YH()6 0 TN TL()Ec /AF f D( for back)HY(ground)YH(.)EP(

  )0 P(These files must reside in the package's )SM(build/)ES( subdi)HY(rec)HY(tory)YH(
  and have the )SM(.build)ES( exten)HY(sion)YH( \201or their alter)HY(na)HY(tive)YH( names\202.
  They can be provided either inline as text frag)HY(ments)YH( or, for addi)HY(tional)YH(
  files, by refer)HY(ring)YH( to them with a path rela)HY(tive)YH( to this subdi)HY(rec)HY(tory)YH(, but
  not both. The )SM(*-build)ES(/)SM(*-build2)ES( mani)HY(fest)YH( value name
  prefixes must be the file paths rela)HY(tive)YH( to this subdi)HY(rec)HY(tory)YH( with the
  exten)HY(sion)YH( stripped.)EP(

  )0 P(As an example, the follow)HY(ing)YH( values corre)HY(spond)YH( to the
  )SM(build/config/common.build)ES( file:)EP(

  ) 6 44 PR(build-file: config/common.build

config/common-build:
\200
config [bool] config.libhello.fancy ?= false
\200)RP(

  )0 P(And the follow)HY(ing)YH( values corre)HY(spond)YH( to the
  )SM(build2/config/common.build2)ES( file in a package with the
  alter)HY(na)HY(tive)YH( naming scheme:)EP(

  ) 6 44 PR(build-file: config/common.build2

config/common-build2:
\200
config [bool] config.libhello.fancy ?= false
\200)RP(

  )0 P(If unspec)HY(i)HY(fied)YH(, then the package's )SM(boot)HY(strap)YH(.build)ES(,
  )SM(root.build)ES(, and )SM(build/config/*.build)ES( files \201or
  their alter)HY(na)HY(tive)YH( names\202 will be auto)HY(mat)HY(i)HY(cally)YH( added, for example, when the
  )0 44 1 A(package list mani)HY(fest)YH()44 0 TN TL()Ec /AF f D( is
  created.)EP(

  )0 3 41 H(6.2.30)WB 116 Sn()WB 43 Sn( )SM(*-{name, version,
  to-down)HY(stream)YH(-version})ES()EH(

  ) 6 47 PR([<distribution>-name]: <name> [<name>...]
[<distribution>-version]: <string>
[<distribution>-to-downstream-version]: <regex>

<distribution> = <name>[_<version>]
<regex> = /<pattern>/<replacement>/)RP(

  )0 P(The binary distri)HY(bu)HY(tion)YH( package name and version mapping. The
  )SM(-name)ES( value spec)HY(i)HY(fies)YH( the distri)HY(bu)HY(tion)YH( package\201s\202 this
  )SM(bpkg)ES( package maps to. If unspec)HY(i)HY(fied)YH(, then appro)HY(pri)HY(ate)YH( name\201s\202
  are auto)HY(mat)HY(i)HY(cally)YH( derived from the )SM(bpkg)ES( package name \201)0 14 1 A()SM(name)ES()14 0 TN TL()Ec /AF f D(\202. Simi)HY(larly)YH(, the
  )SM(-version)ES( value spec)HY(i)HY(fies)YH( the distri)HY(bu)HY(tion)YH( package version. If
  unspec)HY(i)HY(fied)YH(, then the )SM(upstream-version)ES( value is used if
  spec)HY(i)HY(fied)YH( and the )SM(bpkg)ES( version \201)0 15 1 A()SM(version)ES()15 0 TN TL()Ec /AF f D(\202 other)HY(wise)YH(. While
  the )SM(-to-down)HY(stream)YH(-version)ES( values specify the reverse mapping,
  that is, from the distri)HY(bu)HY(tion)YH( version to the )SM(bpkg)ES( version. If
  unspec)HY(i)HY(fied)YH( or none match, then the appro)HY(pri)HY(ate)YH( part of the distri)HY(bu)HY(tion)YH(
  version is used. For example:)EP(

  ) 6 68 PR(name: libssl
version 1.1.1+18
debian-name: libssl1.1 libssl-dev
debian-version: 1.1.1n
debian-to-downstream-version: /1\200.1\200.1[a-z]/1.1.1/
debian-to-downstream-version: /\201[3-9]\202\200.\201[0-9]+\202\200.\201[0-9]+\202/\2001.\2002.\2003/)RP(

  )0 P(If )SM(upstream-version)ES( is spec)HY(i)HY(fied)YH( but the the distri)HY(bu)HY(tion)YH(
  package version should be the same as the )SM(bpkg)ES( package version,
  then the special )SM($)ES( )SM(-version)ES( value can be used. For
  example:)EP(

  ) 1 17 PR(debian-version: $)RP(

  )0 P(The )SM(<distri)HY(bu)HY(tion)YH(>)ES( name prefix consists of the
  distri)HY(bu)HY(tion)YH( name followed by the optional distri)HY(bu)HY(tion)YH( version. If the
  version is omitted, then the value applies to all versions. Some exam)HY(ples)YH( of
  distri)HY(bu)HY(tion)YH( names and versions:)EP(

  ) 10 12 PR(debian
debian_10
ubuntu_16.04
fedora_32
rhel_8.5
freebsd_12.1
windows_10
macos_10
macos_10.15
macos_12)RP(

  )0 P(Note also that some distri)HY(bu)HY(tions)YH( are like others \201for example,
  )SM(ubuntu)ES( is like )SM(debian)ES(\202 and the corre)HY(spond)HY(ing)YH(
  "base" distri)HY(bu)HY(tion)YH( values are consid)HY(ered)YH( if no "derived" values are
  spec)HY(i)HY(fied)YH(.)EP(

  )0 P(The )SM(-name)ES( value is used both during package consump)HY(tion)YH( as a
  system package and produc)HY(tion)YH( with the )0 2 A()SM()BD(bpkg-pkg-bindist\2011\202)ES()ES()EA(
  command. During produc)HY(tion)YH(, if multi)HY(ple)YH( mappings match, then the value with
  the highest match)HY(ing)YH( distri)HY(bu)HY(tion)YH( version from the package
  )SM(mani)HY(fest)YH()ES( with the latest version is used. If it's neces)HY(sary)YH( to
  use differ)HY(ent)YH( names for the gener)HY(ated)YH( binary pack)HY(ages)YH( \201called "non-native
  pack)HY(ages)YH(" in contrast to "native pack)HY(ages)YH(" that come from the distri)HY(bu)HY(tion)YH(\202,
  the special )SM(0)ES( distri)HY(bu)HY(tion)YH( version can be used to specify such
  a mapping. For example:)EP(

  ) 3 42 PR(name: libsqlite3
debian_9-name: libsqlite3-0 libsqlite3-dev
debian_0-name: libsqlite3 libsqlite3-dev)RP(

  )0 P(Note that this special non-native mapping is ignored during consump)HY(tion)YH(
  and a devi)HY(a)HY(tion)YH( in the package names that it intro)HY(duces)YH( may make it
  impos)HY(si)HY(ble)YH( to use native and non-native binary pack)HY(ages)YH( inter)HY(change)HY(ably)YH(, for
  example, to satisfy depen)HY(den)HY(cies)YH(.)EP(

  )0 P(The exact format of the )SM(-name)ES( and )SM(-version)ES(
  values and the distri)HY(bu)HY(tion)YH( version part that is matched against the
  )SM(-to-down)HY(stream)YH(-version)ES( pattern are distri)HY(bu)HY(tion)YH(-specific. For
  details, see )0 69 1 A(Debian Package Mapping)69 0 TN TL()Ec /AF f D(
  and )0 72 1 A(Fedora Package Mapping)72 0 TN TL()Ec /AF f D(.)EP(

  )0 2 42 H(6.3)WB 117 Sn()WB 44 Sn( Package List Mani)HY(fest)YH( for
  )SM()BD(pkg)ES()ES( Repos)HY(i)HY(to)HY(ries)YH()EH(

  )0 P(The package list mani)HY(fest)YH( \201the )SM(pack)HY(ages)YH(.mani)HY(fest)YH()ES( file found
  in the )SM()BD(pkg)ES()ES( repos)HY(i)HY(tory)YH( root direc)HY(tory)YH(\202 describes the list
  of pack)HY(ages)YH( avail)HY(able)YH( in the repos)HY(i)HY(tory)YH(. First comes a mani)HY(fest)YH( that
  describes the list itself \201referred to as the list mani)HY(fest)YH(\202. The list
  mani)HY(fest)YH( synop)HY(sis)YH( is presented next:)EP(

  ) 1 16 PR(sha256sum: <sum>)RP(

  )0 P(After the list mani)HY(fest)YH( comes a \201poten)HY(tially)YH( empty\202 sequence of package
  mani)HY(fests)YH(. These mani)HY(fests)YH( shall not contain any )SM(*-file)ES( or
  incom)HY(plete)YH( )0 34 1 A()SM(depends)ES()34 0 TN TL()Ec /AF f D(
  values \201such values should be converted to their inline versions or
  completed, respec)HY(tively)YH(\202 but must contain the )SM(*-build)ES( values
  \201unless the corre)HY(spond)HY(ing)YH( files are absent\202 and the follow)HY(ing)YH( addi)HY(tional)YH( \201to
  package mani)HY(fest)YH(\202 values:)EP(

  ) 2 16 PR(location: <path>
sha256sum: <sum>)RP(

  )0 P(The detailed descrip)HY(tion)YH( of each value follows in the subse)HY(quent)YH(
  sections.)EP(

  )0 3 43 H(6.3.1)WB 118 Sn()WB 45 Sn( )SM(sha256sum)ES(
  \201list mani)HY(fest)YH(\202)EH(

  ) 1 16 PR(sha256sum: <sum>)RP(

  )0 P(The SHA256 check)HY(sum)YH( of the )SM(repos)HY(i)HY(to)HY(ries)YH(.mani)HY(fest)YH()ES( file
  \201described below\202 that corre)HY(sponds)YH( to this repos)HY(i)HY(tory)YH(. The )I(sum)ES( value
  should be 64 char)HY(ac)HY(ters)YH( long \201that is, just the SHA256 value, no file name
  or any other markers\202, be calcu)HY(lated)YH( in the binary mode, and use lower-case
  letters.)EP(

  )BR(
  )0 P(This check)HY(sum)YH( is used to make sure that the
  )SM(repos)HY(i)HY(to)HY(ries)YH(.mani)HY(fest)YH()ES( file that was fetched is the same as the
  one that was used to create the )SM(pack)HY(ages)YH(.mani)HY(fest)YH()ES( file. This
  also means that if )SM(repos)HY(i)HY(to)HY(ries)YH(.mani)HY(fest)YH()ES( is modi)HY(fied)YH( in any
  way, then )SM(pack)HY(ages)YH(.mani)HY(fest)YH()ES( must be regen)HY(er)HY(ated)YH( as well.)EP(
  )BR(

  )0 3 44 H(6.3.2)WB 119 Sn()WB 46 Sn(
  )SM(loca)HY(tion)YH()ES( \201package mani)HY(fest)YH(\202)EH(

  ) 1 16 PR(location: <path>)RP(

  )0 P(The path to the package archive file rela)HY(tive)YH( to the repos)HY(i)HY(tory)YH( root. It
  should be in the POSIX repre)HY(sen)HY(ta)HY(tion)YH(.)EP(

  )BR(
  )0 P(if the repos)HY(i)HY(tory)YH( keeps multi)HY(ple)YH( versions of the package and places them
  all into the repos)HY(i)HY(tory)YH( root direc)HY(tory)YH(, it can get untidy. With
  )SM(loca)HY(tion)YH()ES( we allow for sub-direc)HY(to)HY(ries)YH(.)EP(
  )BR(

  )0 3 45 H(6.3.3)WB 120 Sn()WB 47 Sn(
  )SM(sha256sum)ES( \201package mani)HY(fest)YH(\202)EH(

  ) 1 16 PR(sha256sum: <sum>)RP(

  )0 P(The SHA256 check)HY(sum)YH( of the package archive file. The )I(sum)ES( value
  should be 64 char)HY(ac)HY(ters)YH( long \201that is, just the SHA256 value, no file name
  or any other markers\202, be calcu)HY(lated)YH( in the binary mode, and use lower-case
  letters.)EP(

  )0 2 46 H(6.4)WB 121 Sn()WB 48 Sn( Package List Mani)HY(fest)YH( for
  )SM()BD(dir)ES()ES( Repos)HY(i)HY(to)HY(ries)YH()EH(

  )0 P(The package list mani)HY(fest)YH( \201the )SM(pack)HY(ages)YH(.mani)HY(fest)YH()ES( file found
  in the )SM()BD(dir)ES()ES( repos)HY(i)HY(tory)YH( root direc)HY(tory)YH(\202 describes the list
  of pack)HY(ages)YH( avail)HY(able)YH( in the repos)HY(i)HY(tory)YH(. It is a \201poten)HY(tially)YH( empty\202
  sequence of mani)HY(fests)YH( with the follow)HY(ing)YH( synop)HY(sis)YH(:)EP(

  ) 2 20 PR(location: <path>
[fragment]: <string>)RP(

  )0 P(The detailed descrip)HY(tion)YH( of each value follows in the subse)HY(quent)YH(
  sections. The )SM(frag)HY(ment)YH()ES( value can only be present in a merged
  )SM(pack)HY(ages)YH(.mani)HY(fest)YH()ES( file for a multi-frag)HY(ment)YH( repos)HY(i)HY(tory)YH(.)EP(

  )0 P(As an example, if our repos)HY(i)HY(tory)YH( contained the )SM(src/)ES(
  subdi)HY(rec)HY(tory)YH( that in turn contained the )SM(libfoo)ES( and
  )SM(foo)ES( pack)HY(ages)YH(, then the corre)HY(spond)HY(ing)YH(
  )SM(pack)HY(ages)YH(.mani)HY(fest)YH()ES( file could look like this:)EP(

  ) 4 21 PR(: 1
location: src/libfoo/
:
location: src/foo/)RP(

  )0 3 47 H(6.4.1)WB 122 Sn()WB 49 Sn( )SM(loca)HY(tion)YH()ES()EH(

  ) 1 16 PR(location: <path>)RP(

  )0 P(The path to the package direc)HY(tory)YH( rela)HY(tive)YH( to the repos)HY(i)HY(tory)YH( root. It
  should be in the POSIX repre)HY(sen)HY(ta)HY(tion)YH(.)EP(

  )0 3 48 H(6.4.2)WB 123 Sn()WB 50 Sn( )SM(frag)HY(ment)YH()ES()EH(

  ) 1 20 PR([fragment]: <string>)RP(

  )0 P(The repos)HY(i)HY(tory)YH( frag)HY(ment)YH( id this package belongs to.)EP(

  )0 2 49 H(6.5)WB 124 Sn()WB 51 Sn( Repos)HY(i)HY(tory)YH( Mani)HY(fest)YH()EH(

  )0 P(The repos)HY(i)HY(tory)YH( mani)HY(fest)YH( \201only used as part of the repos)HY(i)HY(tory)YH( mani)HY(fest)YH(
  list described below\202 describes a )SM()BD(pkg)ES()ES(,
  )SM()BD(dir)ES()ES(, or )SM()BD(git)ES()ES( repos)HY(i)HY(tory)YH(. The mani)HY(fest)YH(
  synop)HY(sis)YH( is presented next followed by the detailed descrip)HY(tion)YH( of each
  value in subse)HY(quent)YH( sections.)EP(

  ) 10 36 PR([location]: <uri>
[type]: pkg|dir|git
[role]: base|prerequisite|complement
[trust]: <fingerprint>
[url]: <url>
[email]: <email> [; <comment>]
[summary]: <text>
[description]: <text>
[certificate]: <pem>
[fragment]: <string>)RP(

  )0 P(See also the Repos)HY(i)HY(tory)YH( Chain)HY(ing)YH( docu)HY(men)HY(ta)HY(tion)YH( for further infor)HY(ma)HY(tion)YH( @@
  TODO.)EP(

  )0 3 50 H(6.5.1)WB 125 Sn()WB 52 Sn( )SM(loca)HY(tion)YH()ES()EH(

  ) 1 17 PR([location]: <uri>)RP(

  )0 P(The repos)HY(i)HY(tory)YH( loca)HY(tion)YH(. The loca)HY(tion)YH( can and must only be omitted for
  the base repos)HY(i)HY(tory)YH(. Since we got hold of its mani)HY(fest)YH(,
  then we presum)HY(ably)YH( already know the loca)HY(tion)YH( of the base repos)HY(i)HY(tory)YH(.
  If the loca)HY(tion)YH( is a rela)HY(tive)YH( path, then it is treated as rela)HY(tive)YH( to the
  base repos)HY(i)HY(tory)YH( loca)HY(tion)YH(.)EP(

  )0 P(For the )SM()BD(git)ES()ES( repos)HY(i)HY(tory)YH( type the rela)HY(tive)YH( loca)HY(tion)YH(
  does not inherit the URL frag)HY(ment)YH( from the base repos)HY(i)HY(tory)YH(. Note also that
  the remote )SM()BD(git)ES()ES( repos)HY(i)HY(tory)YH( loca)HY(tions)YH( normally have the
  )SM()BD(.git)ES()ES( exten)HY(sion)YH( that is stripped when a repos)HY(i)HY(tory)YH( is
  cloned locally. To make the rela)HY(tive)YH( loca)HY(tions)YH( usable in both contexts, the
  )SM()BD(.git)ES()ES( exten)HY(sion)YH( should be ignored if the local
  prereq)HY(ui)HY(site)YH( repos)HY(i)HY(tory)YH( with the exten)HY(sion)YH( does not exist while the one
  without the exten)HY(sion)YH( does.)EP(

  )0 P(While POSIX systems normally only support POSIX paths \201that is, forward
  slashes only\202, Windows is gener)HY(ally)YH( able to handle both slash types. As a
  result, it is recom)HY(mended)YH( that POSIX paths are always used in the
  )SM(loca)HY(tion)YH()ES( values, except, perhaps, if the repos)HY(i)HY(tory)YH( is
  explic)HY(itly)YH( Windows-only by, for example, having a loca)HY(tion)YH( that is an
  abso)HY(lute)YH( Windows path with the drive letter. The
  )SM()BD(bpkg)ES()ES( package manager will always try to repre)HY(sent)YH( the
  loca)HY(tion)YH( as a POSIX path and only fall)HY(back)YH( to the native repre)HY(sen)HY(ta)HY(tion)YH( if
  that is not possi)HY(ble)YH( \201for example, there is a drive letter in the
  path\202.)EP(

  )0 3 51 H(6.5.2)WB 126 Sn()WB 53 Sn( )SM(type)ES()EH(

  ) 1 19 PR([type]: pkg|dir|git)RP(

  )0 P(The repos)HY(i)HY(tory)YH( type. The type must be omitted for the base repos)HY(i)HY(tory)YH(. If
  the type is omitted for a prereq)HY(ui)HY(site)YH(/comple)HY(ment)YH( repos)HY(i)HY(tory)YH(, then it is
  guessed from its )SM(loca)HY(tion)YH()ES( value as described in )0 2 A()SM()BD(bpkg-rep-add\2011\202)ES()ES()EA(.)EP(

  )0 3 52 H(6.5.3)WB 127 Sn()WB 54 Sn( )SM(role)ES()EH(

  ) 1 36 PR([role]: base|prerequisite|complement)RP(

  )0 P(The repos)HY(i)HY(tory)YH( role. The )SM(role)ES( value can be omitted for the
  base repos)HY(i)HY(tory)YH( only.)EP(

  )0 3 53 H(6.5.4)WB 128 Sn()WB 55 Sn( )SM(trust)ES()EH(

  ) 1 22 PR([trust]: <fingerprint>)RP(

  )0 P(The repos)HY(i)HY(tory)YH( finger)HY(print)YH( to trust. The )SM(trust)ES( value can
  only be spec)HY(i)HY(fied)YH( for prereq)HY(ui)HY(site)YH( and comple)HY(ment)YH( repos)HY(i)HY(to)HY(ries)YH( and only for
  repos)HY(i)HY(tory)YH( types that support authen)HY(ti)HY(ca)HY(tion)YH( \201currently only
  )SM(pkg)ES(\202. The )I(finger)HY(print)YH()ES( value should be an SHA256
  repos)HY(i)HY(tory)YH( finger)HY(print)YH( repre)HY(sented)YH( as 32 colon-sepa)HY(rated)YH( hex digit pairs.
  The repos)HY(i)HY(tory)YH( in ques)HY(tion)YH( is only trusted for use as a
  prereq)HY(ui)HY(site)YH( or comple)HY(ment)YH( of this repos)HY(i)HY(tory)YH(. If it is also used by other
  repos)HY(i)HY(to)HY(ries)YH( or is added to the config)HY(u)HY(ra)HY(tion)YH( by the user, then such uses
  cases are authen)HY(ti)HY(cated)YH( inde)HY(pen)HY(dently)YH(.)EP(

  )0 3 54 H(6.5.5)WB 129 Sn()WB 56 Sn( )SM(url)ES()EH(

  ) 1 12 PR([url]: <url>)RP(

  )0 P(The repos)HY(i)HY(tory)YH('s web inter)HY(face)YH( \201)SM(brep)ES(\202 URL. It can only be
  spec)HY(i)HY(fied)YH( for the base repos)HY(i)HY(tory)YH( \201the web inter)HY(face)YH( URLs for
  prereq)HY(ui)HY(site)YH(/comple)HY(ment)YH( repos)HY(i)HY(to)HY(ries)YH( can be extracted from their respec)HY(tive)YH(
  mani)HY(fests)YH(\202.)EP(

  )0 P(For example, given the follow)HY(ing)YH( )SM(url)ES( value:)EP(

  ) 1 31 PR(url: https://example.org/hello/)RP(

  )0 P(The package details page for )SM(libfoo)ES( located in this
  repos)HY(i)HY(tory)YH( will be )SM(https://example.org/hello/libfoo)ES(.)EP(

  )0 P(The web inter)HY(face)YH( URL can also be spec)HY(i)HY(fied)YH( as rela)HY(tive)YH( to the repos)HY(i)HY(tory)YH(
  loca)HY(tion)YH( \201the )SM(loca)HY(tion)YH()ES( value\202. In this case )I(url)ES( should
  start with two path compo)HY(nents)YH( each being either )SM(.)ES( or
  )SM(..)ES(. If the first compo)HY(nent)YH( is )SM(..)ES(, then the
  )SM(www)ES(, )SM(pkg)ES( or )SM(bpkg)ES( domain compo)HY(nent)YH(, if
  any, is removed from the )SM(loca)HY(tion)YH()ES( URL host, just like when
  deriv)HY(ing)YH( the repos)HY(i)HY(tory)YH( name.)EP(

  )0 P(Simi)HY(larly)YH(, if the second compo)HY(nent)YH( is )SM(..)ES(, then the
  )SM(pkg)ES( or )SM(bpkg)ES( path compo)HY(nent)YH(, if any, is removed
  from the )SM(loca)HY(tion)YH()ES( URL path, again, just like when deriv)HY(ing)YH( the
  repos)HY(i)HY(tory)YH( name.)EP(

  )0 P(Finally, the version compo)HY(nent)YH( is removed from the )SM(loca)HY(tion)YH()ES(
  URL path, the rest \201after the two )SM(.)ES(/)SM(..)ES( compo)HY(nents)YH(\202
  of the )SM(url)ES( value is appended to it, and the result)HY(ing)YH( path is
  normal)HY(ized)YH( with all remain)HY(ing)YH( )SM(..)ES(  and )SM(.)ES( applied
  normally.)EP(

  )0 P(For example, assum)HY(ing)YH( repos)HY(i)HY(tory)YH( loca)HY(tion)YH( is:)EP(

  ) 1 47 PR(https://pkg.example.org/test/pkg/1/hello/stable)RP(

  )0 P(The follow)HY(ing)YH( listing shows some of the possi)HY(ble)YH( combi)HY(na)HY(tions)YH( \201the
  )SM(<>)ES( marker is used to high)HY(light)YH( the changes\202:)EP(

  ) 6 62 PR(./.          ->  https://pkg.example.org/test/pkg/hello/stable
../.         ->  https://<  >example.org/test/pkg/hello/stable
./..         ->  https://pkg.example.org/test/<  >hello/stable
../..        ->  https://<  >example.org/test/<  >hello/stable
././..       ->  https://pkg.example.org/test/pkg/hello<     >
../../../..  ->  https://<  >example.org/test<               >)RP(

  )BR(
  )0 P(The ratio)HY(nale)YH( for the rela)HY(tive)YH( web inter)HY(face)YH( URLs is to allow deploy)HY(ment)YH(
  of the same repos)HY(i)HY(tory)YH( to slightly differ)HY(ent)YH( config)HY(u)HY(ra)HY(tion)YH(, for example,
  during devel)HY(op)HY(ment)YH(, testing, and public use. For instance, for devel)HY(op)HY(ment)YH(
  we may use the )SM(https://example.org/pkg/)ES( setup while in
  produc)HY(tion)YH( it becomes )SM(https://pkg.example.org/)ES(. By spec)HY(i)HY(fy)HY(ing)YH(
  the web inter)HY(face)YH( loca)HY(tion)YH( as, say, )SM(../.)ES(, we can run the web
  inter)HY(face)YH( at these respec)HY(tive)YH( loca)HY(tions)YH( using a single repos)HY(i)HY(tory)YH(
  mani)HY(fest)YH(.)EP(
  )BR(

  )0 3 55 H(6.5.6)WB 130 Sn()WB 57 Sn( )SM(email)ES()EH(

  ) 1 30 PR([email]: <email> [; <comment>])RP(

  )0 P(The repos)HY(i)HY(tory)YH( email address. It must and can only be spec)HY(i)HY(fied)YH( for the
  base repos)HY(i)HY(tory)YH(. The email address is displayed by the web inter)HY(face)YH(
  \201)SM(brep)ES(\202 in the repos)HY(i)HY(tory)YH( about page and could be used to
  contact the main)HY(tain)HY(ers)YH( about issues with the repos)HY(i)HY(tory)YH(.)EP(

  )0 3 56 H(6.5.7)WB 131 Sn()WB 58 Sn( )SM(summary)ES()EH(

  ) 1 17 PR([summary]: <text>)RP(

  )0 P(The short descrip)HY(tion)YH( of the repos)HY(i)HY(tory)YH(. It must and can only be
  spec)HY(i)HY(fied)YH( for the base repos)HY(i)HY(tory)YH(.)EP(

  )0 3 57 H(6.5.8)WB 132 Sn()WB 59 Sn( )SM(descrip)HY(tion)YH()ES()EH(

  ) 1 21 PR([description]: <text>)RP(

  )0 P(The detailed descrip)HY(tion)YH( of the repos)HY(i)HY(tory)YH(. It can only be spec)HY(i)HY(fied)YH( for
  the base repos)HY(i)HY(tory)YH(.)EP(

  )0 P(In the web inter)HY(face)YH( \201)SM(brep)ES(\202 the descrip)HY(tion)YH( is format)HY(ted)YH(
  into one or more para)HY(graphs)YH( using blank lines as para)HY(graph)YH( sepa)HY(ra)HY(tors)YH(.
  Specif)HY(i)HY(cally)YH(, it is not repre)HY(sented)YH( as )SM(<pre>)ES( so any kind of
  addi)HY(tional)YH( plain text format)HY(ting)YH( \201for example, lists\202 will be lost and
  should not be used in the descrip)HY(tion)YH(.)EP(

  )0 3 58 H(6.5.9)WB 133 Sn()WB 60 Sn( )SM(certifi)HY(cate)YH()ES()EH(

  ) 1 20 PR([certificate]: <pem>)RP(

  )0 P(The X.509 certifi)HY(cate)YH( for the repos)HY(i)HY(tory)YH(. It should be in the PEM format
  and can only be spec)HY(i)HY(fied)YH( for the base repos)HY(i)HY(tory)YH(. Currently only used for
  the )SM()BD(pkg)ES()ES( repos)HY(i)HY(tory)YH( type.)EP(

  )0 P(The certifi)HY(cate)YH( should contain the )SM(CN)ES( and )SM(O)ES(
  compo)HY(nents)YH( in the subject as well as the )SM(email:)ES( compo)HY(nent)YH( in
  the subject alter)HY(na)HY(tive)YH( names. The )SM(CN)ES( compo)HY(nent)YH( should start
  with )SM(name:)ES( and continue with the repos)HY(i)HY(tory)YH( name
  prefix/wild)HY(card)YH( \201without trail)HY(ing)YH( slash\202 that will be used to verify the
  repos)HY(i)HY(tory)YH( name\201s\202 that are authen)HY(ti)HY(cated)YH( with this certifi)HY(cate)YH(. See )0 2 A()SM()BD(bpkg-repos)HY(i)HY(tory)YH(-signing\2011\202)ES()ES()EA(
  for details.)EP(

  )0 P(If this value is present then the )SM(pack)HY(ages)YH(.mani)HY(fest)YH()ES( file
  must be signed with the corre)HY(spond)HY(ing)YH( private key and the signa)HY(ture)YH( saved in
  the )SM(signa)HY(ture)YH(.mani)HY(fest)YH()ES( file. See )0 65 1 A(Signa)HY(ture)YH( Mani)HY(fest)YH()65 0 TN TL()Ec /AF f D( for details.)EP(

  )0 3 59 H(6.5.10)WB 134 Sn()WB 61 Sn( )SM(frag)HY(ment)YH()ES()EH(

  ) 1 20 PR([fragment]: <string>)RP(

  )0 P(The repos)HY(i)HY(tory)YH( frag)HY(ment)YH( id this repos)HY(i)HY(tory)YH( belongs to.)EP(

  )0 2 60 H(6.6)WB 135 Sn()WB 62 Sn( Repos)HY(i)HY(tory)YH( List Mani)HY(fest)YH()EH(

  )0 P(@@ TODO See the Repos)HY(i)HY(tory)YH( Chain)HY(ing)YH( docu)HY(ment)YH( for more infor)HY(ma)HY(tion)YH( on the
  termi)HY(nol)HY(ogy)YH( and seman)HY(tics)YH(.)EP(

  )0 P(The repos)HY(i)HY(tory)YH( list mani)HY(fest)YH( \201the )SM(repos)HY(i)HY(to)HY(ries)YH(.mani)HY(fest)YH()ES( file
  found in the repos)HY(i)HY(tory)YH( root direc)HY(tory)YH(\202 describes the repos)HY(i)HY(tory)YH(. It starts
  with an optional header mani)HY(fest)YH( option)HY(ally)YH( followed by a sequence of
  repos)HY(i)HY(tory)YH( mani)HY(fests)YH( consist)HY(ing)YH( of the base repos)HY(i)HY(tory)YH( mani)HY(fest)YH( \201that is,
  the mani)HY(fest)YH( for the repos)HY(i)HY(tory)YH( that is being described\202 as well as
  mani)HY(fests)YH( for its prereq)HY(ui)HY(site)YH( and comple)HY(ment)YH( repos)HY(i)HY(to)HY(ries)YH(. The indi)HY(vid)HY(ual)YH(
  repos)HY(i)HY(tory)YH( mani)HY(fests)YH( can appear in any order and the base repos)HY(i)HY(tory)YH(
  mani)HY(fest)YH( can be omitted.)EP(

  )0 P(The )SM(frag)HY(ment)YH()ES( values can only be present in a merged
  )SM(repos)HY(i)HY(to)HY(ries)YH(.mani)HY(fest)YH()ES( file for a multi-frag)HY(ment)YH( repos)HY(i)HY(tory)YH(.)EP(

  )0 P(As an example, a repos)HY(i)HY(tory)YH( mani)HY(fest)YH( list for the
  )SM(math/testing)ES( repos)HY(i)HY(tory)YH( could look like this:)EP(

  ) 13 48 PR(# math/testing
#
: 1
min-bpkg-version: 0.14.0
:
email: math-pkg@example.org
summary: Math package repository
:
role: complement
location: ../stable
:
role: prerequiste
location: https://pkg.example.org/1/misc/testing)RP(

  )0 P(Here the first mani)HY(fest)YH( describes the base repos)HY(i)HY(tory)YH( itself, the second
  mani)HY(fest)YH( \235 a comple)HY(ment)YH( repos)HY(i)HY(tory)YH(, and the third mani)HY(fest)YH( \235 a
  prereq)HY(ui)HY(site)YH( repos)HY(i)HY(tory)YH(. Note that the comple)HY(ment)YH( repos)HY(i)HY(tory)YH('s loca)HY(tion)YH( is
  spec)HY(i)HY(fied)YH( as a rela)HY(tive)YH( path. For example, if the base repos)HY(i)HY(tory)YH( loca)HY(tion)YH(
  were:)EP(

  ) 1 38 PR(https://pkg.example.org/1/math/testing)RP(

  )0 P(Then the complete)HY(ment)YH('s loca)HY(tion)YH( would be:)EP(

  ) 1 37 PR(https://pkg.example.org/1/math/stable)RP(

  )0 P(The header mani)HY(fest)YH( synop)HY(sis)YH( is presented next followed by the detailed
  descrip)HY(tion)YH( of each value in subse)HY(quent)YH( sections.)EP(

  ) 2 29 PR([min-bpkg-version]: <ver>
[compression]: <compressions>)RP(

  )0 3 61 H(6.6.1)WB 136 Sn()WB 63 Sn(
  )SM(min-bpkg-version)ES()EH(

  ) 1 25 PR([min-bpkg-version]: <ver>)RP(

  )0 P(The earli)HY(est)YH( version of )SM()BD(bpkg)ES()ES( that is compat)HY(i)HY(ble)YH( with
  this repos)HY(i)HY(tory)YH(. Note that if spec)HY(i)HY(fied)YH(, it must be the first value in the
  header.)EP(

  )0 3 62 H(6.6.2)WB 137 Sn()WB 64 Sn(
  )SM(compres)HY(sion)YH()ES()EH(

  ) 3 48 PR([compression]: <compressions>

<compressions> = <compression> [ <compression>]*)RP(

  )0 P(Avail)HY(able)YH( compressed vari)HY(ants)YH( of the )SM(pack)HY(ages)YH(.mani)HY(fest)YH()ES( file.
  The format is a space-sepa)HY(rated)YH( list of the compres)HY(sion)YH( methods. The
  )SM(none)ES( method means no compres)HY(sion)YH(. Absent
  )SM(compres)HY(sion)YH()ES( value is equiv)HY(a)HY(lent)YH( to spec)HY(i)HY(fy)HY(ing)YH( it with the
  )SM(none)ES( value.)EP(

  )0 2 63 H(6.7)WB 138 Sn()WB 65 Sn( Signa)HY(ture)YH( Mani)HY(fest)YH( for
  )SM()BD(pkg)ES()ES( Repos)HY(i)HY(to)HY(ries)YH()EH(

  )0 P(The signa)HY(ture)YH( mani)HY(fest)YH( \201the )SM(signa)HY(ture)YH(.mani)HY(fest)YH()ES( file found in
  the )SM()BD(pkg)ES()ES( repos)HY(i)HY(tory)YH( root direc)HY(tory)YH(\202 contains the
  signa)HY(ture)YH( of the repos)HY(i)HY(tory)YH('s )SM(pack)HY(ages)YH(.mani)HY(fest)YH()ES( file. In order
  to detect the situ)HY(a)HY(tion)YH( where the down)HY(loaded)YH( )SM(signa)HY(ture)YH(.mani)HY(fest)YH()ES(
  and )SM(pack)HY(ages)YH(.mani)HY(fest)YH()ES( files belong to differ)HY(ent)YH( updates, the
  mani)HY(fest)YH( contains both the check)HY(sum)YH( and the signa)HY(ture)YH( \201which is the
  encrypted check)HY(sum)YH(\202. We cannot rely on just the signa)HY(ture)YH(
  since a mismatch could mean either a split update or tamper)HY(ing)YH(. The
  mani)HY(fest)YH( synop)HY(sis)YH( is presented next followed by the detailed descrip)HY(tion)YH( of
  each value in subse)HY(quent)YH( sections.)EP(

  ) 2 16 PR(sha256sum: <sum>
signature: <sig>)RP(

  )0 3 64 H(6.7.1)WB 139 Sn()WB 66 Sn( )SM(sha256sum)ES()EH(

  ) 1 16 PR(sha256sum: <sum>)RP(

  )0 P(The SHA256 check)HY(sum)YH( of the )SM(pack)HY(ages)YH(.mani)HY(fest)YH()ES( file. The
  )I(sum)ES( value should be 64 char)HY(ac)HY(ters)YH( long \201that is, just the SHA256
  value, no file name or any other markers\202, be calcu)HY(lated)YH( in the binary mode,
  and use lower-case letters.)EP(

  )0 3 65 H(6.7.2)WB 140 Sn()WB 67 Sn( )SM(signa)HY(ture)YH()ES()EH(

  ) 1 16 PR(signature: <sig>)RP(

  )0 P(The signa)HY(ture)YH( of the )SM(pack)HY(ages)YH(.mani)HY(fest)YH()ES( file. It should be
  calcu)HY(lated)YH( by encrypt)HY(ing)YH( the above )SM(sha256sum)ES( value with the
  repos)HY(i)HY(tory)YH( certifi)HY(cate)YH('s private key and then )SM(base64)ES(-encod)HY(ing)YH(
  the result.)EP(

  )0 1 66 H(7)WB 141 Sn()WB 68 Sn( Binary Distri)HY(bu)HY(tion)YH( Package Mapping)EH(

  )0 2 67 H(7.1)WB 142 Sn()WB 69 Sn( Debian Package Mapping)EH(

  )0 P(This section describes the distri)HY(bu)HY(tion)YH( package mapping for Debian and
  alike \201Ubuntu, etc\202.)EP(

  )0 3 68 H(7.1.1)WB 143 Sn()WB 70 Sn( Debian Package Mapping for
  Consump)HY(tion)YH()EH(

  )0 P(A library in Debian is normally split up into several pack)HY(ages)YH(: the
  shared library package \201e.g., )SM(libfoo1)ES( where )SM(1)ES( is
  the ABI version\202, the devel)HY(op)HY(ment)YH( files package \201e.g.,
  )SM(libfoo-dev)ES(\202, the docu)HY(men)HY(ta)HY(tion)YH( files package \201e.g.,
  )SM(libfoo-doc)ES(\202, the debug symbols package \201e.g.,
  )SM(libfoo1-dbg)ES(\202, and the archi)HY(tec)HY(ture)YH(-inde)HY(pen)HY(dent)YH( files \201e.g.,
  )SM(libfoo1-common)ES(\202. All the pack)HY(ages)YH( except )SM(-dev)ES( are
  optional and there is quite a bit of vari)HY(abil)HY(ity)YH(. Here are a few
  exam)HY(ples)YH(:)EP(

  ) 7 48 PR(libsqlite3-0 libsqlite3-dev

libssl1.1 libssl-dev libssl-doc
libssl3 libssl-dev libssl-doc

libcurl4 libcurl4-openssl-dev libcurl4-doc
libcurl3-gnutls libcurl4-gnutls-dev libcurl4-doc)RP(

  )0 P(Note that while most library package names in Debian start with
  )SM(lib)ES( \201per the policy\202, there are excep)HY(tions)YH( \201e.g.,
  )SM(zlib1g)ES( )SM(zlib1g-dev)ES(\202. The header-only library
  package names may or may not start with )SM(lib)ES( and end with
  )SM(-dev)ES( \201e.g., )SM(libeigen3-dev)ES(,
  )SM(rapid)HY(j)HY(son)YH(-dev)ES(, )SM(catch2)ES(\202. Also note that manual
  )SM(-dbg)ES( pack)HY(ages)YH( are obso)HY(lete)YH( in favor of auto)HY(matic)YH(
  )SM(-dbgsym)ES( pack)HY(ages)YH( from Debian 9.)EP(

  )0 P(For executable pack)HY(ages)YH( there is normally no )SM(-dev)ES( pack)HY(ages)YH(
  but )SM(-dbg)ES(, )SM(-doc)ES(, and )SM(-common)ES( are
  plau)HY(si)HY(ble)YH(.)EP(

  )0 P(Based on that, our approach when trying to auto)HY(mat)HY(i)HY(cally)YH( map a
  )SM(bpkg)ES( library package name to Debian package names is to go for
  the )SM(-dev)ES( package first and figure out the shared library
  package from that based on the fact that the )SM(-dev)ES( package
  should have the )SM(==)ES( depen)HY(dency)YH( on the shared library package
  with the same version and its name should normally start with the
  )SM(-dev)ES( package's stem.)EP(

  )0 P(The format of the )SM(debian-name)ES( \201or alike\202 mani)HY(fest)YH( value is a
  comma-sepa)HY(rated)YH( list of one or more package groups:)EP(

  ) 1 38 PR(<package-group> [, <package-group>...])RP(

  )0 P(Where each )SM(<package-group>)ES( is the space-sepa)HY(rated)YH( list of
  one or more package names:)EP(

  ) 1 35 PR(<package-name> [ <package-name>...])RP(

  )0 P(All the pack)HY(ages)YH( in the group should be "package compo)HY(nents)YH(" \201for the
  lack of a better term\202 of the same "logical package", such as
  )SM(-dev)ES(, )SM(-doc)ES(, )SM(-common)ES( pack)HY(ages)YH(. They
  normally have the same version.)EP(

  )0 P(The first group is called the main group and the first package in the
  group is called the main package. Note that all the groups are consumed
  \201installed\202 but only the main group is produced \201pack)HY(aged)YH(\202.)EP(

  )0 P(We allow/recom)HY(mend)YH( spec)HY(i)HY(fy)HY(ing)YH( the )SM(-dev)ES( package instead of
  the main package for libraries \201see )0 16 1 A()SM(type)ES()16 0 TN TL()Ec /AF f D( for details\202,
  seeing that we are capable of detect)HY(ing)YH( the main package auto)HY(mat)HY(i)HY(cally)YH( \201see
  above\202. If the library name happens to end with )SM(-dev)ES( \201which
  poses an ambi)HY(gu)HY(ity)YH(\202, then the )SM(-dev)ES( package should be spec)HY(i)HY(fied)YH(
  explic)HY(itly)YH( as the second package to disam)HY(biguate)YH( this situ)HY(a)HY(tion)YH(.)EP(

  )0 P(The Debian package version has the
  )SM([<epoch>:]<upstream>[-<revi)HY(sion)YH(>])ES( form \201see
  )SM()BD(deb-version\2015\202)ES()ES( for details\202. If no explicit mapping to
  the )SM(bpkg)ES( version is spec)HY(i)HY(fied)YH( with the
  )SM(debian-to-down)HY(stream)YH(-version)ES( \201or alike\202 mani)HY(fest)YH( values or none
  match, then we fall)HY(back)YH( to using the )SM(<upstream>)ES( part as the
  )SM(bpkg)ES( version. If explicit mapping is spec)HY(i)HY(fied)YH(, then we match
  it against the )SM([<epoch>:]<upstream>)ES( parts ignor)HY(ing)YH(
  )SM(<revi)HY(sion)YH(>)ES(.)EP(

  )0 3 69 H(7.1.2)WB 144 Sn()WB 71 Sn( Debian Package Mapping for
  Produc)HY(tion)YH()EH(

  )0 P(The same )SM(debian-name)ES( \201or alike\202 mani)HY(fest)YH( values as used for
  consump)HY(tion)YH( are also used to derive the package names for produc)HY(tion)YH( except
  here we have the option to specify alter)HY(na)HY(tive)YH( non-native package names
  using the special )SM(debian_0-name)ES( \201or alike\202 value. If only the
  )SM(-dev)ES( package is spec)HY(i)HY(fied)YH(, then the main package name is
  derived from that by remov)HY(ing)YH( the )SM(-dev)ES( suffix. Note that
  regard)HY(less)YH( of whether the main package name is spec)HY(i)HY(fied)YH( or not, the )0 2 A()SM()BD(bpkg-pkg-bindist\2011\202)ES()ES()EA(
  command may omit gener)HY(at)HY(ing)YH( the main package for a binless library.)EP(

  )0 P(The gener)HY(ated)YH( binary package version can be spec)HY(i)HY(fied)YH( with the
  )SM(debian-version)ES( \201or alike\202 mani)HY(fest)YH( value. If it's not
  spec)HY(i)HY(fied)YH(, then the )SM(upstream-version)ES( is used if spec)HY(i)HY(fied)YH(.
  Other)HY(wise)YH(, the )SM(bpkg)ES( version is trans)HY(lated)YH( to the Debian version
  as described next.)EP(

  )0 P(To recap, a Debian package version has the follow)HY(ing)YH( form:)EP(

  ) 1 33 PR([<epoch>:]<upstream>[-<revision>])RP(

  )0 P(For details on the order)HY(ing)YH( seman)HY(tics)YH(, see the )SM(Version)ES(
  )SM(control)ES( file field docu)HY(men)HY(ta)HY(tion)YH( in the Debian Policy Manual.
  While overall unsur)HY(pris)HY(ing)YH(, one notable excep)HY(tion)YH( is )SM(~)ES(, which
  sorts before anything else and is commonly used for upstream pre-releases.
  For example, )SM(1.0~beta1~svn1245)ES( sorts earlier than
  )SM(1.0~beta1)ES(, which sorts earlier than )SM(1.0)ES(.)EP(

  )0 P(There are also various special version conven)HY(tions)YH( \201such as all the
  revi)HY(sion)YH( compo)HY(nents)YH( in )SM(1.4-5+deb10u1~bpo9u1)ES(\202 but they all
  appear to express rela)HY(tion)HY(ships)YH( between native pack)HY(ages)YH( and/or their
  upstream and thus do not apply to our case.)EP(

  )0 P(To recap, the )SM(bpkg)ES( version has the follow)HY(ing)YH( form \201see )0 4 1 A(Package Version)4 0 TN TL()Ec /AF f D( for details\202:)EP(

  ) 1 45 PR([+<epoch>-]<upstream>[-<prerel>][+<revision>])RP(

  )0 P(Let's start with the case where neither distri)HY(bu)HY(tion)YH(
  \201)SM(debian-version)ES(\202 nor upstream version
  \201)SM(upstream-version)ES(\202 is spec)HY(i)HY(fied)YH( and we need to derive
  every)HY(thing)YH( from the )SM(bpkg)ES( version \201what follows is as much
  descrip)HY(tion)YH( as ratio)HY(nale)YH(\202.)EP(

  )0 DL(  )0 DT()SM(<epoch>)ES(
  )DD(On one hand, if we keep our \201as in, )SM(bpkg)ES(\202 epoch, it won't
  neces)HY(sar)HY(ily)YH( match Debian's native package epoch. But on the other it will
  allow our binary pack)HY(ages)YH( from differ)HY(ent)YH( epochs to co-exist. Seeing that
  this can be easily over)HY(rid)HY(den)YH( with a custom distri)HY(bu)HY(tion)YH( version \201see
  below\202, we keep it.

  )0 P(Note that while the Debian start/default epoch is 0, ours is 1 \201we use
  the 0 epoch for stub pack)HY(ages)YH(\202. So we shift this value range.)EP(

  )0 DT()SM(<upstream>[-<prerel>])ES(
  )DD(Our upstream version maps natu)HY(rally)YH( to Debian's. That is, our upstream
  version format/seman)HY(tics)YH( is a subset of Debian's.

  )0 P(If this is a pre-release, then we could fail \201that is, don't allow
  pre-releases\202 but then we won't be able to test on pre-release pack)HY(ages)YH(, for
  example, to make sure the name mapping is correct. Plus some)HY(times)YH( it's
  useful to publish pre-releases. We could ignore it, but then such pack)HY(ages)YH(
  will be indis)HY(tin)HY(guish)HY(able)YH( from each other and the final release, which is
  not ideal. On the other hand, Debian has the mech)HY(a)HY(nism)YH( \201)SM(~)ES(\202
  which is essen)HY(tially)YH( meant for this, so we use it. We will use
  )SM(<prerel>)ES( as is since its format is the same as upstream and
  thus should map natu)HY(rally)YH(.)EP(

  )0 DT()SM(<revi)HY(sion)YH(>)ES(
  )DD(Similar to epoch, our revi)HY(sion)YH( won't neces)HY(sar)HY(ily)YH( match Debian's native
  package revi)HY(sion)YH(. But on the other hand it will allow us to estab)HY(lish)YH( a
  corre)HY(spon)HY(dence)YH( between source and binary pack)HY(ages)YH(. Plus, upgrades between
  binary package revi)HY(sions)YH( will be handled natu)HY(rally)YH(. Seeing that we allow
  over)HY(rid)HY(ing)YH( the revi)HY(sion)YH( with a custom distri)HY(bu)HY(tion)YH( version \201see below\202, we
  keep it.

  )0 P(Note also that both Debian and our revi)HY(sion)YH( start/default is 0. However,
  it is Debian's conven)HY(tion)YH( to start revi)HY(sion)YH( from 1. But it doesn't seem
  worth it for us to do any shift)HY(ing)YH( here and so we will use our revi)HY(sion)YH( as
  is.)EP(

  )0 P(Another related ques)HY(tion)YH( is whether we should also include some meta)HY(data)YH(
  that iden)HY(ti)HY(fies)YH( the distri)HY(bu)HY(tion)YH( and its version that this package is for.
  The strongest prece)HY(dent)YH( here is prob)HY(a)HY(bly)YH( Ubuntu's PPA. While there doesn't
  appear to be a consis)HY(tent)YH( approach, one can often see versions like
  these:)EP(

  ) 3 33 PR(2.1.0-1~ppa0~ubuntu14.04.1,
1.4-5-1.2.1~ubuntu20.04.1~ppa1
22.12.2-0ubuntu1~ubuntu23.04~ppa1)RP(

  )0 P(Seeing that this is a non-sortable compo)HY(nent)YH( \201what in semver would be
  called "build meta)HY(data)YH("\202, using )SM(~)ES( is prob)HY(a)HY(bly)YH( not the worst
  choice.)EP(

  )0 P(So we follow this lead and add the )SM(~<ID><VERSION_ID>)ES(
  )SM(os-release\2015\202)ES( compo)HY(nent)YH( to revi)HY(sion)YH(. Note that this also means
  we will have to make the 0 revi)HY(sion)YH( explicit. For example:)EP(

  ) 2 19 PR(1.2.3-1~debian10
1.2.3-0~ubuntu20.04)RP(
  )LD(

  )0 P(The next case to consider is when we have the upstream version
  \201)SM(upstream-version)ES( mani)HY(fest)YH( value\202. After some rumi)HY(na)HY(tion)YH( it
  feels correct to use it in place of the
  )SM(<epoch>-<upstream>)ES( compo)HY(nents)YH( in the above mapping
  \201upstream version itself cannot have epoch\202. In other words, we will add the
  pre-release and revi)HY(sion)YH( compo)HY(nents)YH( from the )SM(bpkg)ES( version. If
  this is not the desired seman)HY(tics)YH(, then it can always be over)HY(rid)HY(den)YH( with the
  distri)HY(bu)HY(tion)YH( version \201see below\202.)EP(

  )0 P(Finally, we have the distri)HY(bu)HY(tion)YH( version. The Debian
  )SM(<epoch>)ES( and )SM(<upstream>)ES( compo)HY(nents)YH( are
  straight)HY(for)HY(ward)YH(: they should be spec)HY(i)HY(fied)YH( by the distri)HY(bu)HY(tion)YH( version as
  required. This leaves pre-release and revi)HY(sion)YH(. It feels like in most cases
  we would want these copied over from the )SM(bpkg)ES( version
  auto)HY(mat)HY(i)HY(cally)YH( \235 it's too tedious and error-prone to main)HY(tain)YH( them
  manu)HY(ally)YH(. However, we want the user to have the full over)HY(ride)YH( ability. So
  instead, if empty revi)HY(sion)YH( is spec)HY(i)HY(fied)YH(, as in )SM(1.2.3-)ES(, then we
  auto)HY(mat)HY(i)HY(cally)YH( add the )SM(bpkg)ES( revi)HY(sion)YH(. Simi)HY(larly)YH(, if empty
  pre-release is spec)HY(i)HY(fied)YH(, as in )SM(1.2.3~)ES(, then we add the
  )SM(bpkg)ES( pre-release. To add both auto)HY(mat)HY(i)HY(cally)YH(, we would specify
  )SM(1.2.3~-)ES( \201other combi)HY(na)HY(tions)YH( are )SM(1.2.3~b.1-)ES( and
  )SM(1.2.3~-1)ES(\202.)EP(

  )0 P(Note also that per the Debian version spec)HY(i)HY(fi)HY(ca)HY(tion)YH(, if upstream contains
  )SM(:)ES( and/or )SM(-)ES(, then epoch and/or revi)HY(sion)YH( must be
  spec)HY(i)HY(fied)YH( explic)HY(itly)YH(, respec)HY(tively)YH(. Note that the )SM(bpkg)ES( upstream
  version may not contain either.)EP(

  )0 2 70 H(7.2)WB 145 Sn()WB 72 Sn( Fedora Package Mapping)EH(

  )0 P(This section describes the distri)HY(bu)HY(tion)YH( package mapping for Fedora and
  alike \201Red Hat Enter)HY(prise)YH( Linux, Centos, etc\202.)EP(

  )0 3 71 H(7.2.1)WB 146 Sn()WB 73 Sn( Fedora Package Mapping for
  Consump)HY(tion)YH()EH(

  )0 P(A library in Fedora is normally split up into several pack)HY(ages)YH(: the
  shared library package \201e.g., )SM(libfoo)ES(\202, the devel)HY(op)HY(ment)YH( files
  package \201e.g., )SM(libfoo-devel)ES(\202, the static library package \201e.g.,
  )SM(libfoo-static)ES(; may also be placed into the )SM(-devel)ES(
  package\202, the docu)HY(men)HY(ta)HY(tion)YH( files package \201e.g., )SM(libfoo-doc)ES(\202,
  the debug symbols and source files pack)HY(ages)YH( \201e.g.,
  )SM(libfoo-debug)HY(info)YH()ES( and )SM(libfoo-debug)HY(source)YH()ES(\202, and the
  common or archi)HY(tec)HY(ture)YH(-inde)HY(pen)HY(dent)YH( files \201e.g., )SM(libfoo-common)ES(\202.
   All the pack)HY(ages)YH( except )SM(-devel)ES( are optional and there is quite
  a bit of vari)HY(abil)HY(ity)YH(. In partic)HY(u)HY(lar)YH(, the )SM(lib)ES( prefix in
  )SM(libfoo)ES( is not a require)HY(ment)YH( \201unlike in Debian\202 and is normally
  present only if upstream name has it \201see some exam)HY(ples)YH( below\202.)EP(

  )0 P(For appli)HY(ca)HY(tion)YH( pack)HY(ages)YH( there is normally no )SM(-devel)ES(
  pack)HY(ages)YH( but )SM(-debug*)ES(, )SM(-doc)ES(, and
  )SM(-common)ES( are plau)HY(si)HY(ble)YH(.)EP(

  )0 P(For mixed pack)HY(ages)YH( which include both appli)HY(ca)HY(tions)YH( and libraries, the
  shared library package normally has the )SM(-libs)ES( suffix \201e.g.,
  )SM(foo-libs)ES(\202.)EP(

  )0 P(A package name may also include an upstream version based suffix if
  multi)HY(ple)YH( versions of the package can be installed simul)HY(ta)HY(ne)HY(ously)YH( \201e.g.,
  )SM(libfoo1.1)ES( )SM(libfoo1.1-devel)ES(, )SM(libfoo2)ES(
  )SM(libfoo2-devel)ES(\202.)EP(

  )0 P(Termi)HY(nol)HY(ogy)YH(-wise, the term "base package" \201some)HY(time)YH( also "main package"\202
  normally refers to either the appli)HY(ca)HY(tion)YH( or shared library package \201as
  decided by the package main)HY(tainer)YH( in the spec file\202 with the suffixed
  pack)HY(ages)YH( \201)SM(-devel)ES(, )SM(-doc)ES(, etc\202 called
  "subpack)HY(ages)YH(".)EP(

  )0 P(Here are a few exam)HY(ples)YH(:)EP(

  ) 28 66 PR(libpq libpq-devel

zlib zlib-devel zlib-static

catch-devel

eigen3-devel eigen3-doc

xerces-c xerces-c-devel xerces-c-doc

libsigc++20 libsigc++20-devel libsigc++20-doc
libsigc++30 libsigc++30-devel libsigc++30-doc

icu libicu libicu-devel libicu-doc

openssl openssl-libs openssl-devel openssl-static
openssl1.1 openssl1.1-devel

curl libcurl libcurl-devel

sqlite sqlite-libs sqlite-devel sqlite-doc

community-mysql community-mysql-libs community-mysql-devel
community-mysql-common community-mysql-server

ncurses ncurses-libs ncurses-c++-libs ncurses-devel ncurses-static

keyutils keyutils-libs keyutils-libs-devel)RP(

  )0 P(Note that while we support arbi)HY(trary)YH( )SM(-debug*)ES( sub-package
  names for consump)HY(tion)YH(, we only gener)HY(ate)YH(
  )SM(<main-package>-debug*)ES(.)EP(

  )0 P(Based on that, our approach when trying to auto)HY(mat)HY(i)HY(cally)YH( map a
  )SM(bpkg)ES( library package name to Fedora package names is to go for
  the )SM(-devel)ES( package first and figure out the shared library
  package from that based on the fact that the )SM(-devel)ES( package
  should have the )SM(==)ES( depen)HY(dency)YH( on the shared library package
  with the same version and its name should normally start with the
  )SM(-devel)ES( package's stem and poten)HY(tially)YH( end with the
  )SM(-libs)ES( suffix. If failed to find the )SM(-devel)ES(
  package, we re-try but now using the )SM(bpkg)ES( project name instead
  of the package name \201see, for example, )SM(openssl)ES(,
  )SM(sqlite)ES(\202.)EP(

  )0 P(The format of the )SM(fedora-name)ES( \201or alike\202 mani)HY(fest)YH( value
  value is a comma-sepa)HY(rated)YH( list of one or more package groups:)EP(

  ) 1 38 PR(<package-group> [, <package-group>...])RP(

  )0 P(Where each )SM(<package-group>)ES( is the space-sepa)HY(rated)YH( list of
  one or more package names:)EP(

  ) 1 35 PR(<package-name> [ <package-name>...])RP(

  )0 P(All the pack)HY(ages)YH( in the group should belong to the same "logical
  package", such as )SM(-devel)ES(, )SM(-doc)ES(,
  )SM(-common)ES( pack)HY(ages)YH(. They normally have the same version.)EP(

  )0 P(The first group is called the main group and the first package in the
  group is called the main package. Note that all the groups are consumed
  \201installed\202 but only the main group is produced \201pack)HY(aged)YH(\202.)EP(

  )0 P(\201Note that above we use the term "logical package" instead of "base
  package" since the main package may not be the base package, for example
  being the )SM(-libs)ES( subpack)HY(age)YH(.\202)EP(

  )0 P(We allow/recom)HY(mend)YH( spec)HY(i)HY(fy)HY(ing)YH( the )SM(-devel)ES( package instead of
  the main package for libraries \201see )0 16 1 A()SM(type)ES()16 0 TN TL()Ec /AF f D( for details\202,
  seeing that we are capable of detect)HY(ing)YH( the main package auto)HY(mat)HY(i)HY(cally)YH( \201see
  above\202. If the library name happens to end with )SM(-devel)ES( \201which
  poses an ambi)HY(gu)HY(ity)YH(\202, then the )SM(-devel)ES( package should be
  spec)HY(i)HY(fied)YH( explic)HY(itly)YH( as the second package to disam)HY(biguate)YH( this
  situ)HY(a)HY(tion)YH(.)EP(

  )0 P(The Fedora package version has the
  )SM([<epoch>:]<version>-<release>)ES( form \201see Fedora Package
  Version)HY(ing)YH( Guide)HY(lines)YH( for details\202. If no explicit mapping to the
  )SM(bpkg)ES( version is spec)HY(i)HY(fied)YH( with the
  )SM(fedora-to-down)HY(stream)YH(-version)ES( \201or alike\202 mani)HY(fest)YH( values or none
  match, then we fall)HY(back)YH( to using the )SM(<version>)ES( part as the
  )SM(bpkg)ES( version. If explicit mapping is spec)HY(i)HY(fied)YH(, then we match
  it against the )SM([<epoch>:]<version>)ES( parts ignor)HY(ing)YH(
  )SM(<release>)ES(.)EP(

  )0 3 72 H(7.2.2)WB 147 Sn()WB 74 Sn( Fedora Package Mapping for
  Produc)HY(tion)YH()EH(

  )0 P(The same )SM(fedora-name)ES( \201or alike\202 mani)HY(fest)YH( values as used for
  consump)HY(tion)YH( are also used to derive the package names for produc)HY(tion)YH( except
  here we have the option to specify alter)HY(na)HY(tive)YH( non-native package names
  using the special )SM(fedora_0-name)ES( \201or alike\202 value. If only the
  )SM(-devel)ES( package is spec)HY(i)HY(fied)YH(, then the main package name is
  derived from that by remov)HY(ing)YH( the )SM(-devel)ES( suffix. Note that
  regard)HY(less)YH( of whether the main package name is spec)HY(i)HY(fied)YH( or not, the )0 2 A()SM()BD(bpkg-pkg-bindist\2011\202)ES()ES()EA(
  command may omit gener)HY(at)HY(ing)YH( the main package for a binless library.)EP(

  )0 P(The gener)HY(ated)YH( binary package version can be spec)HY(i)HY(fied)YH( with the
  )SM(fedora-version)ES( \201or alike\202 mani)HY(fest)YH( value. If it's not
  spec)HY(i)HY(fied)YH(, then the )SM(upstream-version)ES( is used if spec)HY(i)HY(fied)YH(.
  Other)HY(wise)YH(, the )SM(bpkg)ES( version is trans)HY(lated)YH( to the Fedora version
  as described next.)EP(

  )0 P(To recap, a Fedora package version has the follow)HY(ing)YH( form:)EP(

  ) 1 29 PR([<epoch>:]<version>-<release>)RP(

  )0 P(Where <release> has the follow)HY(ing)YH( form:)EP(

  ) 1 37 PR(<release-number>[.<distribution-tag>])RP(

  )0 P(For details on the order)HY(ing)YH( seman)HY(tics)YH(, see the Fedora Version)HY(ing)YH(
  Guide)HY(lines)YH(. While overall unsur)HY(pris)HY(ing)YH(, the only notable excep)HY(tions)YH( are
  )SM(~)ES(, which sorts before anything else and is commonly used for
  upstream pre-releases, and )SM(^)ES(, which sorts after anything else
  and is suppos)HY(edly)YH( used for upstream post-release snap)HY(shots)YH(. For example,
  )SM(0.1.0~alpha.1-1.fc35)ES( sorts earlier than
  )SM(0.1.0-1.fc35)ES(.)EP(

  )0 P(To recap, the bpkg version has the follow)HY(ing)YH( form \201see )0 4 1 A(Package Version)4 0 TN TL()Ec /AF f D( for details\202:)EP(

  ) 1 45 PR([+<epoch>-]<upstream>[-<prerel>][+<revision>])RP(

  )0 P(Let's start with the case where neither distri)HY(bu)HY(tion)YH(
  \201)SM(fedora-version)ES(\202 nor upstream version
  \201)SM(upstream-version)ES(\202 is spec)HY(i)HY(fied)YH( and we need to derive
  every)HY(thing)YH( from the )SM(bpkg)ES( version \201what follows is as much
  descrip)HY(tion)YH( as ratio)HY(nale)YH(\202.)EP(

  )0 DL(  )0 DT()SM(<epoch>)ES(
  )DD(On one hand, if we keep our \201as in, )SM(bpkg)ES(\202 epoch, it won't
  neces)HY(sar)HY(ily)YH( match Fedora's native package epoch. But on the other it will
  allow our binary pack)HY(ages)YH( from differ)HY(ent)YH( epochs to co-exist. Seeing that
  this can be easily over)HY(rid)HY(den)YH( with a custom distri)HY(bu)HY(tion)YH( version \201see
  below\202, we keep it.

  )0 P(Note that while the Fedora start/default epoch is 0, ours is 1 \201we use
  the 0 epoch for stub pack)HY(ages)YH(\202. So we shift this value range.)EP(

  )0 DT()SM(<upstream>[-<prerel>])ES(
  )DD(Our upstream version maps natu)HY(rally)YH( to Fedora's
  )SM(<version>)ES(. That is, our upstream version format/seman)HY(tics)YH( is
  a subset of Fedora's )SM(<version>)ES(.

  )0 P(If this is a pre-release, then we could fail \201that is, don't allow
  pre-releases\202 but then we won't be able to test on pre-release pack)HY(ages)YH(, for
  example, to make sure the name mapping is correct. Plus some)HY(times)YH( it's
  useful to publish pre-releases. We could ignore it, but then such pack)HY(ages)YH(
  will be indis)HY(tin)HY(guish)HY(able)YH( from each other and the final release, which is
  not ideal. On the other hand, Fedora has the mech)HY(a)HY(nism)YH( \201)SM(~)ES(\202
  which is essen)HY(tially)YH( meant for this, so we use it. We will use
  )SM(<prerel>)ES( as is since its format is the same as
  )SM(<upstream>)ES( and thus should map natu)HY(rally)YH(.)EP(

  )0 DT()SM(<revi)HY(sion)YH(>)ES(
  )DD(Similar to epoch, our revi)HY(sion)YH( won't neces)HY(sar)HY(ily)YH( match Fedora's native
  package release number. But on the other hand it will allow us to estab)HY(lish)YH(
  a corre)HY(spon)HY(dence)YH( between source and binary pack)HY(ages)YH(. Plus, upgrades between
  binary package releases will be handled natu)HY(rally)YH(. Also note that the
  revi)HY(sion)YH( is manda)HY(tory)YH( in Fedora. Seeing that we allow over)HY(rid)HY(ing)YH( the
  releases with a custom distri)HY(bu)HY(tion)YH( version \201see below\202, we use it.

  )0 P(Note that the Fedora start release number is 1 and our revi)HY(sion)YH( is 0. So
  we shift this value range.)EP(

  )0 P(Also we auto)HY(mat)HY(i)HY(cally)YH( add the trail)HY(ing)YH( distri)HY(bu)HY(tion)YH( tag
  \201)SM(.fc35)ES(, )SM(.el8)ES(, etc\202 to the Fedora release. The tag
  is deduced auto)HY(mat)HY(i)HY(cally)YH( unless over)HY(rid)HY(den)YH( on the command line \201see )0 2 A()SM()BD(bpkg-pkg-bindist\2011\202)ES()ES()EA(
  command for details\202.)EP(
  )LD(

  )0 P(The next case to consider is when we have the upstream version
  \201)SM(upstream-version)ES( mani)HY(fest)YH( value\202. After some rumi)HY(na)HY(tion)YH( it
  feels correct to use it in place of the
  )SM(<epoch>-<upstream>)ES( compo)HY(nents)YH( in the above mapping
  \201upstream version itself cannot have epoch\202. In other words, we will add the
  pre-release and revi)HY(sion)YH( compo)HY(nents)YH( from the )SM(bpkg)ES( version. If
  this is not the desired seman)HY(tics)YH(, then it can always be over)HY(rid)HY(den)YH( with the
  distri)HY(bu)HY(tion)YH( version \201see below\202.)EP(

  )0 P(Finally, we have the distri)HY(bu)HY(tion)YH( version. The Fedora
  )SM(<epoch>)ES( and )SM(<version>)ES( compo)HY(nents)YH( are
  straight)HY(for)HY(ward)YH(: they should be spec)HY(i)HY(fied)YH( by the distri)HY(bu)HY(tion)YH( version as
  required. This leaves pre-release and release. It feels like in most cases
  we would want these copied over from the )SM(bpkg)ES( version
  auto)HY(mat)HY(i)HY(cally)YH( \235 it's too tedious and error-prone to main)HY(tain)YH( them
  manu)HY(ally)YH(. However, we want the user to have the full over)HY(ride)YH( ability. So
  instead, if empty release is spec)HY(i)HY(fied)YH(, as in )SM(1.2.3-)ES(, then we
  auto)HY(mat)HY(i)HY(cally)YH( add the )SM(bpkg)ES( revi)HY(sion)YH(. Simi)HY(larly)YH(, if empty
  pre-release is spec)HY(i)HY(fied)YH(, as in )SM(1.2.3~)ES(, then we add the
  )SM(bpkg)ES( pre-release. To add both auto)HY(mat)HY(i)HY(cally)YH(, we would specify
  )SM(1.2.3~-)ES( \201other combi)HY(na)HY(tions)YH( are )SM(1.2.3~b.1-)ES( and
  )SM(1.2.3~-1)ES(\202. If spec)HY(i)HY(fied)YH(, the release must not contain the
  distri)HY(bu)HY(tion)YH( tag, since it is deduced auto)HY(mat)HY(i)HY(cally)YH( unless over)HY(rid)HY(den)YH( on the
  command line \201see )0 2 A()SM()BD(bpkg-pkg-bindist\2011\202)ES()ES()EA(
  command for details\202. Also, since the release compo)HY(nent)YH( is manda)HY(tory)YH( in
  Fedora, if it is omitted together with the sepa)HY(rat)HY(ing)YH( dash we will add the
  release 1 auto)HY(mat)HY(i)HY(cally)YH(.)EP(

  )0 P(Note also that per the RPM spec file format docu)HY(men)HY(ta)HY(tion)YH( neither version
  nor release compo)HY(nents)YH( may contain )SM(:)ES( or )SM(-)ES(. Note
  that the )SM(bpkg)ES( upstream version may not contain either.)EP(

)BR(

)WB NL
/TE t D NP /OU t D TU PM 1 eq and{/Pn () D showpage}if end restore
